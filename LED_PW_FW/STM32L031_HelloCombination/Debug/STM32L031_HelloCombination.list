
STM32L031_HelloCombination.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d84  08003d84  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003d84  08003d84  00013d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d8c  08003d8c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d8c  08003d8c  00013d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d90  08003d90  00013d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000018  08003dac  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08003dac  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc6b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c23  00000000  00000000  0002ccab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002e8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  0002f398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000112b2  00000000  00000000  0002fda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e28e  00000000  00000000  0004105a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a1f1  00000000  00000000  0004f2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b94d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002674  00000000  00000000  000b952c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d00 	.word	0x08003d00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08003d00 	.word	0x08003d00

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f82e 	bl	8000484 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	0415      	lsls	r5, r2, #16
 8000438:	0c2d      	lsrs	r5, r5, #16
 800043a:	000f      	movs	r7, r1
 800043c:	0001      	movs	r1, r0
 800043e:	002e      	movs	r6, r5
 8000440:	46c6      	mov	lr, r8
 8000442:	4684      	mov	ip, r0
 8000444:	0400      	lsls	r0, r0, #16
 8000446:	0c14      	lsrs	r4, r2, #16
 8000448:	0c00      	lsrs	r0, r0, #16
 800044a:	0c09      	lsrs	r1, r1, #16
 800044c:	4346      	muls	r6, r0
 800044e:	434d      	muls	r5, r1
 8000450:	4360      	muls	r0, r4
 8000452:	4361      	muls	r1, r4
 8000454:	1940      	adds	r0, r0, r5
 8000456:	0c34      	lsrs	r4, r6, #16
 8000458:	1824      	adds	r4, r4, r0
 800045a:	b500      	push	{lr}
 800045c:	42a5      	cmp	r5, r4
 800045e:	d903      	bls.n	8000468 <__aeabi_lmul+0x34>
 8000460:	2080      	movs	r0, #128	; 0x80
 8000462:	0240      	lsls	r0, r0, #9
 8000464:	4680      	mov	r8, r0
 8000466:	4441      	add	r1, r8
 8000468:	0c25      	lsrs	r5, r4, #16
 800046a:	186d      	adds	r5, r5, r1
 800046c:	4661      	mov	r1, ip
 800046e:	4359      	muls	r1, r3
 8000470:	437a      	muls	r2, r7
 8000472:	0430      	lsls	r0, r6, #16
 8000474:	1949      	adds	r1, r1, r5
 8000476:	0424      	lsls	r4, r4, #16
 8000478:	0c00      	lsrs	r0, r0, #16
 800047a:	1820      	adds	r0, r4, r0
 800047c:	1889      	adds	r1, r1, r2
 800047e:	bc80      	pop	{r7}
 8000480:	46b8      	mov	r8, r7
 8000482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000484 <__udivmoddi4>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	4645      	mov	r5, r8
 800048c:	46de      	mov	lr, fp
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	0004      	movs	r4, r0
 8000492:	000d      	movs	r5, r1
 8000494:	4692      	mov	sl, r2
 8000496:	4699      	mov	r9, r3
 8000498:	b083      	sub	sp, #12
 800049a:	428b      	cmp	r3, r1
 800049c:	d830      	bhi.n	8000500 <__udivmoddi4+0x7c>
 800049e:	d02d      	beq.n	80004fc <__udivmoddi4+0x78>
 80004a0:	4649      	mov	r1, r9
 80004a2:	4650      	mov	r0, sl
 80004a4:	f000 f8ba 	bl	800061c <__clzdi2>
 80004a8:	0029      	movs	r1, r5
 80004aa:	0006      	movs	r6, r0
 80004ac:	0020      	movs	r0, r4
 80004ae:	f000 f8b5 	bl	800061c <__clzdi2>
 80004b2:	1a33      	subs	r3, r6, r0
 80004b4:	4698      	mov	r8, r3
 80004b6:	3b20      	subs	r3, #32
 80004b8:	469b      	mov	fp, r3
 80004ba:	d433      	bmi.n	8000524 <__udivmoddi4+0xa0>
 80004bc:	465a      	mov	r2, fp
 80004be:	4653      	mov	r3, sl
 80004c0:	4093      	lsls	r3, r2
 80004c2:	4642      	mov	r2, r8
 80004c4:	001f      	movs	r7, r3
 80004c6:	4653      	mov	r3, sl
 80004c8:	4093      	lsls	r3, r2
 80004ca:	001e      	movs	r6, r3
 80004cc:	42af      	cmp	r7, r5
 80004ce:	d83a      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80004d0:	42af      	cmp	r7, r5
 80004d2:	d100      	bne.n	80004d6 <__udivmoddi4+0x52>
 80004d4:	e078      	b.n	80005c8 <__udivmoddi4+0x144>
 80004d6:	465b      	mov	r3, fp
 80004d8:	1ba4      	subs	r4, r4, r6
 80004da:	41bd      	sbcs	r5, r7
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da00      	bge.n	80004e2 <__udivmoddi4+0x5e>
 80004e0:	e075      	b.n	80005ce <__udivmoddi4+0x14a>
 80004e2:	2200      	movs	r2, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	9200      	str	r2, [sp, #0]
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	465a      	mov	r2, fp
 80004ee:	4093      	lsls	r3, r2
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	4642      	mov	r2, r8
 80004f6:	4093      	lsls	r3, r2
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	e028      	b.n	800054e <__udivmoddi4+0xca>
 80004fc:	4282      	cmp	r2, r0
 80004fe:	d9cf      	bls.n	80004a0 <__udivmoddi4+0x1c>
 8000500:	2200      	movs	r2, #0
 8000502:	2300      	movs	r3, #0
 8000504:	9200      	str	r2, [sp, #0]
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <__udivmoddi4+0x8e>
 800050e:	601c      	str	r4, [r3, #0]
 8000510:	605d      	str	r5, [r3, #4]
 8000512:	9800      	ldr	r0, [sp, #0]
 8000514:	9901      	ldr	r1, [sp, #4]
 8000516:	b003      	add	sp, #12
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	46bb      	mov	fp, r7
 800051c:	46b2      	mov	sl, r6
 800051e:	46a9      	mov	r9, r5
 8000520:	46a0      	mov	r8, r4
 8000522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000524:	4642      	mov	r2, r8
 8000526:	2320      	movs	r3, #32
 8000528:	1a9b      	subs	r3, r3, r2
 800052a:	4652      	mov	r2, sl
 800052c:	40da      	lsrs	r2, r3
 800052e:	4641      	mov	r1, r8
 8000530:	0013      	movs	r3, r2
 8000532:	464a      	mov	r2, r9
 8000534:	408a      	lsls	r2, r1
 8000536:	0017      	movs	r7, r2
 8000538:	4642      	mov	r2, r8
 800053a:	431f      	orrs	r7, r3
 800053c:	4653      	mov	r3, sl
 800053e:	4093      	lsls	r3, r2
 8000540:	001e      	movs	r6, r3
 8000542:	42af      	cmp	r7, r5
 8000544:	d9c4      	bls.n	80004d0 <__udivmoddi4+0x4c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0d9      	beq.n	8000508 <__udivmoddi4+0x84>
 8000554:	07fb      	lsls	r3, r7, #31
 8000556:	0872      	lsrs	r2, r6, #1
 8000558:	431a      	orrs	r2, r3
 800055a:	4646      	mov	r6, r8
 800055c:	087b      	lsrs	r3, r7, #1
 800055e:	e00e      	b.n	800057e <__udivmoddi4+0xfa>
 8000560:	42ab      	cmp	r3, r5
 8000562:	d101      	bne.n	8000568 <__udivmoddi4+0xe4>
 8000564:	42a2      	cmp	r2, r4
 8000566:	d80c      	bhi.n	8000582 <__udivmoddi4+0xfe>
 8000568:	1aa4      	subs	r4, r4, r2
 800056a:	419d      	sbcs	r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	1924      	adds	r4, r4, r4
 8000570:	416d      	adcs	r5, r5
 8000572:	2100      	movs	r1, #0
 8000574:	3e01      	subs	r6, #1
 8000576:	1824      	adds	r4, r4, r0
 8000578:	414d      	adcs	r5, r1
 800057a:	2e00      	cmp	r6, #0
 800057c:	d006      	beq.n	800058c <__udivmoddi4+0x108>
 800057e:	42ab      	cmp	r3, r5
 8000580:	d9ee      	bls.n	8000560 <__udivmoddi4+0xdc>
 8000582:	3e01      	subs	r6, #1
 8000584:	1924      	adds	r4, r4, r4
 8000586:	416d      	adcs	r5, r5
 8000588:	2e00      	cmp	r6, #0
 800058a:	d1f8      	bne.n	800057e <__udivmoddi4+0xfa>
 800058c:	9800      	ldr	r0, [sp, #0]
 800058e:	9901      	ldr	r1, [sp, #4]
 8000590:	465b      	mov	r3, fp
 8000592:	1900      	adds	r0, r0, r4
 8000594:	4169      	adcs	r1, r5
 8000596:	2b00      	cmp	r3, #0
 8000598:	db24      	blt.n	80005e4 <__udivmoddi4+0x160>
 800059a:	002b      	movs	r3, r5
 800059c:	465a      	mov	r2, fp
 800059e:	4644      	mov	r4, r8
 80005a0:	40d3      	lsrs	r3, r2
 80005a2:	002a      	movs	r2, r5
 80005a4:	40e2      	lsrs	r2, r4
 80005a6:	001c      	movs	r4, r3
 80005a8:	465b      	mov	r3, fp
 80005aa:	0015      	movs	r5, r2
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	db2a      	blt.n	8000606 <__udivmoddi4+0x182>
 80005b0:	0026      	movs	r6, r4
 80005b2:	409e      	lsls	r6, r3
 80005b4:	0033      	movs	r3, r6
 80005b6:	0026      	movs	r6, r4
 80005b8:	4647      	mov	r7, r8
 80005ba:	40be      	lsls	r6, r7
 80005bc:	0032      	movs	r2, r6
 80005be:	1a80      	subs	r0, r0, r2
 80005c0:	4199      	sbcs	r1, r3
 80005c2:	9000      	str	r0, [sp, #0]
 80005c4:	9101      	str	r1, [sp, #4]
 80005c6:	e79f      	b.n	8000508 <__udivmoddi4+0x84>
 80005c8:	42a3      	cmp	r3, r4
 80005ca:	d8bc      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80005cc:	e783      	b.n	80004d6 <__udivmoddi4+0x52>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	1a9b      	subs	r3, r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	9100      	str	r1, [sp, #0]
 80005da:	9201      	str	r2, [sp, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	40da      	lsrs	r2, r3
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	e786      	b.n	80004f2 <__udivmoddi4+0x6e>
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	002a      	movs	r2, r5
 80005ec:	4646      	mov	r6, r8
 80005ee:	409a      	lsls	r2, r3
 80005f0:	0023      	movs	r3, r4
 80005f2:	40f3      	lsrs	r3, r6
 80005f4:	4644      	mov	r4, r8
 80005f6:	4313      	orrs	r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	40e2      	lsrs	r2, r4
 80005fc:	001c      	movs	r4, r3
 80005fe:	465b      	mov	r3, fp
 8000600:	0015      	movs	r5, r2
 8000602:	2b00      	cmp	r3, #0
 8000604:	dad4      	bge.n	80005b0 <__udivmoddi4+0x12c>
 8000606:	4642      	mov	r2, r8
 8000608:	002f      	movs	r7, r5
 800060a:	2320      	movs	r3, #32
 800060c:	0026      	movs	r6, r4
 800060e:	4097      	lsls	r7, r2
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	40de      	lsrs	r6, r3
 8000614:	003b      	movs	r3, r7
 8000616:	4333      	orrs	r3, r6
 8000618:	e7cd      	b.n	80005b6 <__udivmoddi4+0x132>
 800061a:	46c0      	nop			; (mov r8, r8)

0800061c <__clzdi2>:
 800061c:	b510      	push	{r4, lr}
 800061e:	2900      	cmp	r1, #0
 8000620:	d103      	bne.n	800062a <__clzdi2+0xe>
 8000622:	f000 f807 	bl	8000634 <__clzsi2>
 8000626:	3020      	adds	r0, #32
 8000628:	e002      	b.n	8000630 <__clzdi2+0x14>
 800062a:	1c08      	adds	r0, r1, #0
 800062c:	f000 f802 	bl	8000634 <__clzsi2>
 8000630:	bd10      	pop	{r4, pc}
 8000632:	46c0      	nop			; (mov r8, r8)

08000634 <__clzsi2>:
 8000634:	211c      	movs	r1, #28
 8000636:	2301      	movs	r3, #1
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	4298      	cmp	r0, r3
 800063c:	d301      	bcc.n	8000642 <__clzsi2+0xe>
 800063e:	0c00      	lsrs	r0, r0, #16
 8000640:	3910      	subs	r1, #16
 8000642:	0a1b      	lsrs	r3, r3, #8
 8000644:	4298      	cmp	r0, r3
 8000646:	d301      	bcc.n	800064c <__clzsi2+0x18>
 8000648:	0a00      	lsrs	r0, r0, #8
 800064a:	3908      	subs	r1, #8
 800064c:	091b      	lsrs	r3, r3, #4
 800064e:	4298      	cmp	r0, r3
 8000650:	d301      	bcc.n	8000656 <__clzsi2+0x22>
 8000652:	0900      	lsrs	r0, r0, #4
 8000654:	3904      	subs	r1, #4
 8000656:	a202      	add	r2, pc, #8	; (adr r2, 8000660 <__clzsi2+0x2c>)
 8000658:	5c10      	ldrb	r0, [r2, r0]
 800065a:	1840      	adds	r0, r0, r1
 800065c:	4770      	bx	lr
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	02020304 	.word	0x02020304
 8000664:	01010101 	.word	0x01010101
	...

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b08e      	sub	sp, #56	; 0x38
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fdc9 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f8cd 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 f9f3 	bl	8000a68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000682:	f000 f9c1 	bl	8000a08 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000686:	f000 f94f 	bl	8000928 <MX_I2C1_Init>
  MX_RTC_Init();
 800068a:	f000 f98d 	bl	80009a8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // NOTE: MOVED THE AUTOCONFIGURED MX_RTC_Init(); INTO USER CODE!!!!!!!!!!!!!!!!!!!!!!!

  // when coming from standby
  if (PWR->CSR & PWR_CSR_SBF) {
 800068e:	4b5f      	ldr	r3, [pc, #380]	; (800080c <main+0x19c>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	2202      	movs	r2, #2
 8000694:	4013      	ands	r3, r2
 8000696:	d006      	beq.n	80006a6 <main+0x36>
    // reset the standby flag
    PWR->CR |= PWR_CR_CSBF;
 8000698:	4b5c      	ldr	r3, [pc, #368]	; (800080c <main+0x19c>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b5b      	ldr	r3, [pc, #364]	; (800080c <main+0x19c>)
 800069e:	2108      	movs	r1, #8
 80006a0:	430a      	orrs	r2, r1
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	e001      	b.n	80006aa <main+0x3a>
  } else {
    // coming from flashing (or full reset)
    // HERE IT IS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    MAX_Set_Rtc();
 80006a6:	f000 fa5d 	bl	8000b64 <MAX_Set_Rtc>
  }

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	0159      	lsls	r1, r3, #5
 80006ae:	23a0      	movs	r3, #160	; 0xa0
 80006b0:	05db      	lsls	r3, r3, #23
 80006b2:	2201      	movs	r2, #1
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 f858 	bl	800176a <HAL_GPIO_WritePin>

  MAX_Init3746A();
 80006ba:	f000 fc1b 	bl	8000ef4 <MAX_Init3746A>

  RTC_TimeTypeDef lasttime;
  lasttime.Seconds = 99;
 80006be:	2320      	movs	r3, #32
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	2263      	movs	r2, #99	; 0x63
 80006c4:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;
    HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80006c6:	240c      	movs	r4, #12
 80006c8:	1939      	adds	r1, r7, r4
 80006ca:	4b51      	ldr	r3, [pc, #324]	; (8000810 <main+0x1a0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	0018      	movs	r0, r3
 80006d0:	f002 fc86 	bl	8002fe0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80006d4:	2308      	movs	r3, #8
 80006d6:	18f9      	adds	r1, r7, r3
 80006d8:	4b4d      	ldr	r3, [pc, #308]	; (8000810 <main+0x1a0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	0018      	movs	r0, r3
 80006de:	f002 fd89 	bl	80031f4 <HAL_RTC_GetDate>

    uint8_t data[2];
    data[0] = 0xfe;
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	22fe      	movs	r2, #254	; 0xfe
 80006e6:	701a      	strb	r2, [r3, #0]
    data[1] = 0xc5;
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	22c5      	movs	r2, #197	; 0xc5
 80006ec:	705a      	strb	r2, [r3, #1]
    MAX_I2CSend(data);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	0018      	movs	r0, r3
 80006f2:	f000 fc75 	bl	8000fe0 <MAX_I2CSend>
    data[0] = 0xfd;
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	22fd      	movs	r2, #253	; 0xfd
 80006fa:	701a      	strb	r2, [r3, #0]
    data[1] = 0x00;
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2200      	movs	r2, #0
 8000700:	705a      	strb	r2, [r3, #1]
    MAX_I2CSend(data); // page 0
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	0018      	movs	r0, r3
 8000706:	f000 fc6b 	bl	8000fe0 <MAX_I2CSend>

    if (time.Seconds != lasttime.Seconds) {
 800070a:	193b      	adds	r3, r7, r4
 800070c:	789a      	ldrb	r2, [r3, #2]
 800070e:	2520      	movs	r5, #32
 8000710:	197b      	adds	r3, r7, r5
 8000712:	789b      	ldrb	r3, [r3, #2]
 8000714:	429a      	cmp	r2, r3
 8000716:	d02d      	beq.n	8000774 <main+0x104>
      data[0] = hours[lasttime.Seconds%12];
 8000718:	197b      	adds	r3, r7, r5
 800071a:	789b      	ldrb	r3, [r3, #2]
 800071c:	210c      	movs	r1, #12
 800071e:	0018      	movs	r0, r3
 8000720:	f7ff fd78 	bl	8000214 <__aeabi_uidivmod>
 8000724:	000b      	movs	r3, r1
 8000726:	b2db      	uxtb	r3, r3
 8000728:	001a      	movs	r2, r3
 800072a:	4b3a      	ldr	r3, [pc, #232]	; (8000814 <main+0x1a4>)
 800072c:	5c9a      	ldrb	r2, [r3, r2]
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	701a      	strb	r2, [r3, #0]
      data[1] = 0x00;
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2200      	movs	r2, #0
 8000736:	705a      	strb	r2, [r3, #1]
      MAX_I2CSend(data); // off
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	0018      	movs	r0, r3
 800073c:	f000 fc50 	bl	8000fe0 <MAX_I2CSend>

      lasttime = time;
 8000740:	197b      	adds	r3, r7, r5
 8000742:	193a      	adds	r2, r7, r4
 8000744:	ca23      	ldmia	r2!, {r0, r1, r5}
 8000746:	c323      	stmia	r3!, {r0, r1, r5}
 8000748:	ca03      	ldmia	r2!, {r0, r1}
 800074a:	c303      	stmia	r3!, {r0, r1}

      data[0] = hours[time.Seconds%12];
 800074c:	193b      	adds	r3, r7, r4
 800074e:	789b      	ldrb	r3, [r3, #2]
 8000750:	210c      	movs	r1, #12
 8000752:	0018      	movs	r0, r3
 8000754:	f7ff fd5e 	bl	8000214 <__aeabi_uidivmod>
 8000758:	000b      	movs	r3, r1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	001a      	movs	r2, r3
 800075e:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <main+0x1a4>)
 8000760:	5c9a      	ldrb	r2, [r3, r2]
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	701a      	strb	r2, [r3, #0]
      data[1] = 0x08;
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2208      	movs	r2, #8
 800076a:	705a      	strb	r2, [r3, #1]
      MAX_I2CSend(data); // on
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fc36 	bl	8000fe0 <MAX_I2CSend>
    }

    // if button was released, aka pulled low
    if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) {
 8000774:	23a0      	movs	r3, #160	; 0xa0
 8000776:	05db      	lsls	r3, r3, #23
 8000778:	2102      	movs	r1, #2
 800077a:	0018      	movs	r0, r3
 800077c:	f000 ffd8 	bl	8001730 <HAL_GPIO_ReadPin>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d1a0      	bne.n	80006c6 <main+0x56>

      // all leds off
      data[0] = 0xfe;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	22fe      	movs	r2, #254	; 0xfe
 8000788:	701a      	strb	r2, [r3, #0]
      data[1] = 0xc5;
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	22c5      	movs	r2, #197	; 0xc5
 800078e:	705a      	strb	r2, [r3, #1]
      MAX_I2CSend(data);
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	0018      	movs	r0, r3
 8000794:	f000 fc24 	bl	8000fe0 <MAX_I2CSend>
      data[0] = 0xfd;
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	22fd      	movs	r2, #253	; 0xfd
 800079c:	701a      	strb	r2, [r3, #0]
      data[1] = 0x00;
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	705a      	strb	r2, [r3, #1]
      MAX_I2CSend(data); // page 0
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 fc1a 	bl	8000fe0 <MAX_I2CSend>
      for (int i = 1; i < 73; i++)
 80007ac:	2301      	movs	r3, #1
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
 80007b0:	e00d      	b.n	80007ce <main+0x15e>
      {
        data[0] = i;
 80007b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	701a      	strb	r2, [r3, #0]
        data[1] = 0x00;
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2200      	movs	r2, #0
 80007be:	705a      	strb	r2, [r3, #1]
        MAX_I2CSend(data); // PWM
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	0018      	movs	r0, r3
 80007c4:	f000 fc0c 	bl	8000fe0 <MAX_I2CSend>
      for (int i = 1; i < 73; i++)
 80007c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ca:	3301      	adds	r3, #1
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
 80007ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d0:	2b48      	cmp	r3, #72	; 0x48
 80007d2:	ddee      	ble.n	80007b2 <main+0x142>
      }

      // turn stuff off
      PWR->CSR |= PWR_CSR_EWUP1 | PWR_CSR_EWUP2;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <main+0x19c>)
 80007d6:	685a      	ldr	r2, [r3, #4]
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <main+0x19c>)
 80007da:	21c0      	movs	r1, #192	; 0xc0
 80007dc:	0089      	lsls	r1, r1, #2
 80007de:	430a      	orrs	r2, r1
 80007e0:	605a      	str	r2, [r3, #4]
      PWR->CR |= PWR_CR_CWUF;
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <main+0x19c>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <main+0x19c>)
 80007e8:	2104      	movs	r1, #4
 80007ea:	430a      	orrs	r2, r1
 80007ec:	601a      	str	r2, [r3, #0]
      PWR->CR |= PWR_CR_ULP; // turn off v_refint
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <main+0x19c>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <main+0x19c>)
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	0089      	lsls	r1, r1, #2
 80007f8:	430a      	orrs	r2, r1
 80007fa:	601a      	str	r2, [r3, #0]

      HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	0018      	movs	r0, r3
 8000802:	f001 fb9f 	bl	8001f44 <HAL_PWR_EnableWakeUpPin>

      // goto standby
      HAL_PWR_EnterSTANDBYMode();
 8000806:	f001 fbad 	bl	8001f64 <HAL_PWR_EnterSTANDBYMode>
  {
 800080a:	e75c      	b.n	80006c6 <main+0x56>
 800080c:	40007000 	.word	0x40007000
 8000810:	20000080 	.word	0x20000080
 8000814:	20000000 	.word	0x20000000

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b099      	sub	sp, #100	; 0x64
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	242c      	movs	r4, #44	; 0x2c
 8000820:	193b      	adds	r3, r7, r4
 8000822:	0018      	movs	r0, r3
 8000824:	2334      	movs	r3, #52	; 0x34
 8000826:	001a      	movs	r2, r3
 8000828:	2100      	movs	r1, #0
 800082a:	f003 fa61 	bl	8003cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082e:	2318      	movs	r3, #24
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	0018      	movs	r0, r3
 8000834:	2314      	movs	r3, #20
 8000836:	001a      	movs	r2, r3
 8000838:	2100      	movs	r1, #0
 800083a:	f003 fa59 	bl	8003cf0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800083e:	003b      	movs	r3, r7
 8000840:	0018      	movs	r0, r3
 8000842:	2318      	movs	r3, #24
 8000844:	001a      	movs	r2, r3
 8000846:	2100      	movs	r1, #0
 8000848:	f003 fa52 	bl	8003cf0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	4b33      	ldr	r3, [pc, #204]	; (800091c <SystemClock_Config+0x104>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a33      	ldr	r2, [pc, #204]	; (8000920 <SystemClock_Config+0x108>)
 8000852:	401a      	ands	r2, r3
 8000854:	4b31      	ldr	r3, [pc, #196]	; (800091c <SystemClock_Config+0x104>)
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	0109      	lsls	r1, r1, #4
 800085a:	430a      	orrs	r2, r1
 800085c:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800085e:	f001 fb63 	bl	8001f28 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000862:	4b30      	ldr	r3, [pc, #192]	; (8000924 <SystemClock_Config+0x10c>)
 8000864:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000866:	4b2f      	ldr	r3, [pc, #188]	; (8000924 <SystemClock_Config+0x10c>)
 8000868:	492d      	ldr	r1, [pc, #180]	; (8000920 <SystemClock_Config+0x108>)
 800086a:	400a      	ands	r2, r1
 800086c:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800086e:	193b      	adds	r3, r7, r4
 8000870:	2206      	movs	r2, #6
 8000872:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000874:	193b      	adds	r3, r7, r4
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	0052      	lsls	r2, r2, #1
 800087a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087c:	0021      	movs	r1, r4
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2201      	movs	r2, #1
 8000882:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2210      	movs	r2, #16
 8000888:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2202      	movs	r2, #2
 800088e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	02d2      	lsls	r2, r2, #11
 800089c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2280      	movs	r2, #128	; 0x80
 80008a2:	03d2      	lsls	r2, r2, #15
 80008a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 fb71 	bl	8001f90 <HAL_RCC_OscConfig>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008b2:	f000 fba9 	bl	8001008 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b6:	2118      	movs	r1, #24
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	220f      	movs	r2, #15
 80008bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2203      	movs	r2, #3
 80008c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2101      	movs	r1, #1
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 fed4 	bl	8002688 <HAL_RCC_ClockConfig>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008e4:	f000 fb90 	bl	8001008 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80008e8:	003b      	movs	r3, r7
 80008ea:	222a      	movs	r2, #42	; 0x2a
 80008ec:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008ee:	003b      	movs	r3, r7
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008f4:	003b      	movs	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80008fa:	003b      	movs	r3, r7
 80008fc:	2280      	movs	r2, #128	; 0x80
 80008fe:	0252      	lsls	r2, r2, #9
 8000900:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000902:	003b      	movs	r3, r7
 8000904:	0018      	movs	r0, r3
 8000906:	f002 f8e3 	bl	8002ad0 <HAL_RCCEx_PeriphCLKConfig>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800090e:	f000 fb7b 	bl	8001008 <Error_Handler>
  }
}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	b019      	add	sp, #100	; 0x64
 8000918:	bd90      	pop	{r4, r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	40007000 	.word	0x40007000
 8000920:	ffffe7ff 	.word	0xffffe7ff
 8000924:	40021000 	.word	0x40021000

08000928 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_I2C1_Init+0x74>)
 800092e:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_I2C1_Init+0x74>)
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <MX_I2C1_Init+0x7c>)
 8000936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_I2C1_Init+0x74>)
 8000940:	2201      	movs	r2, #1
 8000942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_I2C1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_I2C1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_I2C1_Init+0x74>)
 8000964:	0018      	movs	r0, r3
 8000966:	f000 ff1d 	bl	80017a4 <HAL_I2C_Init>
 800096a:	1e03      	subs	r3, r0, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800096e:	f000 fb4b 	bl	8001008 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_I2C1_Init+0x74>)
 8000974:	2100      	movs	r1, #0
 8000976:	0018      	movs	r0, r3
 8000978:	f001 fa3e 	bl	8001df8 <HAL_I2CEx_ConfigAnalogFilter>
 800097c:	1e03      	subs	r3, r0, #0
 800097e:	d001      	beq.n	8000984 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000980:	f000 fb42 	bl	8001008 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <MX_I2C1_Init+0x74>)
 8000986:	2100      	movs	r1, #0
 8000988:	0018      	movs	r0, r3
 800098a:	f001 fa81 	bl	8001e90 <HAL_I2CEx_ConfigDigitalFilter>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d001      	beq.n	8000996 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000992:	f000 fb39 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000034 	.word	0x20000034
 80009a0:	40005400 	.word	0x40005400
 80009a4:	00707cbb 	.word	0x00707cbb

080009a8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_RTC_Init+0x54>)
 80009ae:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <MX_RTC_Init+0x58>)
 80009b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_RTC_Init+0x54>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_RTC_Init+0x54>)
 80009ba:	227f      	movs	r2, #127	; 0x7f
 80009bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_RTC_Init+0x54>)
 80009c0:	22ff      	movs	r2, #255	; 0xff
 80009c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <MX_RTC_Init+0x54>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_RTC_Init+0x54>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <MX_RTC_Init+0x54>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_RTC_Init+0x54>)
 80009d8:	2200      	movs	r2, #0
 80009da:	61da      	str	r2, [r3, #28]

  if (!(PWR->CSR & PWR_CSR_SBF)) {
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_RTC_Init+0x5c>)
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2202      	movs	r2, #2
 80009e2:	4013      	ands	r3, r2
 80009e4:	d107      	bne.n	80009f6 <MX_RTC_Init+0x4e>
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <MX_RTC_Init+0x54>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f002 f997 	bl	8002d1c <HAL_RTC_Init>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <MX_RTC_Init+0x4e>
    {
      Error_Handler();
 80009f2:	f000 fb09 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000080 	.word	0x20000080
 8000a00:	40002800 	.word	0x40002800
 8000a04:	40007000 	.word	0x40007000

08000a08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a0e:	4a15      	ldr	r2, [pc, #84]	; (8000a64 <MX_USART2_UART_Init+0x5c>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a14:	22e1      	movs	r2, #225	; 0xe1
 8000a16:	0252      	lsls	r2, r2, #9
 8000a18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f002 fcb5 	bl	80033bc <HAL_UART_Init>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a56:	f000 fad7 	bl	8001008 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200000a4 	.word	0x200000a4
 8000a64:	40004400 	.word	0x40004400

08000a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	240c      	movs	r4, #12
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	0018      	movs	r0, r3
 8000a74:	2314      	movs	r3, #20
 8000a76:	001a      	movs	r2, r3
 8000a78:	2100      	movs	r1, #0
 8000a7a:	f003 f939 	bl	8003cf0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	4b37      	ldr	r3, [pc, #220]	; (8000b5c <MX_GPIO_Init+0xf4>)
 8000a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a82:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <MX_GPIO_Init+0xf4>)
 8000a84:	2104      	movs	r1, #4
 8000a86:	430a      	orrs	r2, r1
 8000a88:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a8a:	4b34      	ldr	r3, [pc, #208]	; (8000b5c <MX_GPIO_Init+0xf4>)
 8000a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8e:	2204      	movs	r2, #4
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	4b31      	ldr	r3, [pc, #196]	; (8000b5c <MX_GPIO_Init+0xf4>)
 8000a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a9a:	4b30      	ldr	r3, [pc, #192]	; (8000b5c <MX_GPIO_Init+0xf4>)
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aa2:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <MX_GPIO_Init+0xf4>)
 8000aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <MX_GPIO_Init+0xf4>)
 8000ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ab2:	4b2a      	ldr	r3, [pc, #168]	; (8000b5c <MX_GPIO_Init+0xf4>)
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <MX_GPIO_Init+0xf4>)
 8000abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abe:	2202      	movs	r2, #2
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ac6:	2380      	movs	r3, #128	; 0x80
 8000ac8:	0159      	lsls	r1, r3, #5
 8000aca:	23a0      	movs	r3, #160	; 0xa0
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	2200      	movs	r2, #0
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 fe4a 	bl	800176a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ad6:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2108      	movs	r1, #8
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 fe44 	bl	800176a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2200      	movs	r2, #0
 8000aec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	193a      	adds	r2, r7, r4
 8000af6:	23a0      	movs	r3, #160	; 0xa0
 8000af8:	05db      	lsls	r3, r3, #23
 8000afa:	0011      	movs	r1, r2
 8000afc:	0018      	movs	r0, r3
 8000afe:	f000 fca9 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b02:	0021      	movs	r1, r4
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	0152      	lsls	r2, r2, #5
 8000b0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0c:	000c      	movs	r4, r1
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2201      	movs	r2, #1
 8000b12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	193a      	adds	r2, r7, r4
 8000b22:	23a0      	movs	r3, #160	; 0xa0
 8000b24:	05db      	lsls	r3, r3, #23
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f000 fc93 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000b2e:	0021      	movs	r1, r4
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2208      	movs	r2, #8
 8000b34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2201      	movs	r2, #1
 8000b3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <MX_GPIO_Init+0xf8>)
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	0010      	movs	r0, r2
 8000b50:	f000 fc80 	bl	8001454 <HAL_GPIO_Init>

}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b009      	add	sp, #36	; 0x24
 8000b5a:	bd90      	pop	{r4, r7, pc}
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	50000400 	.word	0x50000400

08000b64 <MAX_Set_Rtc>:

/* USER CODE BEGIN 4 */
static void MAX_Set_Rtc(void)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b08b      	sub	sp, #44	; 0x2c
 8000b68:	af00      	add	r7, sp, #0
  // with the build_defs.h this sets the rtc to build time
  // it will lag the real time just by a few seconds

  RTC_TimeTypeDef time;
  time.Hours = BUILD_HOUR;
 8000b6a:	2332      	movs	r3, #50	; 0x32
 8000b6c:	2b3f      	cmp	r3, #63	; 0x3f
 8000b6e:	d00d      	beq.n	8000b8c <MAX_Set_Rtc+0x28>
 8000b70:	2332      	movs	r3, #50	; 0x32
 8000b72:	3b30      	subs	r3, #48	; 0x30
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	1c1a      	adds	r2, r3, #0
 8000b78:	0092      	lsls	r2, r2, #2
 8000b7a:	18d3      	adds	r3, r2, r3
 8000b7c:	18db      	adds	r3, r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2232      	movs	r2, #50	; 0x32
 8000b82:	189b      	adds	r3, r3, r2
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	3b30      	subs	r3, #48	; 0x30
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	e000      	b.n	8000b8e <MAX_Set_Rtc+0x2a>
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2308      	movs	r3, #8
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	701a      	strb	r2, [r3, #0]
  time.Minutes = BUILD_MIN;
 8000b94:	2332      	movs	r3, #50	; 0x32
 8000b96:	2b3f      	cmp	r3, #63	; 0x3f
 8000b98:	d00d      	beq.n	8000bb6 <MAX_Set_Rtc+0x52>
 8000b9a:	2334      	movs	r3, #52	; 0x34
 8000b9c:	3b30      	subs	r3, #48	; 0x30
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	1c1a      	adds	r2, r3, #0
 8000ba2:	0092      	lsls	r2, r2, #2
 8000ba4:	18d3      	adds	r3, r2, r3
 8000ba6:	18db      	adds	r3, r3, r3
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	2234      	movs	r2, #52	; 0x34
 8000bac:	189b      	adds	r3, r3, r2
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	3b30      	subs	r3, #48	; 0x30
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	e000      	b.n	8000bb8 <MAX_Set_Rtc+0x54>
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2108      	movs	r1, #8
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	705a      	strb	r2, [r3, #1]
  time.Seconds = 9;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2209      	movs	r2, #9
 8000bc2:	709a      	strb	r2, [r3, #2]
  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000bc4:	1879      	adds	r1, r7, r1
 8000bc6:	4ba7      	ldr	r3, [pc, #668]	; (8000e64 <MAX_Set_Rtc+0x300>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f002 f944 	bl	8002e58 <HAL_RTC_SetTime>

  // same with the date
  RTC_DateTypeDef date;
  date.Year = BUILD_YEAR_SHORT;
 8000bd0:	234a      	movs	r3, #74	; 0x4a
 8000bd2:	2b3f      	cmp	r3, #63	; 0x3f
 8000bd4:	d00d      	beq.n	8000bf2 <MAX_Set_Rtc+0x8e>
 8000bd6:	2332      	movs	r3, #50	; 0x32
 8000bd8:	3b30      	subs	r3, #48	; 0x30
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	1c1a      	adds	r2, r3, #0
 8000bde:	0092      	lsls	r2, r2, #2
 8000be0:	18d3      	adds	r3, r2, r3
 8000be2:	18db      	adds	r3, r3, r3
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2232      	movs	r2, #50	; 0x32
 8000be8:	189b      	adds	r3, r3, r2
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	3b30      	subs	r3, #48	; 0x30
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	e000      	b.n	8000bf4 <MAX_Set_Rtc+0x90>
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	70da      	strb	r2, [r3, #3]
  date.Month = BUILD_MONTH;
 8000bf8:	234a      	movs	r3, #74	; 0x4a
 8000bfa:	2b3f      	cmp	r3, #63	; 0x3f
 8000bfc:	d100      	bne.n	8000c00 <MAX_Set_Rtc+0x9c>
 8000bfe:	e063      	b.n	8000cc8 <MAX_Set_Rtc+0x164>
 8000c00:	234a      	movs	r3, #74	; 0x4a
 8000c02:	2b4a      	cmp	r3, #74	; 0x4a
 8000c04:	d106      	bne.n	8000c14 <MAX_Set_Rtc+0xb0>
 8000c06:	2361      	movs	r3, #97	; 0x61
 8000c08:	2b61      	cmp	r3, #97	; 0x61
 8000c0a:	d103      	bne.n	8000c14 <MAX_Set_Rtc+0xb0>
 8000c0c:	236e      	movs	r3, #110	; 0x6e
 8000c0e:	2b6e      	cmp	r3, #110	; 0x6e
 8000c10:	d100      	bne.n	8000c14 <MAX_Set_Rtc+0xb0>
 8000c12:	e057      	b.n	8000cc4 <MAX_Set_Rtc+0x160>
 8000c14:	234a      	movs	r3, #74	; 0x4a
 8000c16:	2b46      	cmp	r3, #70	; 0x46
 8000c18:	d100      	bne.n	8000c1c <MAX_Set_Rtc+0xb8>
 8000c1a:	e051      	b.n	8000cc0 <MAX_Set_Rtc+0x15c>
 8000c1c:	234a      	movs	r3, #74	; 0x4a
 8000c1e:	2b4d      	cmp	r3, #77	; 0x4d
 8000c20:	d105      	bne.n	8000c2e <MAX_Set_Rtc+0xca>
 8000c22:	2361      	movs	r3, #97	; 0x61
 8000c24:	2b61      	cmp	r3, #97	; 0x61
 8000c26:	d102      	bne.n	8000c2e <MAX_Set_Rtc+0xca>
 8000c28:	236e      	movs	r3, #110	; 0x6e
 8000c2a:	2b72      	cmp	r3, #114	; 0x72
 8000c2c:	d046      	beq.n	8000cbc <MAX_Set_Rtc+0x158>
 8000c2e:	234a      	movs	r3, #74	; 0x4a
 8000c30:	2b41      	cmp	r3, #65	; 0x41
 8000c32:	d102      	bne.n	8000c3a <MAX_Set_Rtc+0xd6>
 8000c34:	2361      	movs	r3, #97	; 0x61
 8000c36:	2b70      	cmp	r3, #112	; 0x70
 8000c38:	d03e      	beq.n	8000cb8 <MAX_Set_Rtc+0x154>
 8000c3a:	234a      	movs	r3, #74	; 0x4a
 8000c3c:	2b4d      	cmp	r3, #77	; 0x4d
 8000c3e:	d105      	bne.n	8000c4c <MAX_Set_Rtc+0xe8>
 8000c40:	2361      	movs	r3, #97	; 0x61
 8000c42:	2b61      	cmp	r3, #97	; 0x61
 8000c44:	d102      	bne.n	8000c4c <MAX_Set_Rtc+0xe8>
 8000c46:	236e      	movs	r3, #110	; 0x6e
 8000c48:	2b79      	cmp	r3, #121	; 0x79
 8000c4a:	d033      	beq.n	8000cb4 <MAX_Set_Rtc+0x150>
 8000c4c:	234a      	movs	r3, #74	; 0x4a
 8000c4e:	2b4a      	cmp	r3, #74	; 0x4a
 8000c50:	d105      	bne.n	8000c5e <MAX_Set_Rtc+0xfa>
 8000c52:	2361      	movs	r3, #97	; 0x61
 8000c54:	2b75      	cmp	r3, #117	; 0x75
 8000c56:	d102      	bne.n	8000c5e <MAX_Set_Rtc+0xfa>
 8000c58:	236e      	movs	r3, #110	; 0x6e
 8000c5a:	2b6e      	cmp	r3, #110	; 0x6e
 8000c5c:	d028      	beq.n	8000cb0 <MAX_Set_Rtc+0x14c>
 8000c5e:	234a      	movs	r3, #74	; 0x4a
 8000c60:	2b4a      	cmp	r3, #74	; 0x4a
 8000c62:	d105      	bne.n	8000c70 <MAX_Set_Rtc+0x10c>
 8000c64:	2361      	movs	r3, #97	; 0x61
 8000c66:	2b75      	cmp	r3, #117	; 0x75
 8000c68:	d102      	bne.n	8000c70 <MAX_Set_Rtc+0x10c>
 8000c6a:	236e      	movs	r3, #110	; 0x6e
 8000c6c:	2b6c      	cmp	r3, #108	; 0x6c
 8000c6e:	d01d      	beq.n	8000cac <MAX_Set_Rtc+0x148>
 8000c70:	234a      	movs	r3, #74	; 0x4a
 8000c72:	2b41      	cmp	r3, #65	; 0x41
 8000c74:	d102      	bne.n	8000c7c <MAX_Set_Rtc+0x118>
 8000c76:	2361      	movs	r3, #97	; 0x61
 8000c78:	2b75      	cmp	r3, #117	; 0x75
 8000c7a:	d015      	beq.n	8000ca8 <MAX_Set_Rtc+0x144>
 8000c7c:	234a      	movs	r3, #74	; 0x4a
 8000c7e:	2b53      	cmp	r3, #83	; 0x53
 8000c80:	d010      	beq.n	8000ca4 <MAX_Set_Rtc+0x140>
 8000c82:	234a      	movs	r3, #74	; 0x4a
 8000c84:	2b4f      	cmp	r3, #79	; 0x4f
 8000c86:	d00b      	beq.n	8000ca0 <MAX_Set_Rtc+0x13c>
 8000c88:	234a      	movs	r3, #74	; 0x4a
 8000c8a:	2b4e      	cmp	r3, #78	; 0x4e
 8000c8c:	d006      	beq.n	8000c9c <MAX_Set_Rtc+0x138>
 8000c8e:	234a      	movs	r3, #74	; 0x4a
 8000c90:	2b44      	cmp	r3, #68	; 0x44
 8000c92:	d101      	bne.n	8000c98 <MAX_Set_Rtc+0x134>
 8000c94:	230c      	movs	r3, #12
 8000c96:	e018      	b.n	8000cca <MAX_Set_Rtc+0x166>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	e016      	b.n	8000cca <MAX_Set_Rtc+0x166>
 8000c9c:	230b      	movs	r3, #11
 8000c9e:	e014      	b.n	8000cca <MAX_Set_Rtc+0x166>
 8000ca0:	230a      	movs	r3, #10
 8000ca2:	e012      	b.n	8000cca <MAX_Set_Rtc+0x166>
 8000ca4:	2309      	movs	r3, #9
 8000ca6:	e010      	b.n	8000cca <MAX_Set_Rtc+0x166>
 8000ca8:	2308      	movs	r3, #8
 8000caa:	e00e      	b.n	8000cca <MAX_Set_Rtc+0x166>
 8000cac:	2307      	movs	r3, #7
 8000cae:	e00c      	b.n	8000cca <MAX_Set_Rtc+0x166>
 8000cb0:	2306      	movs	r3, #6
 8000cb2:	e00a      	b.n	8000cca <MAX_Set_Rtc+0x166>
 8000cb4:	2305      	movs	r3, #5
 8000cb6:	e008      	b.n	8000cca <MAX_Set_Rtc+0x166>
 8000cb8:	2304      	movs	r3, #4
 8000cba:	e006      	b.n	8000cca <MAX_Set_Rtc+0x166>
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e004      	b.n	8000cca <MAX_Set_Rtc+0x166>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	e002      	b.n	8000cca <MAX_Set_Rtc+0x166>
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e000      	b.n	8000cca <MAX_Set_Rtc+0x166>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	1d3a      	adds	r2, r7, #4
 8000ccc:	7053      	strb	r3, [r2, #1]
  date.Date = BUILD_DAY;
 8000cce:	234a      	movs	r3, #74	; 0x4a
 8000cd0:	2b3f      	cmp	r3, #63	; 0x3f
 8000cd2:	d012      	beq.n	8000cfa <MAX_Set_Rtc+0x196>
 8000cd4:	2320      	movs	r3, #32
 8000cd6:	2b2f      	cmp	r3, #47	; 0x2f
 8000cd8:	d908      	bls.n	8000cec <MAX_Set_Rtc+0x188>
 8000cda:	2320      	movs	r3, #32
 8000cdc:	3b30      	subs	r3, #48	; 0x30
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	1c1a      	adds	r2, r3, #0
 8000ce2:	0092      	lsls	r2, r2, #2
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	18db      	adds	r3, r3, r3
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	e000      	b.n	8000cee <MAX_Set_Rtc+0x18a>
 8000cec:	2300      	movs	r3, #0
 8000cee:	2234      	movs	r2, #52	; 0x34
 8000cf0:	189b      	adds	r3, r3, r2
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	3b30      	subs	r3, #48	; 0x30
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	e000      	b.n	8000cfc <MAX_Set_Rtc+0x198>
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	709a      	strb	r2, [r3, #2]
  // the weekday is calculated (meh)
  int year = BUILD_YEAR;
 8000d00:	234a      	movs	r3, #74	; 0x4a
 8000d02:	2b3f      	cmp	r3, #63	; 0x3f
 8000d04:	d01a      	beq.n	8000d3c <MAX_Set_Rtc+0x1d8>
 8000d06:	2332      	movs	r3, #50	; 0x32
 8000d08:	3b30      	subs	r3, #48	; 0x30
 8000d0a:	001a      	movs	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	015b      	lsls	r3, r3, #5
 8000d10:	1a9b      	subs	r3, r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	189b      	adds	r3, r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	0019      	movs	r1, r3
 8000d1a:	2330      	movs	r3, #48	; 0x30
 8000d1c:	3b30      	subs	r3, #48	; 0x30
 8000d1e:	2264      	movs	r2, #100	; 0x64
 8000d20:	4353      	muls	r3, r2
 8000d22:	18c9      	adds	r1, r1, r3
 8000d24:	2332      	movs	r3, #50	; 0x32
 8000d26:	3b30      	subs	r3, #48	; 0x30
 8000d28:	001a      	movs	r2, r3
 8000d2a:	0013      	movs	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	189b      	adds	r3, r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	18ca      	adds	r2, r1, r3
 8000d34:	2332      	movs	r3, #50	; 0x32
 8000d36:	3b30      	subs	r3, #48	; 0x30
 8000d38:	18d3      	adds	r3, r2, r3
 8000d3a:	e000      	b.n	8000d3e <MAX_Set_Rtc+0x1da>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
  int month = BUILD_MONTH;
 8000d40:	234a      	movs	r3, #74	; 0x4a
 8000d42:	2b3f      	cmp	r3, #63	; 0x3f
 8000d44:	d100      	bne.n	8000d48 <MAX_Set_Rtc+0x1e4>
 8000d46:	e069      	b.n	8000e1c <MAX_Set_Rtc+0x2b8>
 8000d48:	234a      	movs	r3, #74	; 0x4a
 8000d4a:	2b4a      	cmp	r3, #74	; 0x4a
 8000d4c:	d106      	bne.n	8000d5c <MAX_Set_Rtc+0x1f8>
 8000d4e:	2361      	movs	r3, #97	; 0x61
 8000d50:	2b61      	cmp	r3, #97	; 0x61
 8000d52:	d103      	bne.n	8000d5c <MAX_Set_Rtc+0x1f8>
 8000d54:	236e      	movs	r3, #110	; 0x6e
 8000d56:	2b6e      	cmp	r3, #110	; 0x6e
 8000d58:	d100      	bne.n	8000d5c <MAX_Set_Rtc+0x1f8>
 8000d5a:	e05d      	b.n	8000e18 <MAX_Set_Rtc+0x2b4>
 8000d5c:	234a      	movs	r3, #74	; 0x4a
 8000d5e:	2b46      	cmp	r3, #70	; 0x46
 8000d60:	d100      	bne.n	8000d64 <MAX_Set_Rtc+0x200>
 8000d62:	e056      	b.n	8000e12 <MAX_Set_Rtc+0x2ae>
 8000d64:	234a      	movs	r3, #74	; 0x4a
 8000d66:	2b4d      	cmp	r3, #77	; 0x4d
 8000d68:	d105      	bne.n	8000d76 <MAX_Set_Rtc+0x212>
 8000d6a:	2361      	movs	r3, #97	; 0x61
 8000d6c:	2b61      	cmp	r3, #97	; 0x61
 8000d6e:	d102      	bne.n	8000d76 <MAX_Set_Rtc+0x212>
 8000d70:	236e      	movs	r3, #110	; 0x6e
 8000d72:	2b72      	cmp	r3, #114	; 0x72
 8000d74:	d04b      	beq.n	8000e0e <MAX_Set_Rtc+0x2aa>
 8000d76:	234a      	movs	r3, #74	; 0x4a
 8000d78:	2b41      	cmp	r3, #65	; 0x41
 8000d7a:	d102      	bne.n	8000d82 <MAX_Set_Rtc+0x21e>
 8000d7c:	2361      	movs	r3, #97	; 0x61
 8000d7e:	2b70      	cmp	r3, #112	; 0x70
 8000d80:	d042      	beq.n	8000e08 <MAX_Set_Rtc+0x2a4>
 8000d82:	234a      	movs	r3, #74	; 0x4a
 8000d84:	2b4d      	cmp	r3, #77	; 0x4d
 8000d86:	d105      	bne.n	8000d94 <MAX_Set_Rtc+0x230>
 8000d88:	2361      	movs	r3, #97	; 0x61
 8000d8a:	2b61      	cmp	r3, #97	; 0x61
 8000d8c:	d102      	bne.n	8000d94 <MAX_Set_Rtc+0x230>
 8000d8e:	236e      	movs	r3, #110	; 0x6e
 8000d90:	2b79      	cmp	r3, #121	; 0x79
 8000d92:	d036      	beq.n	8000e02 <MAX_Set_Rtc+0x29e>
 8000d94:	234a      	movs	r3, #74	; 0x4a
 8000d96:	2b4a      	cmp	r3, #74	; 0x4a
 8000d98:	d105      	bne.n	8000da6 <MAX_Set_Rtc+0x242>
 8000d9a:	2361      	movs	r3, #97	; 0x61
 8000d9c:	2b75      	cmp	r3, #117	; 0x75
 8000d9e:	d102      	bne.n	8000da6 <MAX_Set_Rtc+0x242>
 8000da0:	236e      	movs	r3, #110	; 0x6e
 8000da2:	2b6e      	cmp	r3, #110	; 0x6e
 8000da4:	d02a      	beq.n	8000dfc <MAX_Set_Rtc+0x298>
 8000da6:	234a      	movs	r3, #74	; 0x4a
 8000da8:	2b4a      	cmp	r3, #74	; 0x4a
 8000daa:	d105      	bne.n	8000db8 <MAX_Set_Rtc+0x254>
 8000dac:	2361      	movs	r3, #97	; 0x61
 8000dae:	2b75      	cmp	r3, #117	; 0x75
 8000db0:	d102      	bne.n	8000db8 <MAX_Set_Rtc+0x254>
 8000db2:	236e      	movs	r3, #110	; 0x6e
 8000db4:	2b6c      	cmp	r3, #108	; 0x6c
 8000db6:	d01e      	beq.n	8000df6 <MAX_Set_Rtc+0x292>
 8000db8:	234a      	movs	r3, #74	; 0x4a
 8000dba:	2b41      	cmp	r3, #65	; 0x41
 8000dbc:	d102      	bne.n	8000dc4 <MAX_Set_Rtc+0x260>
 8000dbe:	2361      	movs	r3, #97	; 0x61
 8000dc0:	2b75      	cmp	r3, #117	; 0x75
 8000dc2:	d015      	beq.n	8000df0 <MAX_Set_Rtc+0x28c>
 8000dc4:	234a      	movs	r3, #74	; 0x4a
 8000dc6:	2b53      	cmp	r3, #83	; 0x53
 8000dc8:	d010      	beq.n	8000dec <MAX_Set_Rtc+0x288>
 8000dca:	234a      	movs	r3, #74	; 0x4a
 8000dcc:	2b4f      	cmp	r3, #79	; 0x4f
 8000dce:	d00b      	beq.n	8000de8 <MAX_Set_Rtc+0x284>
 8000dd0:	234a      	movs	r3, #74	; 0x4a
 8000dd2:	2b4e      	cmp	r3, #78	; 0x4e
 8000dd4:	d006      	beq.n	8000de4 <MAX_Set_Rtc+0x280>
 8000dd6:	234a      	movs	r3, #74	; 0x4a
 8000dd8:	2b44      	cmp	r3, #68	; 0x44
 8000dda:	d101      	bne.n	8000de0 <MAX_Set_Rtc+0x27c>
 8000ddc:	230c      	movs	r3, #12
 8000dde:	e009      	b.n	8000df4 <MAX_Set_Rtc+0x290>
 8000de0:	2300      	movs	r3, #0
 8000de2:	e007      	b.n	8000df4 <MAX_Set_Rtc+0x290>
 8000de4:	230b      	movs	r3, #11
 8000de6:	e005      	b.n	8000df4 <MAX_Set_Rtc+0x290>
 8000de8:	230a      	movs	r3, #10
 8000dea:	e003      	b.n	8000df4 <MAX_Set_Rtc+0x290>
 8000dec:	2309      	movs	r3, #9
 8000dee:	e001      	b.n	8000df4 <MAX_Set_Rtc+0x290>
 8000df0:	2308      	movs	r3, #8
 8000df2:	e002      	b.n	8000dfa <MAX_Set_Rtc+0x296>
 8000df4:	e001      	b.n	8000dfa <MAX_Set_Rtc+0x296>
 8000df6:	2307      	movs	r3, #7
 8000df8:	e002      	b.n	8000e00 <MAX_Set_Rtc+0x29c>
 8000dfa:	e001      	b.n	8000e00 <MAX_Set_Rtc+0x29c>
 8000dfc:	2306      	movs	r3, #6
 8000dfe:	e002      	b.n	8000e06 <MAX_Set_Rtc+0x2a2>
 8000e00:	e001      	b.n	8000e06 <MAX_Set_Rtc+0x2a2>
 8000e02:	2305      	movs	r3, #5
 8000e04:	e002      	b.n	8000e0c <MAX_Set_Rtc+0x2a8>
 8000e06:	e001      	b.n	8000e0c <MAX_Set_Rtc+0x2a8>
 8000e08:	2304      	movs	r3, #4
 8000e0a:	e004      	b.n	8000e16 <MAX_Set_Rtc+0x2b2>
 8000e0c:	e003      	b.n	8000e16 <MAX_Set_Rtc+0x2b2>
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e005      	b.n	8000e1e <MAX_Set_Rtc+0x2ba>
 8000e12:	2302      	movs	r3, #2
 8000e14:	e003      	b.n	8000e1e <MAX_Set_Rtc+0x2ba>
 8000e16:	e002      	b.n	8000e1e <MAX_Set_Rtc+0x2ba>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <MAX_Set_Rtc+0x2ba>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  int day = BUILD_DAY;
 8000e20:	234a      	movs	r3, #74	; 0x4a
 8000e22:	2b3f      	cmp	r3, #63	; 0x3f
 8000e24:	d010      	beq.n	8000e48 <MAX_Set_Rtc+0x2e4>
 8000e26:	2320      	movs	r3, #32
 8000e28:	2b2f      	cmp	r3, #47	; 0x2f
 8000e2a:	d908      	bls.n	8000e3e <MAX_Set_Rtc+0x2da>
 8000e2c:	2320      	movs	r3, #32
 8000e2e:	3b30      	subs	r3, #48	; 0x30
 8000e30:	001a      	movs	r2, r3
 8000e32:	0013      	movs	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	189b      	adds	r3, r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	001a      	movs	r2, r3
 8000e3c:	e000      	b.n	8000e40 <MAX_Set_Rtc+0x2dc>
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2334      	movs	r3, #52	; 0x34
 8000e42:	3b30      	subs	r3, #48	; 0x30
 8000e44:	18d3      	adds	r3, r2, r3
 8000e46:	e000      	b.n	8000e4a <MAX_Set_Rtc+0x2e6>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
  if (month < 3) {
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	dc0a      	bgt.n	8000e68 <MAX_Set_Rtc+0x304>
    day = day + year;
 8000e52:	6a3a      	ldr	r2, [r7, #32]
 8000e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e56:	18d3      	adds	r3, r2, r3
 8000e58:	623b      	str	r3, [r7, #32]
    year--;
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e60:	e007      	b.n	8000e72 <MAX_Set_Rtc+0x30e>
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	20000080 	.word	0x20000080
  } else {
    day = day + year - 2;
 8000e68:	6a3a      	ldr	r2, [r7, #32]
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	18d3      	adds	r3, r2, r3
 8000e6e:	3b02      	subs	r3, #2
 8000e70:	623b      	str	r3, [r7, #32]
  }
  date.WeekDay = ((int)(23 * month/9) + day + 4 + (int)(year/4) - (int)(year/100) + (int)(year/400)) % 7;
 8000e72:	69fa      	ldr	r2, [r7, #28]
 8000e74:	0013      	movs	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	189b      	adds	r3, r3, r2
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	1a9b      	subs	r3, r3, r2
 8000e7e:	2109      	movs	r1, #9
 8000e80:	0018      	movs	r0, r3
 8000e82:	f7ff f9cb 	bl	800021c <__divsi3>
 8000e86:	0003      	movs	r3, r0
 8000e88:	001a      	movs	r2, r3
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
 8000e8c:	18d3      	adds	r3, r2, r3
 8000e8e:	1d1a      	adds	r2, r3, #4
 8000e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	da00      	bge.n	8000e98 <MAX_Set_Rtc+0x334>
 8000e96:	3303      	adds	r3, #3
 8000e98:	109b      	asrs	r3, r3, #2
 8000e9a:	18d4      	adds	r4, r2, r3
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	2264      	movs	r2, #100	; 0x64
 8000ea0:	4251      	negs	r1, r2
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	f7ff f9ba 	bl	800021c <__divsi3>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	18e4      	adds	r4, r4, r3
 8000eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eae:	22c8      	movs	r2, #200	; 0xc8
 8000eb0:	0051      	lsls	r1, r2, #1
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f7ff f9b2 	bl	800021c <__divsi3>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	18e3      	adds	r3, r4, r3
 8000ebc:	2107      	movs	r1, #7
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f7ff fa92 	bl	80003e8 <__aeabi_idivmod>
 8000ec4:	000b      	movs	r3, r1
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	701a      	strb	r2, [r3, #0]
  // correct for sunday
  // 1 = monday, 7 = sunday
  if (date.WeekDay == 0) {
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <MAX_Set_Rtc+0x376>
    date.WeekDay = 7;
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2207      	movs	r2, #7
 8000ed8:	701a      	strb	r2, [r3, #0]
  }
  HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000eda:	1d39      	adds	r1, r7, #4
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <MAX_Set_Rtc+0x38c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f002 f8d9 	bl	8003098 <HAL_RTC_SetDate>
}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b00b      	add	sp, #44	; 0x2c
 8000eec:	bd90      	pop	{r4, r7, pc}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	20000080 	.word	0x20000080

08000ef4 <MAX_Init3746A>:

void MAX_Init3746A(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
  uint8_t data[2];

  data[0] = 0xfe;
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	22fe      	movs	r2, #254	; 0xfe
 8000efe:	701a      	strb	r2, [r3, #0]
  data[1] = 0xc5;
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	22c5      	movs	r2, #197	; 0xc5
 8000f04:	705a      	strb	r2, [r3, #1]
  MAX_I2CSend(data);
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f000 f869 	bl	8000fe0 <MAX_I2CSend>
  data[0] = 0xfd;
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	22fd      	movs	r2, #253	; 0xfd
 8000f12:	701a      	strb	r2, [r3, #0]
  data[1] = 0x00;
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	705a      	strb	r2, [r3, #1]
  MAX_I2CSend(data); // page 0
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f000 f85f 	bl	8000fe0 <MAX_I2CSend>
  for (int i = 1; i < 73; i++)
 8000f22:	2301      	movs	r3, #1
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	e00d      	b.n	8000f44 <MAX_Init3746A+0x50>
  {
    data[0] = i;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	701a      	strb	r2, [r3, #0]
    data[1] = 0x00;
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	2200      	movs	r2, #0
 8000f34:	705a      	strb	r2, [r3, #1]
    MAX_I2CSend(data); // PWM
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f000 f851 	bl	8000fe0 <MAX_I2CSend>
  for (int i = 1; i < 73; i++)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	3301      	adds	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2b48      	cmp	r3, #72	; 0x48
 8000f48:	ddee      	ble.n	8000f28 <MAX_Init3746A+0x34>
  }

  data[0] = 0xfe;
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	22fe      	movs	r2, #254	; 0xfe
 8000f4e:	701a      	strb	r2, [r3, #0]
  data[1] = 0xc5;
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	22c5      	movs	r2, #197	; 0xc5
 8000f54:	705a      	strb	r2, [r3, #1]
  MAX_I2CSend(data);
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f000 f841 	bl	8000fe0 <MAX_I2CSend>
  data[0] = 0xfd;
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	22fd      	movs	r2, #253	; 0xfd
 8000f62:	701a      	strb	r2, [r3, #0]
  data[1] = 0x01;
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2201      	movs	r2, #1
 8000f68:	705a      	strb	r2, [r3, #1]
  MAX_I2CSend(data); // page 1
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f000 f837 	bl	8000fe0 <MAX_I2CSend>
  for (int i = 1; i < 73; i++)
 8000f72:	2301      	movs	r3, #1
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	e00d      	b.n	8000f94 <MAX_Init3746A+0xa0>
  {
    data[0] = i;
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	701a      	strb	r2, [r3, #0]
    data[1] = 0xff;
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	22ff      	movs	r2, #255	; 0xff
 8000f84:	705a      	strb	r2, [r3, #1]
    MAX_I2CSend(data); // scaling
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f000 f829 	bl	8000fe0 <MAX_I2CSend>
  for (int i = 1; i < 73; i++)
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	3301      	adds	r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	2b48      	cmp	r3, #72	; 0x48
 8000f98:	ddee      	ble.n	8000f78 <MAX_Init3746A+0x84>
  }

  data[0] = 0x52;
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2252      	movs	r2, #82	; 0x52
 8000f9e:	701a      	strb	r2, [r3, #0]
  data[1] = 0x70;
 8000fa0:	1d3b      	adds	r3, r7, #4
 8000fa2:	2270      	movs	r2, #112	; 0x70
 8000fa4:	705a      	strb	r2, [r3, #1]
  MAX_I2CSend(data);
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f000 f819 	bl	8000fe0 <MAX_I2CSend>
  data[0] = 0x51;
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2251      	movs	r2, #81	; 0x51
 8000fb2:	701a      	strb	r2, [r3, #0]
  data[1] = 0xff;
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	22ff      	movs	r2, #255	; 0xff
 8000fb8:	705a      	strb	r2, [r3, #1]
  MAX_I2CSend(data); // gcc
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f000 f80f 	bl	8000fe0 <MAX_I2CSend>
  data[0] = 0x50;
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2250      	movs	r2, #80	; 0x50
 8000fc6:	701a      	strb	r2, [r3, #0]
  data[1] = 0x01;
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2201      	movs	r2, #1
 8000fcc:	705a      	strb	r2, [r3, #1]
  MAX_I2CSend(data);
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f000 f805 	bl	8000fe0 <MAX_I2CSend>
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	b004      	add	sp, #16
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <MAX_I2CSend>:

void MAX_I2CSend(uint8_t * data)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c1, Addr_GND_GND, data, 2, 0xFFFF);
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <MAX_I2CSend+0x20>)
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <MAX_I2CSend+0x24>)
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	21c0      	movs	r1, #192	; 0xc0
 8000ff4:	f000 fc6c 	bl	80018d0 <HAL_I2C_Master_Transmit>
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b002      	add	sp, #8
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000034 	.word	0x20000034
 8001004:	0000ffff 	.word	0x0000ffff

08001008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800100c:	b672      	cpsid	i
}
 800100e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001010:	e7fe      	b.n	8001010 <Error_Handler+0x8>
	...

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <HAL_MspInit+0x24>)
 800101a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <HAL_MspInit+0x24>)
 800101e:	2101      	movs	r1, #1
 8001020:	430a      	orrs	r2, r1
 8001022:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <HAL_MspInit+0x24>)
 8001026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_MspInit+0x24>)
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	0549      	lsls	r1, r1, #21
 800102e:	430a      	orrs	r2, r1
 8001030:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	240c      	movs	r4, #12
 8001046:	193b      	adds	r3, r7, r4
 8001048:	0018      	movs	r0, r3
 800104a:	2314      	movs	r3, #20
 800104c:	001a      	movs	r2, r3
 800104e:	2100      	movs	r1, #0
 8001050:	f002 fe4e 	bl	8003cf0 <memset>
  if(hi2c->Instance==I2C1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a18      	ldr	r2, [pc, #96]	; (80010bc <HAL_I2C_MspInit+0x80>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d12a      	bne.n	80010b4 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_I2C_MspInit+0x84>)
 8001060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <HAL_I2C_MspInit+0x84>)
 8001064:	2101      	movs	r1, #1
 8001066:	430a      	orrs	r2, r1
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <HAL_I2C_MspInit+0x84>)
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	2201      	movs	r2, #1
 8001070:	4013      	ands	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001076:	193b      	adds	r3, r7, r4
 8001078:	22c0      	movs	r2, #192	; 0xc0
 800107a:	00d2      	lsls	r2, r2, #3
 800107c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107e:	0021      	movs	r1, r4
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2212      	movs	r2, #18
 8001084:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2203      	movs	r2, #3
 8001090:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2201      	movs	r2, #1
 8001096:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	187a      	adds	r2, r7, r1
 800109a:	23a0      	movs	r3, #160	; 0xa0
 800109c:	05db      	lsls	r3, r3, #23
 800109e:	0011      	movs	r1, r2
 80010a0:	0018      	movs	r0, r3
 80010a2:	f000 f9d7 	bl	8001454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_I2C_MspInit+0x84>)
 80010a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <HAL_I2C_MspInit+0x84>)
 80010ac:	2180      	movs	r1, #128	; 0x80
 80010ae:	0389      	lsls	r1, r1, #14
 80010b0:	430a      	orrs	r2, r1
 80010b2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b009      	add	sp, #36	; 0x24
 80010ba:	bd90      	pop	{r4, r7, pc}
 80010bc:	40005400 	.word	0x40005400
 80010c0:	40021000 	.word	0x40021000

080010c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a06      	ldr	r2, [pc, #24]	; (80010ec <HAL_RTC_MspInit+0x28>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d106      	bne.n	80010e4 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_RTC_MspInit+0x2c>)
 80010d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010da:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_RTC_MspInit+0x2c>)
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	02c9      	lsls	r1, r1, #11
 80010e0:	430a      	orrs	r2, r1
 80010e2:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b002      	add	sp, #8
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40002800 	.word	0x40002800
 80010f0:	40021000 	.word	0x40021000

080010f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	240c      	movs	r4, #12
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	0018      	movs	r0, r3
 8001102:	2314      	movs	r3, #20
 8001104:	001a      	movs	r2, r3
 8001106:	2100      	movs	r1, #0
 8001108:	f002 fdf2 	bl	8003cf0 <memset>
  if(huart->Instance==USART2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a18      	ldr	r2, [pc, #96]	; (8001174 <HAL_UART_MspInit+0x80>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d129      	bne.n	800116a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_UART_MspInit+0x84>)
 8001118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_UART_MspInit+0x84>)
 800111c:	2180      	movs	r1, #128	; 0x80
 800111e:	0289      	lsls	r1, r1, #10
 8001120:	430a      	orrs	r2, r1
 8001122:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_UART_MspInit+0x84>)
 8001126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <HAL_UART_MspInit+0x84>)
 800112a:	2101      	movs	r1, #1
 800112c:	430a      	orrs	r2, r1
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_UART_MspInit+0x84>)
 8001132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001134:	2201      	movs	r2, #1
 8001136:	4013      	ands	r3, r2
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800113c:	0021      	movs	r1, r4
 800113e:	187b      	adds	r3, r7, r1
 8001140:	4a0e      	ldr	r2, [pc, #56]	; (800117c <HAL_UART_MspInit+0x88>)
 8001142:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	187b      	adds	r3, r7, r1
 8001146:	2202      	movs	r2, #2
 8001148:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001150:	187b      	adds	r3, r7, r1
 8001152:	2203      	movs	r2, #3
 8001154:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001156:	187b      	adds	r3, r7, r1
 8001158:	2204      	movs	r2, #4
 800115a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	187a      	adds	r2, r7, r1
 800115e:	23a0      	movs	r3, #160	; 0xa0
 8001160:	05db      	lsls	r3, r3, #23
 8001162:	0011      	movs	r1, r2
 8001164:	0018      	movs	r0, r3
 8001166:	f000 f975 	bl	8001454 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b009      	add	sp, #36	; 0x24
 8001170:	bd90      	pop	{r4, r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	40004400 	.word	0x40004400
 8001178:	40021000 	.word	0x40021000
 800117c:	00008004 	.word	0x00008004

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <NMI_Handler+0x4>

08001186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <HardFault_Handler+0x4>

0800118c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 f886 	bl	80012b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80011ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011be:	490e      	ldr	r1, [pc, #56]	; (80011f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c0:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <LoopForever+0xe>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c4:	e002      	b.n	80011cc <LoopCopyDataInit>

080011c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ca:	3304      	adds	r3, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d0:	d3f9      	bcc.n	80011c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d4:	4c0b      	ldr	r4, [pc, #44]	; (8001204 <LoopForever+0x16>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d8:	e001      	b.n	80011de <LoopFillZerobss>

080011da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011dc:	3204      	adds	r2, #4

080011de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e0:	d3fb      	bcc.n	80011da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011e2:	f7ff ffe4 	bl	80011ae <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011e6:	f002 fd5f 	bl	8003ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ea:	f7ff fa41 	bl	8000670 <main>

080011ee <LoopForever>:

LoopForever:
    b LoopForever
 80011ee:	e7fe      	b.n	80011ee <LoopForever>
   ldr   r0, =_estack
 80011f0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80011fc:	08003d94 	.word	0x08003d94
  ldr r2, =_sbss
 8001200:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001204:	2000012c 	.word	0x2000012c

08001208 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC1_COMP_IRQHandler>
	...

0800120c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_Init+0x3c>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_Init+0x3c>)
 800121e:	2140      	movs	r1, #64	; 0x40
 8001220:	430a      	orrs	r2, r1
 8001222:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001224:	2000      	movs	r0, #0
 8001226:	f000 f811 	bl	800124c <HAL_InitTick>
 800122a:	1e03      	subs	r3, r0, #0
 800122c:	d003      	beq.n	8001236 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	e001      	b.n	800123a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001236:	f7ff feed 	bl	8001014 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
}
 800123e:	0018      	movs	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	b002      	add	sp, #8
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	40022000 	.word	0x40022000

0800124c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <HAL_InitTick+0x5c>)
 8001256:	681c      	ldr	r4, [r3, #0]
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <HAL_InitTick+0x60>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	0019      	movs	r1, r3
 800125e:	23fa      	movs	r3, #250	; 0xfa
 8001260:	0098      	lsls	r0, r3, #2
 8001262:	f7fe ff51 	bl	8000108 <__udivsi3>
 8001266:	0003      	movs	r3, r0
 8001268:	0019      	movs	r1, r3
 800126a:	0020      	movs	r0, r4
 800126c:	f7fe ff4c 	bl	8000108 <__udivsi3>
 8001270:	0003      	movs	r3, r0
 8001272:	0018      	movs	r0, r3
 8001274:	f000 f8e1 	bl	800143a <HAL_SYSTICK_Config>
 8001278:	1e03      	subs	r3, r0, #0
 800127a:	d001      	beq.n	8001280 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e00f      	b.n	80012a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b03      	cmp	r3, #3
 8001284:	d80b      	bhi.n	800129e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	2301      	movs	r3, #1
 800128a:	425b      	negs	r3, r3
 800128c:	2200      	movs	r2, #0
 800128e:	0018      	movs	r0, r3
 8001290:	f000 f8be 	bl	8001410 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_InitTick+0x64>)
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	e000      	b.n	80012a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
}
 80012a0:	0018      	movs	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	b003      	add	sp, #12
 80012a6:	bd90      	pop	{r4, r7, pc}
 80012a8:	2000000c 	.word	0x2000000c
 80012ac:	20000014 	.word	0x20000014
 80012b0:	20000010 	.word	0x20000010

080012b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_IncTick+0x1c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	001a      	movs	r2, r3
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <HAL_IncTick+0x20>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	18d2      	adds	r2, r2, r3
 80012c4:	4b03      	ldr	r3, [pc, #12]	; (80012d4 <HAL_IncTick+0x20>)
 80012c6:	601a      	str	r2, [r3, #0]
}
 80012c8:	46c0      	nop			; (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	20000014 	.word	0x20000014
 80012d4:	20000128 	.word	0x20000128

080012d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  return uwTick;
 80012dc:	4b02      	ldr	r3, [pc, #8]	; (80012e8 <HAL_GetTick+0x10>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	0018      	movs	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	20000128 	.word	0x20000128

080012ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ec:	b590      	push	{r4, r7, lr}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	0002      	movs	r2, r0
 80012f4:	6039      	str	r1, [r7, #0]
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001300:	d828      	bhi.n	8001354 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001302:	4a2f      	ldr	r2, [pc, #188]	; (80013c0 <__NVIC_SetPriority+0xd4>)
 8001304:	1dfb      	adds	r3, r7, #7
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b25b      	sxtb	r3, r3
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	33c0      	adds	r3, #192	; 0xc0
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	589b      	ldr	r3, [r3, r2]
 8001312:	1dfa      	adds	r2, r7, #7
 8001314:	7812      	ldrb	r2, [r2, #0]
 8001316:	0011      	movs	r1, r2
 8001318:	2203      	movs	r2, #3
 800131a:	400a      	ands	r2, r1
 800131c:	00d2      	lsls	r2, r2, #3
 800131e:	21ff      	movs	r1, #255	; 0xff
 8001320:	4091      	lsls	r1, r2
 8001322:	000a      	movs	r2, r1
 8001324:	43d2      	mvns	r2, r2
 8001326:	401a      	ands	r2, r3
 8001328:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	019b      	lsls	r3, r3, #6
 800132e:	22ff      	movs	r2, #255	; 0xff
 8001330:	401a      	ands	r2, r3
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	0018      	movs	r0, r3
 8001338:	2303      	movs	r3, #3
 800133a:	4003      	ands	r3, r0
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001340:	481f      	ldr	r0, [pc, #124]	; (80013c0 <__NVIC_SetPriority+0xd4>)
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	b25b      	sxtb	r3, r3
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	430a      	orrs	r2, r1
 800134c:	33c0      	adds	r3, #192	; 0xc0
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001352:	e031      	b.n	80013b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <__NVIC_SetPriority+0xd8>)
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	0019      	movs	r1, r3
 800135c:	230f      	movs	r3, #15
 800135e:	400b      	ands	r3, r1
 8001360:	3b08      	subs	r3, #8
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3306      	adds	r3, #6
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	18d3      	adds	r3, r2, r3
 800136a:	3304      	adds	r3, #4
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	1dfa      	adds	r2, r7, #7
 8001370:	7812      	ldrb	r2, [r2, #0]
 8001372:	0011      	movs	r1, r2
 8001374:	2203      	movs	r2, #3
 8001376:	400a      	ands	r2, r1
 8001378:	00d2      	lsls	r2, r2, #3
 800137a:	21ff      	movs	r1, #255	; 0xff
 800137c:	4091      	lsls	r1, r2
 800137e:	000a      	movs	r2, r1
 8001380:	43d2      	mvns	r2, r2
 8001382:	401a      	ands	r2, r3
 8001384:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	019b      	lsls	r3, r3, #6
 800138a:	22ff      	movs	r2, #255	; 0xff
 800138c:	401a      	ands	r2, r3
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	0018      	movs	r0, r3
 8001394:	2303      	movs	r3, #3
 8001396:	4003      	ands	r3, r0
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800139c:	4809      	ldr	r0, [pc, #36]	; (80013c4 <__NVIC_SetPriority+0xd8>)
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	001c      	movs	r4, r3
 80013a4:	230f      	movs	r3, #15
 80013a6:	4023      	ands	r3, r4
 80013a8:	3b08      	subs	r3, #8
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	430a      	orrs	r2, r1
 80013ae:	3306      	adds	r3, #6
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	18c3      	adds	r3, r0, r3
 80013b4:	3304      	adds	r3, #4
 80013b6:	601a      	str	r2, [r3, #0]
}
 80013b8:	46c0      	nop			; (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b003      	add	sp, #12
 80013be:	bd90      	pop	{r4, r7, pc}
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	1e5a      	subs	r2, r3, #1
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	045b      	lsls	r3, r3, #17
 80013d8:	429a      	cmp	r2, r3
 80013da:	d301      	bcc.n	80013e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013dc:	2301      	movs	r3, #1
 80013de:	e010      	b.n	8001402 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <SysTick_Config+0x44>)
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	3a01      	subs	r2, #1
 80013e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013e8:	2301      	movs	r3, #1
 80013ea:	425b      	negs	r3, r3
 80013ec:	2103      	movs	r1, #3
 80013ee:	0018      	movs	r0, r3
 80013f0:	f7ff ff7c 	bl	80012ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <SysTick_Config+0x44>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <SysTick_Config+0x44>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001400:	2300      	movs	r3, #0
}
 8001402:	0018      	movs	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	b002      	add	sp, #8
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	e000e010 	.word	0xe000e010

08001410 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	210f      	movs	r1, #15
 800141c:	187b      	adds	r3, r7, r1
 800141e:	1c02      	adds	r2, r0, #0
 8001420:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	187b      	adds	r3, r7, r1
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b25b      	sxtb	r3, r3
 800142a:	0011      	movs	r1, r2
 800142c:	0018      	movs	r0, r3
 800142e:	f7ff ff5d 	bl	80012ec <__NVIC_SetPriority>
}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	46bd      	mov	sp, r7
 8001436:	b004      	add	sp, #16
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff ffbf 	bl	80013c8 <SysTick_Config>
 800144a:	0003      	movs	r3, r0
}
 800144c:	0018      	movs	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	b002      	add	sp, #8
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800146a:	e149      	b.n	8001700 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2101      	movs	r1, #1
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	4091      	lsls	r1, r2
 8001476:	000a      	movs	r2, r1
 8001478:	4013      	ands	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d100      	bne.n	8001484 <HAL_GPIO_Init+0x30>
 8001482:	e13a      	b.n	80016fa <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2203      	movs	r2, #3
 800148a:	4013      	ands	r3, r2
 800148c:	2b01      	cmp	r3, #1
 800148e:	d005      	beq.n	800149c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2203      	movs	r2, #3
 8001496:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001498:	2b02      	cmp	r3, #2
 800149a:	d130      	bne.n	80014fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	409a      	lsls	r2, r3
 80014aa:	0013      	movs	r3, r2
 80014ac:	43da      	mvns	r2, r3
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	409a      	lsls	r2, r3
 80014be:	0013      	movs	r3, r2
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d2:	2201      	movs	r2, #1
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
 80014d8:	0013      	movs	r3, r2
 80014da:	43da      	mvns	r2, r3
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	2201      	movs	r2, #1
 80014ea:	401a      	ands	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	409a      	lsls	r2, r3
 80014f0:	0013      	movs	r3, r2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2203      	movs	r2, #3
 8001504:	4013      	ands	r3, r2
 8001506:	2b03      	cmp	r3, #3
 8001508:	d017      	beq.n	800153a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	409a      	lsls	r2, r3
 8001518:	0013      	movs	r3, r2
 800151a:	43da      	mvns	r2, r3
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	409a      	lsls	r2, r3
 800152c:	0013      	movs	r3, r2
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2203      	movs	r2, #3
 8001540:	4013      	ands	r3, r2
 8001542:	2b02      	cmp	r3, #2
 8001544:	d123      	bne.n	800158e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	08da      	lsrs	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3208      	adds	r2, #8
 800154e:	0092      	lsls	r2, r2, #2
 8001550:	58d3      	ldr	r3, [r2, r3]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	2207      	movs	r2, #7
 8001558:	4013      	ands	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	220f      	movs	r2, #15
 800155e:	409a      	lsls	r2, r3
 8001560:	0013      	movs	r3, r2
 8001562:	43da      	mvns	r2, r3
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	2107      	movs	r1, #7
 8001572:	400b      	ands	r3, r1
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	409a      	lsls	r2, r3
 8001578:	0013      	movs	r3, r2
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	08da      	lsrs	r2, r3, #3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3208      	adds	r2, #8
 8001588:	0092      	lsls	r2, r2, #2
 800158a:	6939      	ldr	r1, [r7, #16]
 800158c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	2203      	movs	r2, #3
 800159a:	409a      	lsls	r2, r3
 800159c:	0013      	movs	r3, r2
 800159e:	43da      	mvns	r2, r3
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2203      	movs	r2, #3
 80015ac:	401a      	ands	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	409a      	lsls	r2, r3
 80015b4:	0013      	movs	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	23c0      	movs	r3, #192	; 0xc0
 80015c8:	029b      	lsls	r3, r3, #10
 80015ca:	4013      	ands	r3, r2
 80015cc:	d100      	bne.n	80015d0 <HAL_GPIO_Init+0x17c>
 80015ce:	e094      	b.n	80016fa <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d0:	4b51      	ldr	r3, [pc, #324]	; (8001718 <HAL_GPIO_Init+0x2c4>)
 80015d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015d4:	4b50      	ldr	r3, [pc, #320]	; (8001718 <HAL_GPIO_Init+0x2c4>)
 80015d6:	2101      	movs	r1, #1
 80015d8:	430a      	orrs	r2, r1
 80015da:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80015dc:	4a4f      	ldr	r2, [pc, #316]	; (800171c <HAL_GPIO_Init+0x2c8>)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3302      	adds	r3, #2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	589b      	ldr	r3, [r3, r2]
 80015e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2203      	movs	r2, #3
 80015ee:	4013      	ands	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	409a      	lsls	r2, r3
 80015f6:	0013      	movs	r3, r2
 80015f8:	43da      	mvns	r2, r3
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	23a0      	movs	r3, #160	; 0xa0
 8001604:	05db      	lsls	r3, r3, #23
 8001606:	429a      	cmp	r2, r3
 8001608:	d013      	beq.n	8001632 <HAL_GPIO_Init+0x1de>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a44      	ldr	r2, [pc, #272]	; (8001720 <HAL_GPIO_Init+0x2cc>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00d      	beq.n	800162e <HAL_GPIO_Init+0x1da>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a43      	ldr	r2, [pc, #268]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d007      	beq.n	800162a <HAL_GPIO_Init+0x1d6>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a42      	ldr	r2, [pc, #264]	; (8001728 <HAL_GPIO_Init+0x2d4>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d101      	bne.n	8001626 <HAL_GPIO_Init+0x1d2>
 8001622:	2305      	movs	r3, #5
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x1e0>
 8001626:	2306      	movs	r3, #6
 8001628:	e004      	b.n	8001634 <HAL_GPIO_Init+0x1e0>
 800162a:	2302      	movs	r3, #2
 800162c:	e002      	b.n	8001634 <HAL_GPIO_Init+0x1e0>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <HAL_GPIO_Init+0x1e0>
 8001632:	2300      	movs	r3, #0
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	2103      	movs	r1, #3
 8001638:	400a      	ands	r2, r1
 800163a:	0092      	lsls	r2, r2, #2
 800163c:	4093      	lsls	r3, r2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001644:	4935      	ldr	r1, [pc, #212]	; (800171c <HAL_GPIO_Init+0x2c8>)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	3302      	adds	r3, #2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001652:	4b36      	ldr	r3, [pc, #216]	; (800172c <HAL_GPIO_Init+0x2d8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	43da      	mvns	r2, r3
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	025b      	lsls	r3, r3, #9
 800166a:	4013      	ands	r3, r2
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001676:	4b2d      	ldr	r3, [pc, #180]	; (800172c <HAL_GPIO_Init+0x2d8>)
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800167c:	4b2b      	ldr	r3, [pc, #172]	; (800172c <HAL_GPIO_Init+0x2d8>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	43da      	mvns	r2, r3
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	029b      	lsls	r3, r3, #10
 8001694:	4013      	ands	r3, r2
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <HAL_GPIO_Init+0x2d8>)
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_GPIO_Init+0x2d8>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	43da      	mvns	r2, r3
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	2380      	movs	r3, #128	; 0x80
 80016bc:	035b      	lsls	r3, r3, #13
 80016be:	4013      	ands	r3, r2
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <HAL_GPIO_Init+0x2d8>)
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <HAL_GPIO_Init+0x2d8>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43da      	mvns	r2, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	039b      	lsls	r3, r3, #14
 80016e8:	4013      	ands	r3, r2
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016f4:	4b0d      	ldr	r3, [pc, #52]	; (800172c <HAL_GPIO_Init+0x2d8>)
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	40da      	lsrs	r2, r3
 8001708:	1e13      	subs	r3, r2, #0
 800170a:	d000      	beq.n	800170e <HAL_GPIO_Init+0x2ba>
 800170c:	e6ae      	b.n	800146c <HAL_GPIO_Init+0x18>
  }
}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46c0      	nop			; (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	b006      	add	sp, #24
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	50000400 	.word	0x50000400
 8001724:	50000800 	.word	0x50000800
 8001728:	50001c00 	.word	0x50001c00
 800172c:	40010400 	.word	0x40010400

08001730 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	000a      	movs	r2, r1
 800173a:	1cbb      	adds	r3, r7, #2
 800173c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	1cba      	adds	r2, r7, #2
 8001744:	8812      	ldrh	r2, [r2, #0]
 8001746:	4013      	ands	r3, r2
 8001748:	d004      	beq.n	8001754 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800174a:	230f      	movs	r3, #15
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	2201      	movs	r2, #1
 8001750:	701a      	strb	r2, [r3, #0]
 8001752:	e003      	b.n	800175c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001754:	230f      	movs	r3, #15
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800175c:	230f      	movs	r3, #15
 800175e:	18fb      	adds	r3, r7, r3
 8001760:	781b      	ldrb	r3, [r3, #0]
}
 8001762:	0018      	movs	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	b004      	add	sp, #16
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	0008      	movs	r0, r1
 8001774:	0011      	movs	r1, r2
 8001776:	1cbb      	adds	r3, r7, #2
 8001778:	1c02      	adds	r2, r0, #0
 800177a:	801a      	strh	r2, [r3, #0]
 800177c:	1c7b      	adds	r3, r7, #1
 800177e:	1c0a      	adds	r2, r1, #0
 8001780:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001782:	1c7b      	adds	r3, r7, #1
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d004      	beq.n	8001794 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178a:	1cbb      	adds	r3, r7, #2
 800178c:	881a      	ldrh	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001792:	e003      	b.n	800179c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001794:	1cbb      	adds	r3, r7, #2
 8001796:	881a      	ldrh	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	46bd      	mov	sp, r7
 80017a0:	b002      	add	sp, #8
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e082      	b.n	80018bc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2241      	movs	r2, #65	; 0x41
 80017ba:	5c9b      	ldrb	r3, [r3, r2]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d107      	bne.n	80017d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2240      	movs	r2, #64	; 0x40
 80017c6:	2100      	movs	r1, #0
 80017c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f7ff fc35 	bl	800103c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2241      	movs	r2, #65	; 0x41
 80017d6:	2124      	movs	r1, #36	; 0x24
 80017d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2101      	movs	r1, #1
 80017e6:	438a      	bics	r2, r1
 80017e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4934      	ldr	r1, [pc, #208]	; (80018c4 <HAL_I2C_Init+0x120>)
 80017f4:	400a      	ands	r2, r1
 80017f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4931      	ldr	r1, [pc, #196]	; (80018c8 <HAL_I2C_Init+0x124>)
 8001804:	400a      	ands	r2, r1
 8001806:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d108      	bne.n	8001822 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2180      	movs	r1, #128	; 0x80
 800181a:	0209      	lsls	r1, r1, #8
 800181c:	430a      	orrs	r2, r1
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	e007      	b.n	8001832 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2184      	movs	r1, #132	; 0x84
 800182c:	0209      	lsls	r1, r1, #8
 800182e:	430a      	orrs	r2, r1
 8001830:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d104      	bne.n	8001844 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	491f      	ldr	r1, [pc, #124]	; (80018cc <HAL_I2C_Init+0x128>)
 8001850:	430a      	orrs	r2, r1
 8001852:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	491a      	ldr	r1, [pc, #104]	; (80018c8 <HAL_I2C_Init+0x124>)
 8001860:	400a      	ands	r2, r1
 8001862:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691a      	ldr	r2, [r3, #16]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	431a      	orrs	r2, r3
 800186e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69d9      	ldr	r1, [r3, #28]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1a      	ldr	r2, [r3, #32]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2101      	movs	r1, #1
 800189a:	430a      	orrs	r2, r1
 800189c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2241      	movs	r2, #65	; 0x41
 80018a8:	2120      	movs	r1, #32
 80018aa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2242      	movs	r2, #66	; 0x42
 80018b6:	2100      	movs	r1, #0
 80018b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	0018      	movs	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	b002      	add	sp, #8
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	f0ffffff 	.word	0xf0ffffff
 80018c8:	ffff7fff 	.word	0xffff7fff
 80018cc:	02008000 	.word	0x02008000

080018d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af02      	add	r7, sp, #8
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	0008      	movs	r0, r1
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	0019      	movs	r1, r3
 80018de:	230a      	movs	r3, #10
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	1c02      	adds	r2, r0, #0
 80018e4:	801a      	strh	r2, [r3, #0]
 80018e6:	2308      	movs	r3, #8
 80018e8:	18fb      	adds	r3, r7, r3
 80018ea:	1c0a      	adds	r2, r1, #0
 80018ec:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2241      	movs	r2, #65	; 0x41
 80018f2:	5c9b      	ldrb	r3, [r3, r2]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b20      	cmp	r3, #32
 80018f8:	d000      	beq.n	80018fc <HAL_I2C_Master_Transmit+0x2c>
 80018fa:	e0e7      	b.n	8001acc <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2240      	movs	r2, #64	; 0x40
 8001900:	5c9b      	ldrb	r3, [r3, r2]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d101      	bne.n	800190a <HAL_I2C_Master_Transmit+0x3a>
 8001906:	2302      	movs	r3, #2
 8001908:	e0e1      	b.n	8001ace <HAL_I2C_Master_Transmit+0x1fe>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2240      	movs	r2, #64	; 0x40
 800190e:	2101      	movs	r1, #1
 8001910:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001912:	f7ff fce1 	bl	80012d8 <HAL_GetTick>
 8001916:	0003      	movs	r3, r0
 8001918:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	0219      	lsls	r1, r3, #8
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2319      	movs	r3, #25
 8001926:	2201      	movs	r2, #1
 8001928:	f000 f8fc 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 800192c:	1e03      	subs	r3, r0, #0
 800192e:	d001      	beq.n	8001934 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e0cc      	b.n	8001ace <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2241      	movs	r2, #65	; 0x41
 8001938:	2121      	movs	r1, #33	; 0x21
 800193a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2242      	movs	r2, #66	; 0x42
 8001940:	2110      	movs	r1, #16
 8001942:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2208      	movs	r2, #8
 8001954:	18ba      	adds	r2, r7, r2
 8001956:	8812      	ldrh	r2, [r2, #0]
 8001958:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001964:	b29b      	uxth	r3, r3
 8001966:	2bff      	cmp	r3, #255	; 0xff
 8001968:	d911      	bls.n	800198e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	22ff      	movs	r2, #255	; 0xff
 800196e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001974:	b2da      	uxtb	r2, r3
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	045c      	lsls	r4, r3, #17
 800197a:	230a      	movs	r3, #10
 800197c:	18fb      	adds	r3, r7, r3
 800197e:	8819      	ldrh	r1, [r3, #0]
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	4b55      	ldr	r3, [pc, #340]	; (8001ad8 <HAL_I2C_Master_Transmit+0x208>)
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	0023      	movs	r3, r4
 8001988:	f000 fa00 	bl	8001d8c <I2C_TransferConfig>
 800198c:	e075      	b.n	8001a7a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001992:	b29a      	uxth	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199c:	b2da      	uxtb	r2, r3
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	049c      	lsls	r4, r3, #18
 80019a2:	230a      	movs	r3, #10
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	8819      	ldrh	r1, [r3, #0]
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	4b4b      	ldr	r3, [pc, #300]	; (8001ad8 <HAL_I2C_Master_Transmit+0x208>)
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	0023      	movs	r3, r4
 80019b0:	f000 f9ec 	bl	8001d8c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80019b4:	e061      	b.n	8001a7a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	0018      	movs	r0, r3
 80019be:	f000 f8f0 	bl	8001ba2 <I2C_WaitOnTXISFlagUntilTimeout>
 80019c2:	1e03      	subs	r3, r0, #0
 80019c4:	d001      	beq.n	80019ca <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e081      	b.n	8001ace <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	781a      	ldrb	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d03a      	beq.n	8001a7a <HAL_I2C_Master_Transmit+0x1aa>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d136      	bne.n	8001a7a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	0013      	movs	r3, r2
 8001a16:	2200      	movs	r2, #0
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	f000 f883 	bl	8001b24 <I2C_WaitOnFlagUntilTimeout>
 8001a1e:	1e03      	subs	r3, r0, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e053      	b.n	8001ace <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	2bff      	cmp	r3, #255	; 0xff
 8001a2e:	d911      	bls.n	8001a54 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	22ff      	movs	r2, #255	; 0xff
 8001a34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	045c      	lsls	r4, r3, #17
 8001a40:	230a      	movs	r3, #10
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	8819      	ldrh	r1, [r3, #0]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	0023      	movs	r3, r4
 8001a4e:	f000 f99d 	bl	8001d8c <I2C_TransferConfig>
 8001a52:	e012      	b.n	8001a7a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	2380      	movs	r3, #128	; 0x80
 8001a66:	049c      	lsls	r4, r3, #18
 8001a68:	230a      	movs	r3, #10
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	8819      	ldrh	r1, [r3, #0]
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	2300      	movs	r3, #0
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	0023      	movs	r3, r4
 8001a76:	f000 f989 	bl	8001d8c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d198      	bne.n	80019b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f000 f8c8 	bl	8001c20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a90:	1e03      	subs	r3, r0, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e01a      	b.n	8001ace <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	490c      	ldr	r1, [pc, #48]	; (8001adc <HAL_I2C_Master_Transmit+0x20c>)
 8001aac:	400a      	ands	r2, r1
 8001aae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2241      	movs	r2, #65	; 0x41
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2242      	movs	r2, #66	; 0x42
 8001abc:	2100      	movs	r1, #0
 8001abe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2240      	movs	r2, #64	; 0x40
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e000      	b.n	8001ace <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001acc:	2302      	movs	r3, #2
  }
}
 8001ace:	0018      	movs	r0, r3
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	b007      	add	sp, #28
 8001ad4:	bd90      	pop	{r4, r7, pc}
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	80002000 	.word	0x80002000
 8001adc:	fe00e800 	.word	0xfe00e800

08001ae0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2202      	movs	r2, #2
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d103      	bne.n	8001afe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2200      	movs	r2, #0
 8001afc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	2201      	movs	r2, #1
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d007      	beq.n	8001b1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	699a      	ldr	r2, [r3, #24]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2101      	movs	r1, #1
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	619a      	str	r2, [r3, #24]
  }
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b002      	add	sp, #8
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	1dfb      	adds	r3, r7, #7
 8001b32:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b34:	e021      	b.n	8001b7a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	d01e      	beq.n	8001b7a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3c:	f7ff fbcc 	bl	80012d8 <HAL_GetTick>
 8001b40:	0002      	movs	r2, r0
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d302      	bcc.n	8001b52 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d113      	bne.n	8001b7a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	2220      	movs	r2, #32
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2241      	movs	r2, #65	; 0x41
 8001b62:	2120      	movs	r1, #32
 8001b64:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2242      	movs	r2, #66	; 0x42
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2240      	movs	r2, #64	; 0x40
 8001b72:	2100      	movs	r1, #0
 8001b74:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e00f      	b.n	8001b9a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	4013      	ands	r3, r2
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	425a      	negs	r2, r3
 8001b8a:	4153      	adcs	r3, r2
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	001a      	movs	r2, r3
 8001b90:	1dfb      	adds	r3, r7, #7
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d0ce      	beq.n	8001b36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	b004      	add	sp, #16
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bae:	e02b      	b.n	8001c08 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	68b9      	ldr	r1, [r7, #8]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f000 f86e 	bl	8001c98 <I2C_IsAcknowledgeFailed>
 8001bbc:	1e03      	subs	r3, r0, #0
 8001bbe:	d001      	beq.n	8001bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e029      	b.n	8001c18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	d01e      	beq.n	8001c08 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bca:	f7ff fb85 	bl	80012d8 <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d302      	bcc.n	8001be0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d113      	bne.n	8001c08 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be4:	2220      	movs	r2, #32
 8001be6:	431a      	orrs	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2241      	movs	r2, #65	; 0x41
 8001bf0:	2120      	movs	r1, #32
 8001bf2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2242      	movs	r2, #66	; 0x42
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2240      	movs	r2, #64	; 0x40
 8001c00:	2100      	movs	r1, #0
 8001c02:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e007      	b.n	8001c18 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d1cc      	bne.n	8001bb0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b004      	add	sp, #16
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c2c:	e028      	b.n	8001c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68b9      	ldr	r1, [r7, #8]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	0018      	movs	r0, r3
 8001c36:	f000 f82f 	bl	8001c98 <I2C_IsAcknowledgeFailed>
 8001c3a:	1e03      	subs	r3, r0, #0
 8001c3c:	d001      	beq.n	8001c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e026      	b.n	8001c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c42:	f7ff fb49 	bl	80012d8 <HAL_GetTick>
 8001c46:	0002      	movs	r2, r0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d302      	bcc.n	8001c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d113      	bne.n	8001c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2241      	movs	r2, #65	; 0x41
 8001c68:	2120      	movs	r1, #32
 8001c6a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2242      	movs	r2, #66	; 0x42
 8001c70:	2100      	movs	r1, #0
 8001c72:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2240      	movs	r2, #64	; 0x40
 8001c78:	2100      	movs	r1, #0
 8001c7a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e007      	b.n	8001c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2220      	movs	r2, #32
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b20      	cmp	r3, #32
 8001c8c:	d1cf      	bne.n	8001c2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b004      	add	sp, #16
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2210      	movs	r2, #16
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b10      	cmp	r3, #16
 8001cb0:	d164      	bne.n	8001d7c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	049b      	lsls	r3, r3, #18
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	049b      	lsls	r3, r3, #18
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d02b      	beq.n	8001d1e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2180      	movs	r1, #128	; 0x80
 8001cd2:	01c9      	lsls	r1, r1, #7
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cd8:	e021      	b.n	8001d1e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	d01e      	beq.n	8001d1e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ce0:	f7ff fafa 	bl	80012d8 <HAL_GetTick>
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d302      	bcc.n	8001cf6 <I2C_IsAcknowledgeFailed+0x5e>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d113      	bne.n	8001d1e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2241      	movs	r2, #65	; 0x41
 8001d06:	2120      	movs	r1, #32
 8001d08:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2242      	movs	r2, #66	; 0x42
 8001d0e:	2100      	movs	r1, #0
 8001d10:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2240      	movs	r2, #64	; 0x40
 8001d16:	2100      	movs	r1, #0
 8001d18:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e02f      	b.n	8001d7e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	2220      	movs	r2, #32
 8001d26:	4013      	ands	r3, r2
 8001d28:	2b20      	cmp	r3, #32
 8001d2a:	d1d6      	bne.n	8001cda <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2210      	movs	r2, #16
 8001d32:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f7ff fece 	bl	8001ae0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	490e      	ldr	r1, [pc, #56]	; (8001d88 <I2C_IsAcknowledgeFailed+0xf0>)
 8001d50:	400a      	ands	r2, r1
 8001d52:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d58:	2204      	movs	r2, #4
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2241      	movs	r2, #65	; 0x41
 8001d64:	2120      	movs	r1, #32
 8001d66:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2242      	movs	r2, #66	; 0x42
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2240      	movs	r2, #64	; 0x40
 8001d74:	2100      	movs	r1, #0
 8001d76:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b004      	add	sp, #16
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	fe00e800 	.word	0xfe00e800

08001d8c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	0008      	movs	r0, r1
 8001d96:	0011      	movs	r1, r2
 8001d98:	607b      	str	r3, [r7, #4]
 8001d9a:	240a      	movs	r4, #10
 8001d9c:	193b      	adds	r3, r7, r4
 8001d9e:	1c02      	adds	r2, r0, #0
 8001da0:	801a      	strh	r2, [r3, #0]
 8001da2:	2009      	movs	r0, #9
 8001da4:	183b      	adds	r3, r7, r0
 8001da6:	1c0a      	adds	r2, r1, #0
 8001da8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	6a3a      	ldr	r2, [r7, #32]
 8001db2:	0d51      	lsrs	r1, r2, #21
 8001db4:	2280      	movs	r2, #128	; 0x80
 8001db6:	00d2      	lsls	r2, r2, #3
 8001db8:	400a      	ands	r2, r1
 8001dba:	490e      	ldr	r1, [pc, #56]	; (8001df4 <I2C_TransferConfig+0x68>)
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	43d2      	mvns	r2, r2
 8001dc0:	401a      	ands	r2, r3
 8001dc2:	0011      	movs	r1, r2
 8001dc4:	193b      	adds	r3, r7, r4
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	059b      	lsls	r3, r3, #22
 8001dca:	0d9a      	lsrs	r2, r3, #22
 8001dcc:	183b      	adds	r3, r7, r0
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	0418      	lsls	r0, r3, #16
 8001dd2:	23ff      	movs	r3, #255	; 0xff
 8001dd4:	041b      	lsls	r3, r3, #16
 8001dd6:	4003      	ands	r3, r0
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b005      	add	sp, #20
 8001df0:	bd90      	pop	{r4, r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	03ff63ff 	.word	0x03ff63ff

08001df8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2241      	movs	r2, #65	; 0x41
 8001e06:	5c9b      	ldrb	r3, [r3, r2]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b20      	cmp	r3, #32
 8001e0c:	d138      	bne.n	8001e80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2240      	movs	r2, #64	; 0x40
 8001e12:	5c9b      	ldrb	r3, [r3, r2]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e032      	b.n	8001e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2240      	movs	r2, #64	; 0x40
 8001e20:	2101      	movs	r1, #1
 8001e22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2241      	movs	r2, #65	; 0x41
 8001e28:	2124      	movs	r1, #36	; 0x24
 8001e2a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2101      	movs	r1, #1
 8001e38:	438a      	bics	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4911      	ldr	r1, [pc, #68]	; (8001e8c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e48:	400a      	ands	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6819      	ldr	r1, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2101      	movs	r1, #1
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2241      	movs	r2, #65	; 0x41
 8001e70:	2120      	movs	r1, #32
 8001e72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2240      	movs	r2, #64	; 0x40
 8001e78:	2100      	movs	r1, #0
 8001e7a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e000      	b.n	8001e82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e80:	2302      	movs	r3, #2
  }
}
 8001e82:	0018      	movs	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b002      	add	sp, #8
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	ffffefff 	.word	0xffffefff

08001e90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2241      	movs	r2, #65	; 0x41
 8001e9e:	5c9b      	ldrb	r3, [r3, r2]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	d139      	bne.n	8001f1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2240      	movs	r2, #64	; 0x40
 8001eaa:	5c9b      	ldrb	r3, [r3, r2]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e033      	b.n	8001f1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2240      	movs	r2, #64	; 0x40
 8001eb8:	2101      	movs	r1, #1
 8001eba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2241      	movs	r2, #65	; 0x41
 8001ec0:	2124      	movs	r1, #36	; 0x24
 8001ec2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2101      	movs	r1, #1
 8001ed0:	438a      	bics	r2, r1
 8001ed2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4a11      	ldr	r2, [pc, #68]	; (8001f24 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2101      	movs	r1, #1
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2241      	movs	r2, #65	; 0x41
 8001f0a:	2120      	movs	r1, #32
 8001f0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2240      	movs	r2, #64	; 0x40
 8001f12:	2100      	movs	r1, #0
 8001f14:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e000      	b.n	8001f1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f1a:	2302      	movs	r3, #2
  }
}
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b004      	add	sp, #16
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	fffff0ff 	.word	0xfffff0ff

08001f28 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001f32:	2180      	movs	r1, #128	; 0x80
 8001f34:	0049      	lsls	r1, r1, #1
 8001f36:	430a      	orrs	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]
}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40007000 	.word	0x40007000

08001f44 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3 for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8001f4c:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8001f4e:	6859      	ldr	r1, [r3, #4]
 8001f50:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <HAL_PWR_EnableWakeUpPin+0x1c>)
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	605a      	str	r2, [r3, #4]
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40007000 	.word	0x40007000

08001f64 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8001f6e:	2102      	movs	r1, #2
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001f76:	691a      	ldr	r2, [r3, #16]
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001f80:	bf30      	wfi
}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40007000 	.word	0x40007000
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f90:	b5b0      	push	{r4, r5, r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	f000 fb6c 	bl	800267c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa4:	4bc8      	ldr	r3, [pc, #800]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	220c      	movs	r2, #12
 8001faa:	4013      	ands	r3, r2
 8001fac:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fae:	4bc6      	ldr	r3, [pc, #792]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	025b      	lsls	r3, r3, #9
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d100      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x36>
 8001fc4:	e07d      	b.n	80020c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d007      	beq.n	8001fdc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d112      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x68>
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	025b      	lsls	r3, r3, #9
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d10d      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	4bba      	ldr	r3, [pc, #744]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	029b      	lsls	r3, r3, #10
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d100      	bne.n	8001fea <HAL_RCC_OscConfig+0x5a>
 8001fe8:	e06a      	b.n	80020c0 <HAL_RCC_OscConfig+0x130>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d166      	bne.n	80020c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	f000 fb42 	bl	800267c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	025b      	lsls	r3, r3, #9
 8002000:	429a      	cmp	r2, r3
 8002002:	d107      	bne.n	8002014 <HAL_RCC_OscConfig+0x84>
 8002004:	4bb0      	ldr	r3, [pc, #704]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4baf      	ldr	r3, [pc, #700]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 800200a:	2180      	movs	r1, #128	; 0x80
 800200c:	0249      	lsls	r1, r1, #9
 800200e:	430a      	orrs	r2, r1
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	e027      	b.n	8002064 <HAL_RCC_OscConfig+0xd4>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	23a0      	movs	r3, #160	; 0xa0
 800201a:	02db      	lsls	r3, r3, #11
 800201c:	429a      	cmp	r2, r3
 800201e:	d10e      	bne.n	800203e <HAL_RCC_OscConfig+0xae>
 8002020:	4ba9      	ldr	r3, [pc, #676]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4ba8      	ldr	r3, [pc, #672]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8002026:	2180      	movs	r1, #128	; 0x80
 8002028:	02c9      	lsls	r1, r1, #11
 800202a:	430a      	orrs	r2, r1
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	4ba6      	ldr	r3, [pc, #664]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	4ba5      	ldr	r3, [pc, #660]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8002034:	2180      	movs	r1, #128	; 0x80
 8002036:	0249      	lsls	r1, r1, #9
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e012      	b.n	8002064 <HAL_RCC_OscConfig+0xd4>
 800203e:	4ba2      	ldr	r3, [pc, #648]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4ba1      	ldr	r3, [pc, #644]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8002044:	49a1      	ldr	r1, [pc, #644]	; (80022cc <HAL_RCC_OscConfig+0x33c>)
 8002046:	400a      	ands	r2, r1
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	4b9f      	ldr	r3, [pc, #636]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	2380      	movs	r3, #128	; 0x80
 8002050:	025b      	lsls	r3, r3, #9
 8002052:	4013      	ands	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4b9b      	ldr	r3, [pc, #620]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b9a      	ldr	r3, [pc, #616]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 800205e:	499c      	ldr	r1, [pc, #624]	; (80022d0 <HAL_RCC_OscConfig+0x340>)
 8002060:	400a      	ands	r2, r1
 8002062:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d014      	beq.n	8002096 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7ff f934 	bl	80012d8 <HAL_GetTick>
 8002070:	0003      	movs	r3, r0
 8002072:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002076:	f7ff f92f 	bl	80012d8 <HAL_GetTick>
 800207a:	0002      	movs	r2, r0
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b64      	cmp	r3, #100	; 0x64
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e2f9      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002088:	4b8f      	ldr	r3, [pc, #572]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	029b      	lsls	r3, r3, #10
 8002090:	4013      	ands	r3, r2
 8002092:	d0f0      	beq.n	8002076 <HAL_RCC_OscConfig+0xe6>
 8002094:	e015      	b.n	80020c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7ff f91f 	bl	80012d8 <HAL_GetTick>
 800209a:	0003      	movs	r3, r0
 800209c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a0:	f7ff f91a 	bl	80012d8 <HAL_GetTick>
 80020a4:	0002      	movs	r2, r0
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b64      	cmp	r3, #100	; 0x64
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e2e4      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020b2:	4b85      	ldr	r3, [pc, #532]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	029b      	lsls	r3, r3, #10
 80020ba:	4013      	ands	r3, r2
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x110>
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2202      	movs	r2, #2
 80020c8:	4013      	ands	r3, r2
 80020ca:	d100      	bne.n	80020ce <HAL_RCC_OscConfig+0x13e>
 80020cc:	e099      	b.n	8002202 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80020d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d6:	2220      	movs	r2, #32
 80020d8:	4013      	ands	r3, r2
 80020da:	d009      	beq.n	80020f0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80020dc:	4b7a      	ldr	r3, [pc, #488]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4b79      	ldr	r3, [pc, #484]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 80020e2:	2120      	movs	r1, #32
 80020e4:	430a      	orrs	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	2220      	movs	r2, #32
 80020ec:	4393      	bics	r3, r2
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	d005      	beq.n	8002102 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	2b0c      	cmp	r3, #12
 80020fa:	d13e      	bne.n	800217a <HAL_RCC_OscConfig+0x1ea>
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d13b      	bne.n	800217a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002102:	4b71      	ldr	r3, [pc, #452]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2204      	movs	r2, #4
 8002108:	4013      	ands	r3, r2
 800210a:	d004      	beq.n	8002116 <HAL_RCC_OscConfig+0x186>
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e2b2      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002116:	4b6c      	ldr	r3, [pc, #432]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4a6e      	ldr	r2, [pc, #440]	; (80022d4 <HAL_RCC_OscConfig+0x344>)
 800211c:	4013      	ands	r3, r2
 800211e:	0019      	movs	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	021a      	lsls	r2, r3, #8
 8002126:	4b68      	ldr	r3, [pc, #416]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8002128:	430a      	orrs	r2, r1
 800212a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800212c:	4b66      	ldr	r3, [pc, #408]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2209      	movs	r2, #9
 8002132:	4393      	bics	r3, r2
 8002134:	0019      	movs	r1, r3
 8002136:	4b64      	ldr	r3, [pc, #400]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8002138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213a:	430a      	orrs	r2, r1
 800213c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800213e:	f000 fbeb 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 8002142:	0001      	movs	r1, r0
 8002144:	4b60      	ldr	r3, [pc, #384]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	220f      	movs	r2, #15
 800214c:	4013      	ands	r3, r2
 800214e:	4a62      	ldr	r2, [pc, #392]	; (80022d8 <HAL_RCC_OscConfig+0x348>)
 8002150:	5cd3      	ldrb	r3, [r2, r3]
 8002152:	000a      	movs	r2, r1
 8002154:	40da      	lsrs	r2, r3
 8002156:	4b61      	ldr	r3, [pc, #388]	; (80022dc <HAL_RCC_OscConfig+0x34c>)
 8002158:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800215a:	4b61      	ldr	r3, [pc, #388]	; (80022e0 <HAL_RCC_OscConfig+0x350>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2513      	movs	r5, #19
 8002160:	197c      	adds	r4, r7, r5
 8002162:	0018      	movs	r0, r3
 8002164:	f7ff f872 	bl	800124c <HAL_InitTick>
 8002168:	0003      	movs	r3, r0
 800216a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800216c:	197b      	adds	r3, r7, r5
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d046      	beq.n	8002202 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002174:	197b      	adds	r3, r7, r5
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	e280      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	2b00      	cmp	r3, #0
 800217e:	d027      	beq.n	80021d0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002180:	4b51      	ldr	r3, [pc, #324]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2209      	movs	r2, #9
 8002186:	4393      	bics	r3, r2
 8002188:	0019      	movs	r1, r3
 800218a:	4b4f      	ldr	r3, [pc, #316]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 800218c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002192:	f7ff f8a1 	bl	80012d8 <HAL_GetTick>
 8002196:	0003      	movs	r3, r0
 8002198:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800219c:	f7ff f89c 	bl	80012d8 <HAL_GetTick>
 80021a0:	0002      	movs	r2, r0
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e266      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021ae:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2204      	movs	r2, #4
 80021b4:	4013      	ands	r3, r2
 80021b6:	d0f1      	beq.n	800219c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b8:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4a45      	ldr	r2, [pc, #276]	; (80022d4 <HAL_RCC_OscConfig+0x344>)
 80021be:	4013      	ands	r3, r2
 80021c0:	0019      	movs	r1, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	021a      	lsls	r2, r3, #8
 80021c8:	4b3f      	ldr	r3, [pc, #252]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 80021ca:	430a      	orrs	r2, r1
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	e018      	b.n	8002202 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d0:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 80021d6:	2101      	movs	r1, #1
 80021d8:	438a      	bics	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7ff f87c 	bl	80012d8 <HAL_GetTick>
 80021e0:	0003      	movs	r3, r0
 80021e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e6:	f7ff f877 	bl	80012d8 <HAL_GetTick>
 80021ea:	0002      	movs	r2, r0
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e241      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021f8:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2204      	movs	r2, #4
 80021fe:	4013      	ands	r3, r2
 8002200:	d1f1      	bne.n	80021e6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2210      	movs	r2, #16
 8002208:	4013      	ands	r3, r2
 800220a:	d100      	bne.n	800220e <HAL_RCC_OscConfig+0x27e>
 800220c:	e0a1      	b.n	8002352 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d140      	bne.n	8002296 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4013      	ands	r3, r2
 800221e:	d005      	beq.n	800222c <HAL_RCC_OscConfig+0x29c>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e227      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800222c:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4a2c      	ldr	r2, [pc, #176]	; (80022e4 <HAL_RCC_OscConfig+0x354>)
 8002232:	4013      	ands	r3, r2
 8002234:	0019      	movs	r1, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1a      	ldr	r2, [r3, #32]
 800223a:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 800223c:	430a      	orrs	r2, r1
 800223e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002240:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	0a19      	lsrs	r1, r3, #8
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	061a      	lsls	r2, r3, #24
 800224e:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8002250:	430a      	orrs	r2, r1
 8002252:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	0b5b      	lsrs	r3, r3, #13
 800225a:	3301      	adds	r3, #1
 800225c:	2280      	movs	r2, #128	; 0x80
 800225e:	0212      	lsls	r2, r2, #8
 8002260:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002262:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	210f      	movs	r1, #15
 800226a:	400b      	ands	r3, r1
 800226c:	491a      	ldr	r1, [pc, #104]	; (80022d8 <HAL_RCC_OscConfig+0x348>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002272:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <HAL_RCC_OscConfig+0x34c>)
 8002274:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002276:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <HAL_RCC_OscConfig+0x350>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2513      	movs	r5, #19
 800227c:	197c      	adds	r4, r7, r5
 800227e:	0018      	movs	r0, r3
 8002280:	f7fe ffe4 	bl	800124c <HAL_InitTick>
 8002284:	0003      	movs	r3, r0
 8002286:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002288:	197b      	adds	r3, r7, r5
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d060      	beq.n	8002352 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002290:	197b      	adds	r3, r7, r5
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	e1f2      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d03f      	beq.n	800231e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 80022a4:	2180      	movs	r1, #128	; 0x80
 80022a6:	0049      	lsls	r1, r1, #1
 80022a8:	430a      	orrs	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff f814 	bl	80012d8 <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022b4:	e018      	b.n	80022e8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022b6:	f7ff f80f 	bl	80012d8 <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d911      	bls.n	80022e8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e1d9      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
 80022c8:	40021000 	.word	0x40021000
 80022cc:	fffeffff 	.word	0xfffeffff
 80022d0:	fffbffff 	.word	0xfffbffff
 80022d4:	ffffe0ff 	.word	0xffffe0ff
 80022d8:	08003d18 	.word	0x08003d18
 80022dc:	2000000c 	.word	0x2000000c
 80022e0:	20000010 	.word	0x20000010
 80022e4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022e8:	4bc9      	ldr	r3, [pc, #804]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4013      	ands	r3, r2
 80022f2:	d0e0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022f4:	4bc6      	ldr	r3, [pc, #792]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	4ac6      	ldr	r2, [pc, #792]	; (8002614 <HAL_RCC_OscConfig+0x684>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	0019      	movs	r1, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1a      	ldr	r2, [r3, #32]
 8002302:	4bc3      	ldr	r3, [pc, #780]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 8002304:	430a      	orrs	r2, r1
 8002306:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002308:	4bc1      	ldr	r3, [pc, #772]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	0a19      	lsrs	r1, r3, #8
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	061a      	lsls	r2, r3, #24
 8002316:	4bbe      	ldr	r3, [pc, #760]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 8002318:	430a      	orrs	r2, r1
 800231a:	605a      	str	r2, [r3, #4]
 800231c:	e019      	b.n	8002352 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800231e:	4bbc      	ldr	r3, [pc, #752]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	4bbb      	ldr	r3, [pc, #748]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 8002324:	49bc      	ldr	r1, [pc, #752]	; (8002618 <HAL_RCC_OscConfig+0x688>)
 8002326:	400a      	ands	r2, r1
 8002328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe ffd5 	bl	80012d8 <HAL_GetTick>
 800232e:	0003      	movs	r3, r0
 8002330:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002334:	f7fe ffd0 	bl	80012d8 <HAL_GetTick>
 8002338:	0002      	movs	r2, r0
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e19a      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002346:	4bb2      	ldr	r3, [pc, #712]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4013      	ands	r3, r2
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2208      	movs	r2, #8
 8002358:	4013      	ands	r3, r2
 800235a:	d036      	beq.n	80023ca <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d019      	beq.n	8002398 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002364:	4baa      	ldr	r3, [pc, #680]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 8002366:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002368:	4ba9      	ldr	r3, [pc, #676]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 800236a:	2101      	movs	r1, #1
 800236c:	430a      	orrs	r2, r1
 800236e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002370:	f7fe ffb2 	bl	80012d8 <HAL_GetTick>
 8002374:	0003      	movs	r3, r0
 8002376:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237a:	f7fe ffad 	bl	80012d8 <HAL_GetTick>
 800237e:	0002      	movs	r2, r0
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e177      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800238c:	4ba0      	ldr	r3, [pc, #640]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 800238e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002390:	2202      	movs	r2, #2
 8002392:	4013      	ands	r3, r2
 8002394:	d0f1      	beq.n	800237a <HAL_RCC_OscConfig+0x3ea>
 8002396:	e018      	b.n	80023ca <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002398:	4b9d      	ldr	r3, [pc, #628]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 800239a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800239c:	4b9c      	ldr	r3, [pc, #624]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 800239e:	2101      	movs	r1, #1
 80023a0:	438a      	bics	r2, r1
 80023a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a4:	f7fe ff98 	bl	80012d8 <HAL_GetTick>
 80023a8:	0003      	movs	r3, r0
 80023aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ae:	f7fe ff93 	bl	80012d8 <HAL_GetTick>
 80023b2:	0002      	movs	r2, r0
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e15d      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023c0:	4b93      	ldr	r3, [pc, #588]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 80023c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023c4:	2202      	movs	r2, #2
 80023c6:	4013      	ands	r3, r2
 80023c8:	d1f1      	bne.n	80023ae <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2204      	movs	r2, #4
 80023d0:	4013      	ands	r3, r2
 80023d2:	d100      	bne.n	80023d6 <HAL_RCC_OscConfig+0x446>
 80023d4:	e0ae      	b.n	8002534 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d6:	2023      	movs	r0, #35	; 0x23
 80023d8:	183b      	adds	r3, r7, r0
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023de:	4b8c      	ldr	r3, [pc, #560]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 80023e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	055b      	lsls	r3, r3, #21
 80023e6:	4013      	ands	r3, r2
 80023e8:	d109      	bne.n	80023fe <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ea:	4b89      	ldr	r3, [pc, #548]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 80023ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ee:	4b88      	ldr	r3, [pc, #544]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 80023f0:	2180      	movs	r1, #128	; 0x80
 80023f2:	0549      	lsls	r1, r1, #21
 80023f4:	430a      	orrs	r2, r1
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80023f8:	183b      	adds	r3, r7, r0
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fe:	4b87      	ldr	r3, [pc, #540]	; (800261c <HAL_RCC_OscConfig+0x68c>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4013      	ands	r3, r2
 8002408:	d11a      	bne.n	8002440 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800240a:	4b84      	ldr	r3, [pc, #528]	; (800261c <HAL_RCC_OscConfig+0x68c>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b83      	ldr	r3, [pc, #524]	; (800261c <HAL_RCC_OscConfig+0x68c>)
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	0049      	lsls	r1, r1, #1
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002418:	f7fe ff5e 	bl	80012d8 <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002422:	f7fe ff59 	bl	80012d8 <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b64      	cmp	r3, #100	; 0x64
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e123      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	4b79      	ldr	r3, [pc, #484]	; (800261c <HAL_RCC_OscConfig+0x68c>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4013      	ands	r3, r2
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	429a      	cmp	r2, r3
 800244a:	d107      	bne.n	800245c <HAL_RCC_OscConfig+0x4cc>
 800244c:	4b70      	ldr	r3, [pc, #448]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 800244e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002450:	4b6f      	ldr	r3, [pc, #444]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	0049      	lsls	r1, r1, #1
 8002456:	430a      	orrs	r2, r1
 8002458:	651a      	str	r2, [r3, #80]	; 0x50
 800245a:	e031      	b.n	80024c0 <HAL_RCC_OscConfig+0x530>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10c      	bne.n	800247e <HAL_RCC_OscConfig+0x4ee>
 8002464:	4b6a      	ldr	r3, [pc, #424]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 8002466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002468:	4b69      	ldr	r3, [pc, #420]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 800246a:	496b      	ldr	r1, [pc, #428]	; (8002618 <HAL_RCC_OscConfig+0x688>)
 800246c:	400a      	ands	r2, r1
 800246e:	651a      	str	r2, [r3, #80]	; 0x50
 8002470:	4b67      	ldr	r3, [pc, #412]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 8002472:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002474:	4b66      	ldr	r3, [pc, #408]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 8002476:	496a      	ldr	r1, [pc, #424]	; (8002620 <HAL_RCC_OscConfig+0x690>)
 8002478:	400a      	ands	r2, r1
 800247a:	651a      	str	r2, [r3, #80]	; 0x50
 800247c:	e020      	b.n	80024c0 <HAL_RCC_OscConfig+0x530>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	23a0      	movs	r3, #160	; 0xa0
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	429a      	cmp	r2, r3
 8002488:	d10e      	bne.n	80024a8 <HAL_RCC_OscConfig+0x518>
 800248a:	4b61      	ldr	r3, [pc, #388]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 800248c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800248e:	4b60      	ldr	r3, [pc, #384]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 8002490:	2180      	movs	r1, #128	; 0x80
 8002492:	00c9      	lsls	r1, r1, #3
 8002494:	430a      	orrs	r2, r1
 8002496:	651a      	str	r2, [r3, #80]	; 0x50
 8002498:	4b5d      	ldr	r3, [pc, #372]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 800249a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800249c:	4b5c      	ldr	r3, [pc, #368]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	0049      	lsls	r1, r1, #1
 80024a2:	430a      	orrs	r2, r1
 80024a4:	651a      	str	r2, [r3, #80]	; 0x50
 80024a6:	e00b      	b.n	80024c0 <HAL_RCC_OscConfig+0x530>
 80024a8:	4b59      	ldr	r3, [pc, #356]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 80024aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ac:	4b58      	ldr	r3, [pc, #352]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 80024ae:	495a      	ldr	r1, [pc, #360]	; (8002618 <HAL_RCC_OscConfig+0x688>)
 80024b0:	400a      	ands	r2, r1
 80024b2:	651a      	str	r2, [r3, #80]	; 0x50
 80024b4:	4b56      	ldr	r3, [pc, #344]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 80024b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024b8:	4b55      	ldr	r3, [pc, #340]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 80024ba:	4959      	ldr	r1, [pc, #356]	; (8002620 <HAL_RCC_OscConfig+0x690>)
 80024bc:	400a      	ands	r2, r1
 80024be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d015      	beq.n	80024f4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c8:	f7fe ff06 	bl	80012d8 <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024d0:	e009      	b.n	80024e6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d2:	f7fe ff01 	bl	80012d8 <HAL_GetTick>
 80024d6:	0002      	movs	r2, r0
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	4a51      	ldr	r2, [pc, #324]	; (8002624 <HAL_RCC_OscConfig+0x694>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e0ca      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024e6:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 80024e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4013      	ands	r3, r2
 80024f0:	d0ef      	beq.n	80024d2 <HAL_RCC_OscConfig+0x542>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024f4:	f7fe fef0 	bl	80012d8 <HAL_GetTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024fc:	e009      	b.n	8002512 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe feeb 	bl	80012d8 <HAL_GetTick>
 8002502:	0002      	movs	r2, r0
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	4a46      	ldr	r2, [pc, #280]	; (8002624 <HAL_RCC_OscConfig+0x694>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e0b4      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002512:	4b3f      	ldr	r3, [pc, #252]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 8002514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4013      	ands	r3, r2
 800251c:	d1ef      	bne.n	80024fe <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800251e:	2323      	movs	r3, #35	; 0x23
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	4b39      	ldr	r3, [pc, #228]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 800252a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800252c:	4b38      	ldr	r3, [pc, #224]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 800252e:	493e      	ldr	r1, [pc, #248]	; (8002628 <HAL_RCC_OscConfig+0x698>)
 8002530:	400a      	ands	r2, r1
 8002532:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	2b00      	cmp	r3, #0
 800253a:	d100      	bne.n	800253e <HAL_RCC_OscConfig+0x5ae>
 800253c:	e09d      	b.n	800267a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	2b0c      	cmp	r3, #12
 8002542:	d100      	bne.n	8002546 <HAL_RCC_OscConfig+0x5b6>
 8002544:	e076      	b.n	8002634 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	2b02      	cmp	r3, #2
 800254c:	d145      	bne.n	80025da <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254e:	4b30      	ldr	r3, [pc, #192]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 8002554:	4935      	ldr	r1, [pc, #212]	; (800262c <HAL_RCC_OscConfig+0x69c>)
 8002556:	400a      	ands	r2, r1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7fe febd 	bl	80012d8 <HAL_GetTick>
 800255e:	0003      	movs	r3, r0
 8002560:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002564:	f7fe feb8 	bl	80012d8 <HAL_GetTick>
 8002568:	0002      	movs	r2, r0
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e082      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002576:	4b26      	ldr	r3, [pc, #152]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	049b      	lsls	r3, r3, #18
 800257e:	4013      	ands	r3, r2
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002582:	4b23      	ldr	r3, [pc, #140]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	4a2a      	ldr	r2, [pc, #168]	; (8002630 <HAL_RCC_OscConfig+0x6a0>)
 8002588:	4013      	ands	r3, r2
 800258a:	0019      	movs	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	431a      	orrs	r2, r3
 800259c:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 800259e:	430a      	orrs	r2, r1
 80025a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a2:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 80025a8:	2180      	movs	r1, #128	; 0x80
 80025aa:	0449      	lsls	r1, r1, #17
 80025ac:	430a      	orrs	r2, r1
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7fe fe92 	bl	80012d8 <HAL_GetTick>
 80025b4:	0003      	movs	r3, r0
 80025b6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ba:	f7fe fe8d 	bl	80012d8 <HAL_GetTick>
 80025be:	0002      	movs	r2, r0
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e057      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025cc:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2380      	movs	r3, #128	; 0x80
 80025d2:	049b      	lsls	r3, r3, #18
 80025d4:	4013      	ands	r3, r2
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x62a>
 80025d8:	e04f      	b.n	800267a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 80025e0:	4912      	ldr	r1, [pc, #72]	; (800262c <HAL_RCC_OscConfig+0x69c>)
 80025e2:	400a      	ands	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7fe fe77 	bl	80012d8 <HAL_GetTick>
 80025ea:	0003      	movs	r3, r0
 80025ec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f0:	f7fe fe72 	bl	80012d8 <HAL_GetTick>
 80025f4:	0002      	movs	r2, r0
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e03c      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002602:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_RCC_OscConfig+0x680>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	049b      	lsls	r3, r3, #18
 800260a:	4013      	ands	r3, r2
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x660>
 800260e:	e034      	b.n	800267a <HAL_RCC_OscConfig+0x6ea>
 8002610:	40021000 	.word	0x40021000
 8002614:	ffff1fff 	.word	0xffff1fff
 8002618:	fffffeff 	.word	0xfffffeff
 800261c:	40007000 	.word	0x40007000
 8002620:	fffffbff 	.word	0xfffffbff
 8002624:	00001388 	.word	0x00001388
 8002628:	efffffff 	.word	0xefffffff
 800262c:	feffffff 	.word	0xfeffffff
 8002630:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e01d      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002640:	4b10      	ldr	r3, [pc, #64]	; (8002684 <HAL_RCC_OscConfig+0x6f4>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	025b      	lsls	r3, r3, #9
 800264c:	401a      	ands	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002652:	429a      	cmp	r2, r3
 8002654:	d10f      	bne.n	8002676 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	23f0      	movs	r3, #240	; 0xf0
 800265a:	039b      	lsls	r3, r3, #14
 800265c:	401a      	ands	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d107      	bne.n	8002676 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	23c0      	movs	r3, #192	; 0xc0
 800266a:	041b      	lsls	r3, r3, #16
 800266c:	401a      	ands	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d001      	beq.n	800267a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b00a      	add	sp, #40	; 0x28
 8002682:	bdb0      	pop	{r4, r5, r7, pc}
 8002684:	40021000 	.word	0x40021000

08002688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002688:	b5b0      	push	{r4, r5, r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e128      	b.n	80028ee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800269c:	4b96      	ldr	r3, [pc, #600]	; (80028f8 <HAL_RCC_ClockConfig+0x270>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2201      	movs	r2, #1
 80026a2:	4013      	ands	r3, r2
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d91e      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b93      	ldr	r3, [pc, #588]	; (80028f8 <HAL_RCC_ClockConfig+0x270>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2201      	movs	r2, #1
 80026b0:	4393      	bics	r3, r2
 80026b2:	0019      	movs	r1, r3
 80026b4:	4b90      	ldr	r3, [pc, #576]	; (80028f8 <HAL_RCC_ClockConfig+0x270>)
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026bc:	f7fe fe0c 	bl	80012d8 <HAL_GetTick>
 80026c0:	0003      	movs	r3, r0
 80026c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c4:	e009      	b.n	80026da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c6:	f7fe fe07 	bl	80012d8 <HAL_GetTick>
 80026ca:	0002      	movs	r2, r0
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	4a8a      	ldr	r2, [pc, #552]	; (80028fc <HAL_RCC_ClockConfig+0x274>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e109      	b.n	80028ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b87      	ldr	r3, [pc, #540]	; (80028f8 <HAL_RCC_ClockConfig+0x270>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	4013      	ands	r3, r2
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d1ee      	bne.n	80026c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2202      	movs	r2, #2
 80026ee:	4013      	ands	r3, r2
 80026f0:	d009      	beq.n	8002706 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f2:	4b83      	ldr	r3, [pc, #524]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	22f0      	movs	r2, #240	; 0xf0
 80026f8:	4393      	bics	r3, r2
 80026fa:	0019      	movs	r1, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	4b7f      	ldr	r3, [pc, #508]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 8002702:	430a      	orrs	r2, r1
 8002704:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2201      	movs	r2, #1
 800270c:	4013      	ands	r3, r2
 800270e:	d100      	bne.n	8002712 <HAL_RCC_ClockConfig+0x8a>
 8002710:	e089      	b.n	8002826 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800271a:	4b79      	ldr	r3, [pc, #484]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	029b      	lsls	r3, r3, #10
 8002722:	4013      	ands	r3, r2
 8002724:	d120      	bne.n	8002768 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e0e1      	b.n	80028ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b03      	cmp	r3, #3
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002732:	4b73      	ldr	r3, [pc, #460]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	049b      	lsls	r3, r3, #18
 800273a:	4013      	ands	r3, r2
 800273c:	d114      	bne.n	8002768 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e0d5      	b.n	80028ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d106      	bne.n	8002758 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800274a:	4b6d      	ldr	r3, [pc, #436]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2204      	movs	r2, #4
 8002750:	4013      	ands	r3, r2
 8002752:	d109      	bne.n	8002768 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0ca      	b.n	80028ee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002758:	4b69      	ldr	r3, [pc, #420]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4013      	ands	r3, r2
 8002762:	d101      	bne.n	8002768 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0c2      	b.n	80028ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002768:	4b65      	ldr	r3, [pc, #404]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2203      	movs	r2, #3
 800276e:	4393      	bics	r3, r2
 8002770:	0019      	movs	r1, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	4b62      	ldr	r3, [pc, #392]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 8002778:	430a      	orrs	r2, r1
 800277a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800277c:	f7fe fdac 	bl	80012d8 <HAL_GetTick>
 8002780:	0003      	movs	r3, r0
 8002782:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d111      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800278c:	e009      	b.n	80027a2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278e:	f7fe fda3 	bl	80012d8 <HAL_GetTick>
 8002792:	0002      	movs	r2, r0
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	4a58      	ldr	r2, [pc, #352]	; (80028fc <HAL_RCC_ClockConfig+0x274>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e0a5      	b.n	80028ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a2:	4b57      	ldr	r3, [pc, #348]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	220c      	movs	r2, #12
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d1ef      	bne.n	800278e <HAL_RCC_ClockConfig+0x106>
 80027ae:	e03a      	b.n	8002826 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d111      	bne.n	80027dc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027b8:	e009      	b.n	80027ce <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ba:	f7fe fd8d 	bl	80012d8 <HAL_GetTick>
 80027be:	0002      	movs	r2, r0
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	4a4d      	ldr	r2, [pc, #308]	; (80028fc <HAL_RCC_ClockConfig+0x274>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e08f      	b.n	80028ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ce:	4b4c      	ldr	r3, [pc, #304]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	220c      	movs	r2, #12
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b0c      	cmp	r3, #12
 80027d8:	d1ef      	bne.n	80027ba <HAL_RCC_ClockConfig+0x132>
 80027da:	e024      	b.n	8002826 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d11b      	bne.n	800281c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027e4:	e009      	b.n	80027fa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e6:	f7fe fd77 	bl	80012d8 <HAL_GetTick>
 80027ea:	0002      	movs	r2, r0
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	4a42      	ldr	r2, [pc, #264]	; (80028fc <HAL_RCC_ClockConfig+0x274>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e079      	b.n	80028ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027fa:	4b41      	ldr	r3, [pc, #260]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	220c      	movs	r2, #12
 8002800:	4013      	ands	r3, r2
 8002802:	2b04      	cmp	r3, #4
 8002804:	d1ef      	bne.n	80027e6 <HAL_RCC_ClockConfig+0x15e>
 8002806:	e00e      	b.n	8002826 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7fe fd66 	bl	80012d8 <HAL_GetTick>
 800280c:	0002      	movs	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	4a3a      	ldr	r2, [pc, #232]	; (80028fc <HAL_RCC_ClockConfig+0x274>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e068      	b.n	80028ee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800281c:	4b38      	ldr	r3, [pc, #224]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	220c      	movs	r2, #12
 8002822:	4013      	ands	r3, r2
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002826:	4b34      	ldr	r3, [pc, #208]	; (80028f8 <HAL_RCC_ClockConfig+0x270>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2201      	movs	r2, #1
 800282c:	4013      	ands	r3, r2
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d21e      	bcs.n	8002872 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002834:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <HAL_RCC_ClockConfig+0x270>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2201      	movs	r2, #1
 800283a:	4393      	bics	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <HAL_RCC_ClockConfig+0x270>)
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002846:	f7fe fd47 	bl	80012d8 <HAL_GetTick>
 800284a:	0003      	movs	r3, r0
 800284c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	e009      	b.n	8002864 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002850:	f7fe fd42 	bl	80012d8 <HAL_GetTick>
 8002854:	0002      	movs	r2, r0
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	4a28      	ldr	r2, [pc, #160]	; (80028fc <HAL_RCC_ClockConfig+0x274>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e044      	b.n	80028ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002864:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCC_ClockConfig+0x270>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2201      	movs	r2, #1
 800286a:	4013      	ands	r3, r2
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	429a      	cmp	r2, r3
 8002870:	d1ee      	bne.n	8002850 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2204      	movs	r2, #4
 8002878:	4013      	ands	r3, r2
 800287a:	d009      	beq.n	8002890 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800287c:	4b20      	ldr	r3, [pc, #128]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a20      	ldr	r2, [pc, #128]	; (8002904 <HAL_RCC_ClockConfig+0x27c>)
 8002882:	4013      	ands	r3, r2
 8002884:	0019      	movs	r1, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 800288c:	430a      	orrs	r2, r1
 800288e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2208      	movs	r2, #8
 8002896:	4013      	ands	r3, r2
 8002898:	d00a      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800289a:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	4a1a      	ldr	r2, [pc, #104]	; (8002908 <HAL_RCC_ClockConfig+0x280>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	0019      	movs	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	00da      	lsls	r2, r3, #3
 80028aa:	4b15      	ldr	r3, [pc, #84]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 80028ac:	430a      	orrs	r2, r1
 80028ae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028b0:	f000 f832 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 80028b4:	0001      	movs	r1, r0
 80028b6:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_RCC_ClockConfig+0x278>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	220f      	movs	r2, #15
 80028be:	4013      	ands	r3, r2
 80028c0:	4a12      	ldr	r2, [pc, #72]	; (800290c <HAL_RCC_ClockConfig+0x284>)
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	000a      	movs	r2, r1
 80028c6:	40da      	lsrs	r2, r3
 80028c8:	4b11      	ldr	r3, [pc, #68]	; (8002910 <HAL_RCC_ClockConfig+0x288>)
 80028ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <HAL_RCC_ClockConfig+0x28c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	250b      	movs	r5, #11
 80028d2:	197c      	adds	r4, r7, r5
 80028d4:	0018      	movs	r0, r3
 80028d6:	f7fe fcb9 	bl	800124c <HAL_InitTick>
 80028da:	0003      	movs	r3, r0
 80028dc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80028de:	197b      	adds	r3, r7, r5
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80028e6:	197b      	adds	r3, r7, r5
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	e000      	b.n	80028ee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	0018      	movs	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b004      	add	sp, #16
 80028f4:	bdb0      	pop	{r4, r5, r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	40022000 	.word	0x40022000
 80028fc:	00001388 	.word	0x00001388
 8002900:	40021000 	.word	0x40021000
 8002904:	fffff8ff 	.word	0xfffff8ff
 8002908:	ffffc7ff 	.word	0xffffc7ff
 800290c:	08003d18 	.word	0x08003d18
 8002910:	2000000c 	.word	0x2000000c
 8002914:	20000010 	.word	0x20000010

08002918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002918:	b5b0      	push	{r4, r5, r7, lr}
 800291a:	b08e      	sub	sp, #56	; 0x38
 800291c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800291e:	4b4c      	ldr	r3, [pc, #304]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002926:	230c      	movs	r3, #12
 8002928:	4013      	ands	r3, r2
 800292a:	2b0c      	cmp	r3, #12
 800292c:	d014      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x40>
 800292e:	d900      	bls.n	8002932 <HAL_RCC_GetSysClockFreq+0x1a>
 8002930:	e07b      	b.n	8002a2a <HAL_RCC_GetSysClockFreq+0x112>
 8002932:	2b04      	cmp	r3, #4
 8002934:	d002      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x24>
 8002936:	2b08      	cmp	r3, #8
 8002938:	d00b      	beq.n	8002952 <HAL_RCC_GetSysClockFreq+0x3a>
 800293a:	e076      	b.n	8002a2a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800293c:	4b44      	ldr	r3, [pc, #272]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x138>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2210      	movs	r2, #16
 8002942:	4013      	ands	r3, r2
 8002944:	d002      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002946:	4b43      	ldr	r3, [pc, #268]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002948:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800294a:	e07c      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800294c:	4b42      	ldr	r3, [pc, #264]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x140>)
 800294e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002950:	e079      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002952:	4b42      	ldr	r3, [pc, #264]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x144>)
 8002954:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002956:	e076      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295a:	0c9a      	lsrs	r2, r3, #18
 800295c:	230f      	movs	r3, #15
 800295e:	401a      	ands	r2, r3
 8002960:	4b3f      	ldr	r3, [pc, #252]	; (8002a60 <HAL_RCC_GetSysClockFreq+0x148>)
 8002962:	5c9b      	ldrb	r3, [r3, r2]
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	0d9a      	lsrs	r2, r3, #22
 800296a:	2303      	movs	r3, #3
 800296c:	4013      	ands	r3, r2
 800296e:	3301      	adds	r3, #1
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002972:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002974:	68da      	ldr	r2, [r3, #12]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	025b      	lsls	r3, r3, #9
 800297a:	4013      	ands	r3, r2
 800297c:	d01a      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	4a35      	ldr	r2, [pc, #212]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x144>)
 8002988:	2300      	movs	r3, #0
 800298a:	69b8      	ldr	r0, [r7, #24]
 800298c:	69f9      	ldr	r1, [r7, #28]
 800298e:	f7fd fd51 	bl	8000434 <__aeabi_lmul>
 8002992:	0002      	movs	r2, r0
 8002994:	000b      	movs	r3, r1
 8002996:	0010      	movs	r0, r2
 8002998:	0019      	movs	r1, r3
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f7fd fd25 	bl	80003f4 <__aeabi_uldivmod>
 80029aa:	0002      	movs	r2, r0
 80029ac:	000b      	movs	r3, r1
 80029ae:	0013      	movs	r3, r2
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
 80029b2:	e037      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029b4:	4b26      	ldr	r3, [pc, #152]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x138>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2210      	movs	r2, #16
 80029ba:	4013      	ands	r3, r2
 80029bc:	d01a      	beq.n	80029f4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	4a23      	ldr	r2, [pc, #140]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x13c>)
 80029c8:	2300      	movs	r3, #0
 80029ca:	68b8      	ldr	r0, [r7, #8]
 80029cc:	68f9      	ldr	r1, [r7, #12]
 80029ce:	f7fd fd31 	bl	8000434 <__aeabi_lmul>
 80029d2:	0002      	movs	r2, r0
 80029d4:	000b      	movs	r3, r1
 80029d6:	0010      	movs	r0, r2
 80029d8:	0019      	movs	r1, r3
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f7fd fd05 	bl	80003f4 <__aeabi_uldivmod>
 80029ea:	0002      	movs	r2, r0
 80029ec:	000b      	movs	r3, r1
 80029ee:	0013      	movs	r3, r2
 80029f0:	637b      	str	r3, [r7, #52]	; 0x34
 80029f2:	e017      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	0018      	movs	r0, r3
 80029f8:	2300      	movs	r3, #0
 80029fa:	0019      	movs	r1, r3
 80029fc:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x140>)
 80029fe:	2300      	movs	r3, #0
 8002a00:	f7fd fd18 	bl	8000434 <__aeabi_lmul>
 8002a04:	0002      	movs	r2, r0
 8002a06:	000b      	movs	r3, r1
 8002a08:	0010      	movs	r0, r2
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	001c      	movs	r4, r3
 8002a10:	2300      	movs	r3, #0
 8002a12:	001d      	movs	r5, r3
 8002a14:	0022      	movs	r2, r4
 8002a16:	002b      	movs	r3, r5
 8002a18:	f7fd fcec 	bl	80003f4 <__aeabi_uldivmod>
 8002a1c:	0002      	movs	r2, r0
 8002a1e:	000b      	movs	r3, r1
 8002a20:	0013      	movs	r3, r2
 8002a22:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a28:	e00d      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	0b5b      	lsrs	r3, r3, #13
 8002a30:	2207      	movs	r2, #7
 8002a32:	4013      	ands	r3, r2
 8002a34:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	2280      	movs	r2, #128	; 0x80
 8002a3c:	0212      	lsls	r2, r2, #8
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	0013      	movs	r3, r2
 8002a42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002a44:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b00e      	add	sp, #56	; 0x38
 8002a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a50:	40021000 	.word	0x40021000
 8002a54:	003d0900 	.word	0x003d0900
 8002a58:	00f42400 	.word	0x00f42400
 8002a5c:	007a1200 	.word	0x007a1200
 8002a60:	08003d30 	.word	0x08003d30

08002a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a68:	4b02      	ldr	r3, [pc, #8]	; (8002a74 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	2000000c 	.word	0x2000000c

08002a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a7c:	f7ff fff2 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8002a80:	0001      	movs	r1, r0
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	2207      	movs	r2, #7
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a8e:	5cd3      	ldrb	r3, [r2, r3]
 8002a90:	40d9      	lsrs	r1, r3
 8002a92:	000b      	movs	r3, r1
}
 8002a94:	0018      	movs	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	08003d28 	.word	0x08003d28

08002aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aa8:	f7ff ffdc 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8002aac:	0001      	movs	r1, r0
 8002aae:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	0adb      	lsrs	r3, r3, #11
 8002ab4:	2207      	movs	r2, #7
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	4a04      	ldr	r2, [pc, #16]	; (8002acc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002aba:	5cd3      	ldrb	r3, [r2, r3]
 8002abc:	40d9      	lsrs	r1, r3
 8002abe:	000b      	movs	r3, r1
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	08003d28 	.word	0x08003d28

08002ad0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002ad8:	2017      	movs	r0, #23
 8002ada:	183b      	adds	r3, r7, r0
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d100      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002aea:	e0c2      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aec:	4b81      	ldr	r3, [pc, #516]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	055b      	lsls	r3, r3, #21
 8002af4:	4013      	ands	r3, r2
 8002af6:	d109      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af8:	4b7e      	ldr	r3, [pc, #504]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002afc:	4b7d      	ldr	r3, [pc, #500]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	0549      	lsls	r1, r1, #21
 8002b02:	430a      	orrs	r2, r1
 8002b04:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002b06:	183b      	adds	r3, r7, r0
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b0c:	4b7a      	ldr	r3, [pc, #488]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4013      	ands	r3, r2
 8002b16:	d11a      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b18:	4b77      	ldr	r3, [pc, #476]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4b76      	ldr	r3, [pc, #472]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b1e:	2180      	movs	r1, #128	; 0x80
 8002b20:	0049      	lsls	r1, r1, #1
 8002b22:	430a      	orrs	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b26:	f7fe fbd7 	bl	80012d8 <HAL_GetTick>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2e:	e008      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b30:	f7fe fbd2 	bl	80012d8 <HAL_GetTick>
 8002b34:	0002      	movs	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	; 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e0d4      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b42:	4b6d      	ldr	r3, [pc, #436]	; (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002b4e:	4b69      	ldr	r3, [pc, #420]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	23c0      	movs	r3, #192	; 0xc0
 8002b54:	039b      	lsls	r3, r3, #14
 8002b56:	4013      	ands	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	23c0      	movs	r3, #192	; 0xc0
 8002b60:	039b      	lsls	r3, r3, #14
 8002b62:	4013      	ands	r3, r2
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d013      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	23c0      	movs	r3, #192	; 0xc0
 8002b70:	029b      	lsls	r3, r3, #10
 8002b72:	401a      	ands	r2, r3
 8002b74:	23c0      	movs	r3, #192	; 0xc0
 8002b76:	029b      	lsls	r3, r3, #10
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d10a      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b7c:	4b5d      	ldr	r3, [pc, #372]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	029b      	lsls	r3, r3, #10
 8002b84:	401a      	ands	r2, r3
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	029b      	lsls	r3, r3, #10
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e0ac      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b92:	4b58      	ldr	r3, [pc, #352]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002b94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b96:	23c0      	movs	r3, #192	; 0xc0
 8002b98:	029b      	lsls	r3, r3, #10
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d03b      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	23c0      	movs	r3, #192	; 0xc0
 8002baa:	029b      	lsls	r3, r3, #10
 8002bac:	4013      	ands	r3, r2
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d033      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d02e      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002bbe:	4b4d      	ldr	r3, [pc, #308]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc2:	4a4e      	ldr	r2, [pc, #312]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bc8:	4b4a      	ldr	r3, [pc, #296]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bcc:	4b49      	ldr	r3, [pc, #292]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bce:	2180      	movs	r1, #128	; 0x80
 8002bd0:	0309      	lsls	r1, r1, #12
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd6:	4b47      	ldr	r3, [pc, #284]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bda:	4b46      	ldr	r3, [pc, #280]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002bdc:	4948      	ldr	r1, [pc, #288]	; (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bde:	400a      	ands	r2, r1
 8002be0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002be2:	4b44      	ldr	r3, [pc, #272]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	2380      	movs	r3, #128	; 0x80
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d014      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fb71 	bl	80012d8 <HAL_GetTick>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bfa:	e009      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfc:	f7fe fb6c 	bl	80012d8 <HAL_GetTick>
 8002c00:	0002      	movs	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	4a3f      	ldr	r2, [pc, #252]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e06d      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c10:	4b38      	ldr	r3, [pc, #224]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d0ef      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	23c0      	movs	r3, #192	; 0xc0
 8002c22:	029b      	lsls	r3, r3, #10
 8002c24:	401a      	ands	r2, r3
 8002c26:	23c0      	movs	r3, #192	; 0xc0
 8002c28:	029b      	lsls	r3, r3, #10
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d10c      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002c2e:	4b31      	ldr	r3, [pc, #196]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a35      	ldr	r2, [pc, #212]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	23c0      	movs	r3, #192	; 0xc0
 8002c3e:	039b      	lsls	r3, r3, #14
 8002c40:	401a      	ands	r2, r3
 8002c42:	4b2c      	ldr	r3, [pc, #176]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c44:	430a      	orrs	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	4b2a      	ldr	r3, [pc, #168]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c4a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	23c0      	movs	r3, #192	; 0xc0
 8002c52:	029b      	lsls	r3, r3, #10
 8002c54:	401a      	ands	r2, r3
 8002c56:	4b27      	ldr	r3, [pc, #156]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c5c:	2317      	movs	r3, #23
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d105      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c66:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c6a:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c6c:	4927      	ldr	r1, [pc, #156]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c6e:	400a      	ands	r2, r1
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2202      	movs	r2, #2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d009      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	220c      	movs	r2, #12
 8002c82:	4393      	bics	r3, r2
 8002c84:	0019      	movs	r1, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	4b1a      	ldr	r3, [pc, #104]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2204      	movs	r2, #4
 8002c96:	4013      	ands	r3, r2
 8002c98:	d009      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c9a:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	4a1c      	ldr	r2, [pc, #112]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	0019      	movs	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002caa:	430a      	orrs	r2, r1
 8002cac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d009      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cbc:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2280      	movs	r2, #128	; 0x80
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d009      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002cd6:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cda:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	0019      	movs	r1, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	0018      	movs	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b006      	add	sp, #24
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	fffcffff 	.word	0xfffcffff
 8002d00:	fff7ffff 	.word	0xfff7ffff
 8002d04:	00001388 	.word	0x00001388
 8002d08:	ffcfffff 	.word	0xffcfffff
 8002d0c:	efffffff 	.word	0xefffffff
 8002d10:	fffff3ff 	.word	0xfffff3ff
 8002d14:	ffffcfff 	.word	0xffffcfff
 8002d18:	fff3ffff 	.word	0xfff3ffff

08002d1c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e08e      	b.n	8002e4c <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2221      	movs	r2, #33	; 0x21
 8002d32:	5c9b      	ldrb	r3, [r3, r2]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d107      	bne.n	8002d4a <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	2100      	movs	r1, #0
 8002d40:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	0018      	movs	r0, r3
 8002d46:	f7fe f9bd 	bl	80010c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2221      	movs	r2, #33	; 0x21
 8002d4e:	2102      	movs	r1, #2
 8002d50:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	22ca      	movs	r2, #202	; 0xca
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2253      	movs	r2, #83	; 0x53
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f000 faba 	bl	80032de <RTC_EnterInitMode>
 8002d6a:	1e03      	subs	r3, r0, #0
 8002d6c:	d009      	beq.n	8002d82 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	22ff      	movs	r2, #255	; 0xff
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2221      	movs	r2, #33	; 0x21
 8002d7a:	2104      	movs	r1, #4
 8002d7c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e064      	b.n	8002e4c <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4931      	ldr	r1, [pc, #196]	; (8002e54 <HAL_RTC_Init+0x138>)
 8002d8e:	400a      	ands	r2, r1
 8002d90:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6899      	ldr	r1, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	68d2      	ldr	r2, [r2, #12]
 8002db8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6919      	ldr	r1, [r3, #16]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	041a      	lsls	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2180      	movs	r1, #128	; 0x80
 8002dda:	438a      	bics	r2, r1
 8002ddc:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2103      	movs	r1, #3
 8002dea:	438a      	bics	r2, r1
 8002dec:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	69da      	ldr	r2, [r3, #28]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d113      	bne.n	8002e3a <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f000 fa3b 	bl	8003290 <HAL_RTC_WaitForSynchro>
 8002e1a:	1e03      	subs	r3, r0, #0
 8002e1c:	d00d      	beq.n	8002e3a <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	22ff      	movs	r2, #255	; 0xff
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2221      	movs	r2, #33	; 0x21
 8002e2a:	2104      	movs	r1, #4
 8002e2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	2100      	movs	r1, #0
 8002e34:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e008      	b.n	8002e4c <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	22ff      	movs	r2, #255	; 0xff
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2221      	movs	r2, #33	; 0x21
 8002e46:	2101      	movs	r1, #1
 8002e48:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
  }
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b002      	add	sp, #8
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	ff8fffbf 	.word	0xff8fffbf

08002e58 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e58:	b590      	push	{r4, r7, lr}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	5c9b      	ldrb	r3, [r3, r2]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_RTC_SetTime+0x1a>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e0ad      	b.n	8002fce <HAL_RTC_SetTime+0x176>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	2101      	movs	r1, #1
 8002e78:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2221      	movs	r2, #33	; 0x21
 8002e7e:	2102      	movs	r1, #2
 8002e80:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d125      	bne.n	8002ed4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2240      	movs	r2, #64	; 0x40
 8002e90:	4013      	ands	r3, r2
 8002e92:	d102      	bne.n	8002e9a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2200      	movs	r2, #0
 8002e98:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f000 fa47 	bl	8003332 <RTC_ByteToBcd2>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	785b      	ldrb	r3, [r3, #1]
 8002eac:	0018      	movs	r0, r3
 8002eae:	f000 fa40 	bl	8003332 <RTC_ByteToBcd2>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002eb6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	789b      	ldrb	r3, [r3, #2]
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f000 fa38 	bl	8003332 <RTC_ByteToBcd2>
 8002ec2:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002ec4:	0022      	movs	r2, r4
 8002ec6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	78db      	ldrb	r3, [r3, #3]
 8002ecc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	e017      	b.n	8002f04 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	2240      	movs	r2, #64	; 0x40
 8002edc:	4013      	ands	r3, r2
 8002ede:	d102      	bne.n	8002ee6 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	785b      	ldrb	r3, [r3, #1]
 8002ef0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002ef2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002ef8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	78db      	ldrb	r3, [r3, #3]
 8002efe:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	22ca      	movs	r2, #202	; 0xca
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2253      	movs	r2, #83	; 0x53
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	0018      	movs	r0, r3
 8002f18:	f000 f9e1 	bl	80032de <RTC_EnterInitMode>
 8002f1c:	1e03      	subs	r3, r0, #0
 8002f1e:	d00d      	beq.n	8002f3c <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	22ff      	movs	r2, #255	; 0xff
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2221      	movs	r2, #33	; 0x21
 8002f2c:	2104      	movs	r1, #4
 8002f2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	2100      	movs	r1, #0
 8002f36:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e048      	b.n	8002fce <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4925      	ldr	r1, [pc, #148]	; (8002fd8 <HAL_RTC_SetTime+0x180>)
 8002f44:	400a      	ands	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4922      	ldr	r1, [pc, #136]	; (8002fdc <HAL_RTC_SetTime+0x184>)
 8002f54:	400a      	ands	r2, r1
 8002f56:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6899      	ldr	r1, [r3, #8]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2180      	movs	r1, #128	; 0x80
 8002f7c:	438a      	bics	r2, r1
 8002f7e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2220      	movs	r2, #32
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d113      	bne.n	8002fb4 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f000 f97e 	bl	8003290 <HAL_RTC_WaitForSynchro>
 8002f94:	1e03      	subs	r3, r0, #0
 8002f96:	d00d      	beq.n	8002fb4 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	22ff      	movs	r2, #255	; 0xff
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2221      	movs	r2, #33	; 0x21
 8002fa4:	2104      	movs	r1, #4
 8002fa6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	2100      	movs	r1, #0
 8002fae:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e00c      	b.n	8002fce <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	22ff      	movs	r2, #255	; 0xff
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2221      	movs	r2, #33	; 0x21
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	2100      	movs	r1, #0
 8002fca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
  }
}
 8002fce:	0018      	movs	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	b007      	add	sp, #28
 8002fd4:	bd90      	pop	{r4, r7, pc}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	007f7f7f 	.word	0x007f7f7f
 8002fdc:	fffbffff 	.word	0xfffbffff

08002fe0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	045b      	lsls	r3, r3, #17
 8002ffe:	0c5a      	lsrs	r2, r3, #17
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a22      	ldr	r2, [pc, #136]	; (8003094 <HAL_RTC_GetTime+0xb4>)
 800300c:	4013      	ands	r3, r2
 800300e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	0c1b      	lsrs	r3, r3, #16
 8003014:	b2db      	uxtb	r3, r3
 8003016:	223f      	movs	r2, #63	; 0x3f
 8003018:	4013      	ands	r3, r2
 800301a:	b2da      	uxtb	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	b2db      	uxtb	r3, r3
 8003026:	227f      	movs	r2, #127	; 0x7f
 8003028:	4013      	ands	r3, r2
 800302a:	b2da      	uxtb	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	227f      	movs	r2, #127	; 0x7f
 8003036:	4013      	ands	r3, r2
 8003038:	b2da      	uxtb	r2, r3
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	0c1b      	lsrs	r3, r3, #16
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2240      	movs	r2, #64	; 0x40
 8003046:	4013      	ands	r3, r2
 8003048:	b2da      	uxtb	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d11a      	bne.n	800308a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	0018      	movs	r0, r3
 800305a:	f000 f992 	bl	8003382 <RTC_Bcd2ToByte>
 800305e:	0003      	movs	r3, r0
 8003060:	001a      	movs	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	785b      	ldrb	r3, [r3, #1]
 800306a:	0018      	movs	r0, r3
 800306c:	f000 f989 	bl	8003382 <RTC_Bcd2ToByte>
 8003070:	0003      	movs	r3, r0
 8003072:	001a      	movs	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	789b      	ldrb	r3, [r3, #2]
 800307c:	0018      	movs	r0, r3
 800307e:	f000 f980 	bl	8003382 <RTC_Bcd2ToByte>
 8003082:	0003      	movs	r3, r0
 8003084:	001a      	movs	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b006      	add	sp, #24
 8003092:	bd80      	pop	{r7, pc}
 8003094:	007f7f7f 	.word	0x007f7f7f

08003098 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2220      	movs	r2, #32
 80030a8:	5c9b      	ldrb	r3, [r3, r2]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_RTC_SetDate+0x1a>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e099      	b.n	80031e6 <HAL_RTC_SetDate+0x14e>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2220      	movs	r2, #32
 80030b6:	2101      	movs	r1, #1
 80030b8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2221      	movs	r2, #33	; 0x21
 80030be:	2102      	movs	r1, #2
 80030c0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10e      	bne.n	80030e6 <HAL_RTC_SetDate+0x4e>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	785b      	ldrb	r3, [r3, #1]
 80030cc:	001a      	movs	r2, r3
 80030ce:	2310      	movs	r3, #16
 80030d0:	4013      	ands	r3, r2
 80030d2:	d008      	beq.n	80030e6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	785b      	ldrb	r3, [r3, #1]
 80030d8:	2210      	movs	r2, #16
 80030da:	4393      	bics	r3, r2
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	330a      	adds	r3, #10
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d11c      	bne.n	8003126 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	78db      	ldrb	r3, [r3, #3]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f000 f91e 	bl	8003332 <RTC_ByteToBcd2>
 80030f6:	0003      	movs	r3, r0
 80030f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	0018      	movs	r0, r3
 8003100:	f000 f917 	bl	8003332 <RTC_ByteToBcd2>
 8003104:	0003      	movs	r3, r0
 8003106:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003108:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	789b      	ldrb	r3, [r3, #2]
 800310e:	0018      	movs	r0, r3
 8003110:	f000 f90f 	bl	8003332 <RTC_ByteToBcd2>
 8003114:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003116:	0022      	movs	r2, r4
 8003118:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	e00e      	b.n	8003144 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	78db      	ldrb	r3, [r3, #3]
 800312a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	785b      	ldrb	r3, [r3, #1]
 8003130:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003132:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003138:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	22ca      	movs	r2, #202	; 0xca
 800314a:	625a      	str	r2, [r3, #36]	; 0x24
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2253      	movs	r2, #83	; 0x53
 8003152:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	0018      	movs	r0, r3
 8003158:	f000 f8c1 	bl	80032de <RTC_EnterInitMode>
 800315c:	1e03      	subs	r3, r0, #0
 800315e:	d00d      	beq.n	800317c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	22ff      	movs	r2, #255	; 0xff
 8003166:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2221      	movs	r2, #33	; 0x21
 800316c:	2104      	movs	r1, #4
 800316e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	2100      	movs	r1, #0
 8003176:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e034      	b.n	80031e6 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	491b      	ldr	r1, [pc, #108]	; (80031f0 <HAL_RTC_SetDate+0x158>)
 8003184:	400a      	ands	r2, r1
 8003186:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2180      	movs	r1, #128	; 0x80
 8003194:	438a      	bics	r2, r1
 8003196:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2220      	movs	r2, #32
 80031a0:	4013      	ands	r3, r2
 80031a2:	d113      	bne.n	80031cc <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	0018      	movs	r0, r3
 80031a8:	f000 f872 	bl	8003290 <HAL_RTC_WaitForSynchro>
 80031ac:	1e03      	subs	r3, r0, #0
 80031ae:	d00d      	beq.n	80031cc <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	22ff      	movs	r2, #255	; 0xff
 80031b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2221      	movs	r2, #33	; 0x21
 80031bc:	2104      	movs	r1, #4
 80031be:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	2100      	movs	r1, #0
 80031c6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e00c      	b.n	80031e6 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	22ff      	movs	r2, #255	; 0xff
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2221      	movs	r2, #33	; 0x21
 80031d8:	2101      	movs	r1, #1
 80031da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	2100      	movs	r1, #0
 80031e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031e4:	2300      	movs	r3, #0
  }
}
 80031e6:	0018      	movs	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b007      	add	sp, #28
 80031ec:	bd90      	pop	{r4, r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	00ffff3f 	.word	0x00ffff3f

080031f4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4a21      	ldr	r2, [pc, #132]	; (800328c <HAL_RTC_GetDate+0x98>)
 8003208:	4013      	ands	r3, r2
 800320a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	0c1b      	lsrs	r3, r3, #16
 8003210:	b2da      	uxtb	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	0a1b      	lsrs	r3, r3, #8
 800321a:	b2db      	uxtb	r3, r3
 800321c:	221f      	movs	r2, #31
 800321e:	4013      	ands	r3, r2
 8003220:	b2da      	uxtb	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	223f      	movs	r2, #63	; 0x3f
 800322c:	4013      	ands	r3, r2
 800322e:	b2da      	uxtb	r2, r3
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	0b5b      	lsrs	r3, r3, #13
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2207      	movs	r2, #7
 800323c:	4013      	ands	r3, r2
 800323e:	b2da      	uxtb	r2, r3
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d11a      	bne.n	8003280 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	78db      	ldrb	r3, [r3, #3]
 800324e:	0018      	movs	r0, r3
 8003250:	f000 f897 	bl	8003382 <RTC_Bcd2ToByte>
 8003254:	0003      	movs	r3, r0
 8003256:	001a      	movs	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	785b      	ldrb	r3, [r3, #1]
 8003260:	0018      	movs	r0, r3
 8003262:	f000 f88e 	bl	8003382 <RTC_Bcd2ToByte>
 8003266:	0003      	movs	r3, r0
 8003268:	001a      	movs	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	789b      	ldrb	r3, [r3, #2]
 8003272:	0018      	movs	r0, r3
 8003274:	f000 f885 	bl	8003382 <RTC_Bcd2ToByte>
 8003278:	0003      	movs	r3, r0
 800327a:	001a      	movs	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	0018      	movs	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	b006      	add	sp, #24
 8003288:	bd80      	pop	{r7, pc}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	00ffff3f 	.word	0x00ffff3f

08003290 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	21a0      	movs	r1, #160	; 0xa0
 80032a4:	438a      	bics	r2, r1
 80032a6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80032a8:	f7fe f816 	bl	80012d8 <HAL_GetTick>
 80032ac:	0003      	movs	r3, r0
 80032ae:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032b0:	e00a      	b.n	80032c8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032b2:	f7fe f811 	bl	80012d8 <HAL_GetTick>
 80032b6:	0002      	movs	r2, r0
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1ad2      	subs	r2, r2, r3
 80032bc:	23fa      	movs	r3, #250	; 0xfa
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d901      	bls.n	80032c8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e006      	b.n	80032d6 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	4013      	ands	r3, r2
 80032d2:	d0ee      	beq.n	80032b2 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	0018      	movs	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	b004      	add	sp, #16
 80032dc:	bd80      	pop	{r7, pc}

080032de <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	2240      	movs	r2, #64	; 0x40
 80032ee:	4013      	ands	r3, r2
 80032f0:	d11a      	bne.n	8003328 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2201      	movs	r2, #1
 80032f8:	4252      	negs	r2, r2
 80032fa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80032fc:	f7fd ffec 	bl	80012d8 <HAL_GetTick>
 8003300:	0003      	movs	r3, r0
 8003302:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003304:	e00a      	b.n	800331c <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003306:	f7fd ffe7 	bl	80012d8 <HAL_GetTick>
 800330a:	0002      	movs	r2, r0
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1ad2      	subs	r2, r2, r3
 8003310:	23fa      	movs	r3, #250	; 0xfa
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	429a      	cmp	r2, r3
 8003316:	d901      	bls.n	800331c <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e006      	b.n	800332a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2240      	movs	r2, #64	; 0x40
 8003324:	4013      	ands	r3, r2
 8003326:	d0ee      	beq.n	8003306 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	0018      	movs	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	b004      	add	sp, #16
 8003330:	bd80      	pop	{r7, pc}

08003332 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	0002      	movs	r2, r0
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8003342:	230b      	movs	r3, #11
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	1dfa      	adds	r2, r7, #7
 8003348:	7812      	ldrb	r2, [r2, #0]
 800334a:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 800334c:	e008      	b.n	8003360 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3301      	adds	r3, #1
 8003352:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8003354:	220b      	movs	r2, #11
 8003356:	18bb      	adds	r3, r7, r2
 8003358:	18ba      	adds	r2, r7, r2
 800335a:	7812      	ldrb	r2, [r2, #0]
 800335c:	3a0a      	subs	r2, #10
 800335e:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8003360:	210b      	movs	r1, #11
 8003362:	187b      	adds	r3, r7, r1
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b09      	cmp	r3, #9
 8003368:	d8f1      	bhi.n	800334e <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	b2da      	uxtb	r2, r3
 8003372:	187b      	adds	r3, r7, r1
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	4313      	orrs	r3, r2
 8003378:	b2db      	uxtb	r3, r3
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b004      	add	sp, #16
 8003380:	bd80      	pop	{r7, pc}

08003382 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	0002      	movs	r2, r0
 800338a:	1dfb      	adds	r3, r7, #7
 800338c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800338e:	1dfb      	adds	r3, r7, #7
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	b2db      	uxtb	r3, r3
 8003396:	001a      	movs	r2, r3
 8003398:	0013      	movs	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	189b      	adds	r3, r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	1dfb      	adds	r3, r7, #7
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	210f      	movs	r1, #15
 80033ac:	400b      	ands	r3, r1
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	18d3      	adds	r3, r2, r3
 80033b2:	b2db      	uxtb	r3, r3
}
 80033b4:	0018      	movs	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b004      	add	sp, #16
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e044      	b.n	8003458 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d107      	bne.n	80033e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2274      	movs	r2, #116	; 0x74
 80033da:	2100      	movs	r1, #0
 80033dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	0018      	movs	r0, r3
 80033e2:	f7fd fe87 	bl	80010f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2224      	movs	r2, #36	; 0x24
 80033ea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2101      	movs	r1, #1
 80033f8:	438a      	bics	r2, r1
 80033fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	0018      	movs	r0, r3
 8003400:	f000 f830 	bl	8003464 <UART_SetConfig>
 8003404:	0003      	movs	r3, r0
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e024      	b.n	8003458 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	0018      	movs	r0, r3
 800341a:	f000 fa85 	bl	8003928 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	490d      	ldr	r1, [pc, #52]	; (8003460 <HAL_UART_Init+0xa4>)
 800342a:	400a      	ands	r2, r1
 800342c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	212a      	movs	r1, #42	; 0x2a
 800343a:	438a      	bics	r2, r1
 800343c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2101      	movs	r1, #1
 800344a:	430a      	orrs	r2, r1
 800344c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	0018      	movs	r0, r3
 8003452:	f000 fb1d 	bl	8003a90 <UART_CheckIdleState>
 8003456:	0003      	movs	r3, r0
}
 8003458:	0018      	movs	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	b002      	add	sp, #8
 800345e:	bd80      	pop	{r7, pc}
 8003460:	ffffb7ff 	.word	0xffffb7ff

08003464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003464:	b5b0      	push	{r4, r5, r7, lr}
 8003466:	b08e      	sub	sp, #56	; 0x38
 8003468:	af00      	add	r7, sp, #0
 800346a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800346c:	231a      	movs	r3, #26
 800346e:	2218      	movs	r2, #24
 8003470:	4694      	mov	ip, r2
 8003472:	44bc      	add	ip, r7
 8003474:	4463      	add	r3, ip
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	431a      	orrs	r2, r3
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	431a      	orrs	r2, r3
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	4313      	orrs	r3, r2
 8003490:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4abc      	ldr	r2, [pc, #752]	; (800378c <UART_SetConfig+0x328>)
 800349a:	4013      	ands	r3, r2
 800349c:	0019      	movs	r1, r3
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4ab8      	ldr	r2, [pc, #736]	; (8003790 <UART_SetConfig+0x32c>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4ab2      	ldr	r2, [pc, #712]	; (8003794 <UART_SetConfig+0x330>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d004      	beq.n	80034da <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	6a1b      	ldr	r3, [r3, #32]
 80034d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034d6:	4313      	orrs	r3, r2
 80034d8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	4aad      	ldr	r2, [pc, #692]	; (8003798 <UART_SetConfig+0x334>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	0019      	movs	r1, r3
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034ec:	430a      	orrs	r2, r1
 80034ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4aa9      	ldr	r2, [pc, #676]	; (800379c <UART_SetConfig+0x338>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d136      	bne.n	8003568 <UART_SetConfig+0x104>
 80034fa:	4ba9      	ldr	r3, [pc, #676]	; (80037a0 <UART_SetConfig+0x33c>)
 80034fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fe:	220c      	movs	r2, #12
 8003500:	4013      	ands	r3, r2
 8003502:	2b0c      	cmp	r3, #12
 8003504:	d020      	beq.n	8003548 <UART_SetConfig+0xe4>
 8003506:	d827      	bhi.n	8003558 <UART_SetConfig+0xf4>
 8003508:	2b08      	cmp	r3, #8
 800350a:	d00d      	beq.n	8003528 <UART_SetConfig+0xc4>
 800350c:	d824      	bhi.n	8003558 <UART_SetConfig+0xf4>
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <UART_SetConfig+0xb4>
 8003512:	2b04      	cmp	r3, #4
 8003514:	d010      	beq.n	8003538 <UART_SetConfig+0xd4>
 8003516:	e01f      	b.n	8003558 <UART_SetConfig+0xf4>
 8003518:	231b      	movs	r3, #27
 800351a:	2218      	movs	r2, #24
 800351c:	4694      	mov	ip, r2
 800351e:	44bc      	add	ip, r7
 8003520:	4463      	add	r3, ip
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	e06f      	b.n	8003608 <UART_SetConfig+0x1a4>
 8003528:	231b      	movs	r3, #27
 800352a:	2218      	movs	r2, #24
 800352c:	4694      	mov	ip, r2
 800352e:	44bc      	add	ip, r7
 8003530:	4463      	add	r3, ip
 8003532:	2202      	movs	r2, #2
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	e067      	b.n	8003608 <UART_SetConfig+0x1a4>
 8003538:	231b      	movs	r3, #27
 800353a:	2218      	movs	r2, #24
 800353c:	4694      	mov	ip, r2
 800353e:	44bc      	add	ip, r7
 8003540:	4463      	add	r3, ip
 8003542:	2204      	movs	r2, #4
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	e05f      	b.n	8003608 <UART_SetConfig+0x1a4>
 8003548:	231b      	movs	r3, #27
 800354a:	2218      	movs	r2, #24
 800354c:	4694      	mov	ip, r2
 800354e:	44bc      	add	ip, r7
 8003550:	4463      	add	r3, ip
 8003552:	2208      	movs	r2, #8
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	e057      	b.n	8003608 <UART_SetConfig+0x1a4>
 8003558:	231b      	movs	r3, #27
 800355a:	2218      	movs	r2, #24
 800355c:	4694      	mov	ip, r2
 800355e:	44bc      	add	ip, r7
 8003560:	4463      	add	r3, ip
 8003562:	2210      	movs	r2, #16
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	e04f      	b.n	8003608 <UART_SetConfig+0x1a4>
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a89      	ldr	r2, [pc, #548]	; (8003794 <UART_SetConfig+0x330>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d143      	bne.n	80035fa <UART_SetConfig+0x196>
 8003572:	4b8b      	ldr	r3, [pc, #556]	; (80037a0 <UART_SetConfig+0x33c>)
 8003574:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003576:	23c0      	movs	r3, #192	; 0xc0
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	4013      	ands	r3, r2
 800357c:	22c0      	movs	r2, #192	; 0xc0
 800357e:	0112      	lsls	r2, r2, #4
 8003580:	4293      	cmp	r3, r2
 8003582:	d02a      	beq.n	80035da <UART_SetConfig+0x176>
 8003584:	22c0      	movs	r2, #192	; 0xc0
 8003586:	0112      	lsls	r2, r2, #4
 8003588:	4293      	cmp	r3, r2
 800358a:	d82e      	bhi.n	80035ea <UART_SetConfig+0x186>
 800358c:	2280      	movs	r2, #128	; 0x80
 800358e:	0112      	lsls	r2, r2, #4
 8003590:	4293      	cmp	r3, r2
 8003592:	d012      	beq.n	80035ba <UART_SetConfig+0x156>
 8003594:	2280      	movs	r2, #128	; 0x80
 8003596:	0112      	lsls	r2, r2, #4
 8003598:	4293      	cmp	r3, r2
 800359a:	d826      	bhi.n	80035ea <UART_SetConfig+0x186>
 800359c:	2b00      	cmp	r3, #0
 800359e:	d004      	beq.n	80035aa <UART_SetConfig+0x146>
 80035a0:	2280      	movs	r2, #128	; 0x80
 80035a2:	00d2      	lsls	r2, r2, #3
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d010      	beq.n	80035ca <UART_SetConfig+0x166>
 80035a8:	e01f      	b.n	80035ea <UART_SetConfig+0x186>
 80035aa:	231b      	movs	r3, #27
 80035ac:	2218      	movs	r2, #24
 80035ae:	4694      	mov	ip, r2
 80035b0:	44bc      	add	ip, r7
 80035b2:	4463      	add	r3, ip
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
 80035b8:	e026      	b.n	8003608 <UART_SetConfig+0x1a4>
 80035ba:	231b      	movs	r3, #27
 80035bc:	2218      	movs	r2, #24
 80035be:	4694      	mov	ip, r2
 80035c0:	44bc      	add	ip, r7
 80035c2:	4463      	add	r3, ip
 80035c4:	2202      	movs	r2, #2
 80035c6:	701a      	strb	r2, [r3, #0]
 80035c8:	e01e      	b.n	8003608 <UART_SetConfig+0x1a4>
 80035ca:	231b      	movs	r3, #27
 80035cc:	2218      	movs	r2, #24
 80035ce:	4694      	mov	ip, r2
 80035d0:	44bc      	add	ip, r7
 80035d2:	4463      	add	r3, ip
 80035d4:	2204      	movs	r2, #4
 80035d6:	701a      	strb	r2, [r3, #0]
 80035d8:	e016      	b.n	8003608 <UART_SetConfig+0x1a4>
 80035da:	231b      	movs	r3, #27
 80035dc:	2218      	movs	r2, #24
 80035de:	4694      	mov	ip, r2
 80035e0:	44bc      	add	ip, r7
 80035e2:	4463      	add	r3, ip
 80035e4:	2208      	movs	r2, #8
 80035e6:	701a      	strb	r2, [r3, #0]
 80035e8:	e00e      	b.n	8003608 <UART_SetConfig+0x1a4>
 80035ea:	231b      	movs	r3, #27
 80035ec:	2218      	movs	r2, #24
 80035ee:	4694      	mov	ip, r2
 80035f0:	44bc      	add	ip, r7
 80035f2:	4463      	add	r3, ip
 80035f4:	2210      	movs	r2, #16
 80035f6:	701a      	strb	r2, [r3, #0]
 80035f8:	e006      	b.n	8003608 <UART_SetConfig+0x1a4>
 80035fa:	231b      	movs	r3, #27
 80035fc:	2218      	movs	r2, #24
 80035fe:	4694      	mov	ip, r2
 8003600:	44bc      	add	ip, r7
 8003602:	4463      	add	r3, ip
 8003604:	2210      	movs	r2, #16
 8003606:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a61      	ldr	r2, [pc, #388]	; (8003794 <UART_SetConfig+0x330>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d000      	beq.n	8003614 <UART_SetConfig+0x1b0>
 8003612:	e088      	b.n	8003726 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003614:	231b      	movs	r3, #27
 8003616:	2218      	movs	r2, #24
 8003618:	4694      	mov	ip, r2
 800361a:	44bc      	add	ip, r7
 800361c:	4463      	add	r3, ip
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b08      	cmp	r3, #8
 8003622:	d01d      	beq.n	8003660 <UART_SetConfig+0x1fc>
 8003624:	dc20      	bgt.n	8003668 <UART_SetConfig+0x204>
 8003626:	2b04      	cmp	r3, #4
 8003628:	d015      	beq.n	8003656 <UART_SetConfig+0x1f2>
 800362a:	dc1d      	bgt.n	8003668 <UART_SetConfig+0x204>
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <UART_SetConfig+0x1d2>
 8003630:	2b02      	cmp	r3, #2
 8003632:	d005      	beq.n	8003640 <UART_SetConfig+0x1dc>
 8003634:	e018      	b.n	8003668 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003636:	f7ff fa1f 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 800363a:	0003      	movs	r3, r0
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800363e:	e01d      	b.n	800367c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003640:	4b57      	ldr	r3, [pc, #348]	; (80037a0 <UART_SetConfig+0x33c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2210      	movs	r2, #16
 8003646:	4013      	ands	r3, r2
 8003648:	d002      	beq.n	8003650 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800364a:	4b56      	ldr	r3, [pc, #344]	; (80037a4 <UART_SetConfig+0x340>)
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800364e:	e015      	b.n	800367c <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8003650:	4b55      	ldr	r3, [pc, #340]	; (80037a8 <UART_SetConfig+0x344>)
 8003652:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003654:	e012      	b.n	800367c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003656:	f7ff f95f 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 800365a:	0003      	movs	r3, r0
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800365e:	e00d      	b.n	800367c <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003666:	e009      	b.n	800367c <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800366c:	231a      	movs	r3, #26
 800366e:	2218      	movs	r2, #24
 8003670:	4694      	mov	ip, r2
 8003672:	44bc      	add	ip, r7
 8003674:	4463      	add	r3, ip
 8003676:	2201      	movs	r2, #1
 8003678:	701a      	strb	r2, [r3, #0]
        break;
 800367a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367e:	2b00      	cmp	r3, #0
 8003680:	d100      	bne.n	8003684 <UART_SetConfig+0x220>
 8003682:	e139      	b.n	80038f8 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	0013      	movs	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	189b      	adds	r3, r3, r2
 800368e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003690:	429a      	cmp	r2, r3
 8003692:	d305      	bcc.n	80036a0 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800369a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800369c:	429a      	cmp	r2, r3
 800369e:	d907      	bls.n	80036b0 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 80036a0:	231a      	movs	r3, #26
 80036a2:	2218      	movs	r2, #24
 80036a4:	4694      	mov	ip, r2
 80036a6:	44bc      	add	ip, r7
 80036a8:	4463      	add	r3, ip
 80036aa:	2201      	movs	r2, #1
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	e123      	b.n	80038f8 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	6939      	ldr	r1, [r7, #16]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	000b      	movs	r3, r1
 80036be:	0e1b      	lsrs	r3, r3, #24
 80036c0:	0010      	movs	r0, r2
 80036c2:	0205      	lsls	r5, r0, #8
 80036c4:	431d      	orrs	r5, r3
 80036c6:	000b      	movs	r3, r1
 80036c8:	021c      	lsls	r4, r3, #8
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	60bb      	str	r3, [r7, #8]
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	68b8      	ldr	r0, [r7, #8]
 80036d8:	68f9      	ldr	r1, [r7, #12]
 80036da:	1900      	adds	r0, r0, r4
 80036dc:	4169      	adcs	r1, r5
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	2300      	movs	r3, #0
 80036e6:	607b      	str	r3, [r7, #4]
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f7fc fe82 	bl	80003f4 <__aeabi_uldivmod>
 80036f0:	0002      	movs	r2, r0
 80036f2:	000b      	movs	r3, r1
 80036f4:	0013      	movs	r3, r2
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036fa:	23c0      	movs	r3, #192	; 0xc0
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	429a      	cmp	r2, r3
 8003700:	d309      	bcc.n	8003716 <UART_SetConfig+0x2b2>
 8003702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003704:	2380      	movs	r3, #128	; 0x80
 8003706:	035b      	lsls	r3, r3, #13
 8003708:	429a      	cmp	r2, r3
 800370a:	d204      	bcs.n	8003716 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003712:	60da      	str	r2, [r3, #12]
 8003714:	e0f0      	b.n	80038f8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003716:	231a      	movs	r3, #26
 8003718:	2218      	movs	r2, #24
 800371a:	4694      	mov	ip, r2
 800371c:	44bc      	add	ip, r7
 800371e:	4463      	add	r3, ip
 8003720:	2201      	movs	r2, #1
 8003722:	701a      	strb	r2, [r3, #0]
 8003724:	e0e8      	b.n	80038f8 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	69da      	ldr	r2, [r3, #28]
 800372a:	2380      	movs	r3, #128	; 0x80
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	429a      	cmp	r2, r3
 8003730:	d000      	beq.n	8003734 <UART_SetConfig+0x2d0>
 8003732:	e087      	b.n	8003844 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8003734:	231b      	movs	r3, #27
 8003736:	2218      	movs	r2, #24
 8003738:	4694      	mov	ip, r2
 800373a:	44bc      	add	ip, r7
 800373c:	4463      	add	r3, ip
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d835      	bhi.n	80037b0 <UART_SetConfig+0x34c>
 8003744:	009a      	lsls	r2, r3, #2
 8003746:	4b19      	ldr	r3, [pc, #100]	; (80037ac <UART_SetConfig+0x348>)
 8003748:	18d3      	adds	r3, r2, r3
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800374e:	f7ff f993 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 8003752:	0003      	movs	r3, r0
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003756:	e035      	b.n	80037c4 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003758:	f7ff f9a4 	bl	8002aa4 <HAL_RCC_GetPCLK2Freq>
 800375c:	0003      	movs	r3, r0
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003760:	e030      	b.n	80037c4 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003762:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <UART_SetConfig+0x33c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2210      	movs	r2, #16
 8003768:	4013      	ands	r3, r2
 800376a:	d002      	beq.n	8003772 <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800376c:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <UART_SetConfig+0x340>)
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003770:	e028      	b.n	80037c4 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <UART_SetConfig+0x344>)
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003776:	e025      	b.n	80037c4 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003778:	f7ff f8ce 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 800377c:	0003      	movs	r3, r0
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003780:	e020      	b.n	80037c4 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003782:	2380      	movs	r3, #128	; 0x80
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003788:	e01c      	b.n	80037c4 <UART_SetConfig+0x360>
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	efff69f3 	.word	0xefff69f3
 8003790:	ffffcfff 	.word	0xffffcfff
 8003794:	40004800 	.word	0x40004800
 8003798:	fffff4ff 	.word	0xfffff4ff
 800379c:	40004400 	.word	0x40004400
 80037a0:	40021000 	.word	0x40021000
 80037a4:	003d0900 	.word	0x003d0900
 80037a8:	00f42400 	.word	0x00f42400
 80037ac:	08003d3c 	.word	0x08003d3c
      default:
        pclk = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80037b4:	231a      	movs	r3, #26
 80037b6:	2218      	movs	r2, #24
 80037b8:	4694      	mov	ip, r2
 80037ba:	44bc      	add	ip, r7
 80037bc:	4463      	add	r3, ip
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
        break;
 80037c2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d100      	bne.n	80037cc <UART_SetConfig+0x368>
 80037ca:	e095      	b.n	80038f8 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ce:	005a      	lsls	r2, r3, #1
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	085b      	lsrs	r3, r3, #1
 80037d6:	18d2      	adds	r2, r2, r3
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	0019      	movs	r1, r3
 80037de:	0010      	movs	r0, r2
 80037e0:	f7fc fc92 	bl	8000108 <__udivsi3>
 80037e4:	0003      	movs	r3, r0
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ec:	2b0f      	cmp	r3, #15
 80037ee:	d921      	bls.n	8003834 <UART_SetConfig+0x3d0>
 80037f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037f2:	2380      	movs	r3, #128	; 0x80
 80037f4:	025b      	lsls	r3, r3, #9
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d21c      	bcs.n	8003834 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	200e      	movs	r0, #14
 8003800:	2418      	movs	r4, #24
 8003802:	193b      	adds	r3, r7, r4
 8003804:	181b      	adds	r3, r3, r0
 8003806:	210f      	movs	r1, #15
 8003808:	438a      	bics	r2, r1
 800380a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800380c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	b29b      	uxth	r3, r3
 8003812:	2207      	movs	r2, #7
 8003814:	4013      	ands	r3, r2
 8003816:	b299      	uxth	r1, r3
 8003818:	193b      	adds	r3, r7, r4
 800381a:	181b      	adds	r3, r3, r0
 800381c:	193a      	adds	r2, r7, r4
 800381e:	1812      	adds	r2, r2, r0
 8003820:	8812      	ldrh	r2, [r2, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	193a      	adds	r2, r7, r4
 800382c:	1812      	adds	r2, r2, r0
 800382e:	8812      	ldrh	r2, [r2, #0]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	e061      	b.n	80038f8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003834:	231a      	movs	r3, #26
 8003836:	2218      	movs	r2, #24
 8003838:	4694      	mov	ip, r2
 800383a:	44bc      	add	ip, r7
 800383c:	4463      	add	r3, ip
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	e059      	b.n	80038f8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003844:	231b      	movs	r3, #27
 8003846:	2218      	movs	r2, #24
 8003848:	4694      	mov	ip, r2
 800384a:	44bc      	add	ip, r7
 800384c:	4463      	add	r3, ip
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b08      	cmp	r3, #8
 8003852:	d822      	bhi.n	800389a <UART_SetConfig+0x436>
 8003854:	009a      	lsls	r2, r3, #2
 8003856:	4b30      	ldr	r3, [pc, #192]	; (8003918 <UART_SetConfig+0x4b4>)
 8003858:	18d3      	adds	r3, r2, r3
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800385e:	f7ff f90b 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 8003862:	0003      	movs	r3, r0
 8003864:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003866:	e022      	b.n	80038ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003868:	f7ff f91c 	bl	8002aa4 <HAL_RCC_GetPCLK2Freq>
 800386c:	0003      	movs	r3, r0
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003870:	e01d      	b.n	80038ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003872:	4b2a      	ldr	r3, [pc, #168]	; (800391c <UART_SetConfig+0x4b8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2210      	movs	r2, #16
 8003878:	4013      	ands	r3, r2
 800387a:	d002      	beq.n	8003882 <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800387c:	4b28      	ldr	r3, [pc, #160]	; (8003920 <UART_SetConfig+0x4bc>)
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003880:	e015      	b.n	80038ae <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8003882:	4b28      	ldr	r3, [pc, #160]	; (8003924 <UART_SetConfig+0x4c0>)
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003886:	e012      	b.n	80038ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003888:	f7ff f846 	bl	8002918 <HAL_RCC_GetSysClockFreq>
 800388c:	0003      	movs	r3, r0
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003890:	e00d      	b.n	80038ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003898:	e009      	b.n	80038ae <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800389e:	231a      	movs	r3, #26
 80038a0:	2218      	movs	r2, #24
 80038a2:	4694      	mov	ip, r2
 80038a4:	44bc      	add	ip, r7
 80038a6:	4463      	add	r3, ip
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
        break;
 80038ac:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80038ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d021      	beq.n	80038f8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	085a      	lsrs	r2, r3, #1
 80038ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038bc:	18d2      	adds	r2, r2, r3
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	0019      	movs	r1, r3
 80038c4:	0010      	movs	r0, r2
 80038c6:	f7fc fc1f 	bl	8000108 <__udivsi3>
 80038ca:	0003      	movs	r3, r0
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d2:	2b0f      	cmp	r3, #15
 80038d4:	d909      	bls.n	80038ea <UART_SetConfig+0x486>
 80038d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	025b      	lsls	r3, r3, #9
 80038dc:	429a      	cmp	r2, r3
 80038de:	d204      	bcs.n	80038ea <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038e6:	60da      	str	r2, [r3, #12]
 80038e8:	e006      	b.n	80038f8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80038ea:	231a      	movs	r3, #26
 80038ec:	2218      	movs	r2, #24
 80038ee:	4694      	mov	ip, r2
 80038f0:	44bc      	add	ip, r7
 80038f2:	4463      	add	r3, ip
 80038f4:	2201      	movs	r2, #1
 80038f6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2200      	movs	r2, #0
 80038fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	2200      	movs	r2, #0
 8003902:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003904:	231a      	movs	r3, #26
 8003906:	2218      	movs	r2, #24
 8003908:	4694      	mov	ip, r2
 800390a:	44bc      	add	ip, r7
 800390c:	4463      	add	r3, ip
 800390e:	781b      	ldrb	r3, [r3, #0]
}
 8003910:	0018      	movs	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	b00e      	add	sp, #56	; 0x38
 8003916:	bdb0      	pop	{r4, r5, r7, pc}
 8003918:	08003d60 	.word	0x08003d60
 800391c:	40021000 	.word	0x40021000
 8003920:	003d0900 	.word	0x003d0900
 8003924:	00f42400 	.word	0x00f42400

08003928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	2201      	movs	r2, #1
 8003936:	4013      	ands	r3, r2
 8003938:	d00b      	beq.n	8003952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4a4a      	ldr	r2, [pc, #296]	; (8003a6c <UART_AdvFeatureConfig+0x144>)
 8003942:	4013      	ands	r3, r2
 8003944:	0019      	movs	r1, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	2202      	movs	r2, #2
 8003958:	4013      	ands	r3, r2
 800395a:	d00b      	beq.n	8003974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4a43      	ldr	r2, [pc, #268]	; (8003a70 <UART_AdvFeatureConfig+0x148>)
 8003964:	4013      	ands	r3, r2
 8003966:	0019      	movs	r1, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	2204      	movs	r2, #4
 800397a:	4013      	ands	r3, r2
 800397c:	d00b      	beq.n	8003996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4a3b      	ldr	r2, [pc, #236]	; (8003a74 <UART_AdvFeatureConfig+0x14c>)
 8003986:	4013      	ands	r3, r2
 8003988:	0019      	movs	r1, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	2208      	movs	r2, #8
 800399c:	4013      	ands	r3, r2
 800399e:	d00b      	beq.n	80039b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	4a34      	ldr	r2, [pc, #208]	; (8003a78 <UART_AdvFeatureConfig+0x150>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	0019      	movs	r1, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	2210      	movs	r2, #16
 80039be:	4013      	ands	r3, r2
 80039c0:	d00b      	beq.n	80039da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	4a2c      	ldr	r2, [pc, #176]	; (8003a7c <UART_AdvFeatureConfig+0x154>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	0019      	movs	r1, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	2220      	movs	r2, #32
 80039e0:	4013      	ands	r3, r2
 80039e2:	d00b      	beq.n	80039fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	4a25      	ldr	r2, [pc, #148]	; (8003a80 <UART_AdvFeatureConfig+0x158>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	0019      	movs	r1, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	2240      	movs	r2, #64	; 0x40
 8003a02:	4013      	ands	r3, r2
 8003a04:	d01d      	beq.n	8003a42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	4a1d      	ldr	r2, [pc, #116]	; (8003a84 <UART_AdvFeatureConfig+0x15c>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	0019      	movs	r1, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	035b      	lsls	r3, r3, #13
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d10b      	bne.n	8003a42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a15      	ldr	r2, [pc, #84]	; (8003a88 <UART_AdvFeatureConfig+0x160>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	0019      	movs	r1, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	2280      	movs	r2, #128	; 0x80
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d00b      	beq.n	8003a64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4a0e      	ldr	r2, [pc, #56]	; (8003a8c <UART_AdvFeatureConfig+0x164>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	0019      	movs	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	605a      	str	r2, [r3, #4]
  }
}
 8003a64:	46c0      	nop			; (mov r8, r8)
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b002      	add	sp, #8
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	fffdffff 	.word	0xfffdffff
 8003a70:	fffeffff 	.word	0xfffeffff
 8003a74:	fffbffff 	.word	0xfffbffff
 8003a78:	ffff7fff 	.word	0xffff7fff
 8003a7c:	ffffefff 	.word	0xffffefff
 8003a80:	ffffdfff 	.word	0xffffdfff
 8003a84:	ffefffff 	.word	0xffefffff
 8003a88:	ff9fffff 	.word	0xff9fffff
 8003a8c:	fff7ffff 	.word	0xfff7ffff

08003a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2280      	movs	r2, #128	; 0x80
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003aa0:	f7fd fc1a 	bl	80012d8 <HAL_GetTick>
 8003aa4:	0003      	movs	r3, r0
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2208      	movs	r2, #8
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d10c      	bne.n	8003ad0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2280      	movs	r2, #128	; 0x80
 8003aba:	0391      	lsls	r1, r2, #14
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4a17      	ldr	r2, [pc, #92]	; (8003b1c <UART_CheckIdleState+0x8c>)
 8003ac0:	9200      	str	r2, [sp, #0]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f000 f82c 	bl	8003b20 <UART_WaitOnFlagUntilTimeout>
 8003ac8:	1e03      	subs	r3, r0, #0
 8003aca:	d001      	beq.n	8003ad0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e021      	b.n	8003b14 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2204      	movs	r2, #4
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d10c      	bne.n	8003af8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2280      	movs	r2, #128	; 0x80
 8003ae2:	03d1      	lsls	r1, r2, #15
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4a0d      	ldr	r2, [pc, #52]	; (8003b1c <UART_CheckIdleState+0x8c>)
 8003ae8:	9200      	str	r2, [sp, #0]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f000 f818 	bl	8003b20 <UART_WaitOnFlagUntilTimeout>
 8003af0:	1e03      	subs	r3, r0, #0
 8003af2:	d001      	beq.n	8003af8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e00d      	b.n	8003b14 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2274      	movs	r2, #116	; 0x74
 8003b0e:	2100      	movs	r1, #0
 8003b10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	0018      	movs	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	b004      	add	sp, #16
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	01ffffff 	.word	0x01ffffff

08003b20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b094      	sub	sp, #80	; 0x50
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	1dfb      	adds	r3, r7, #7
 8003b2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b30:	e0a3      	b.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b34:	3301      	adds	r3, #1
 8003b36:	d100      	bne.n	8003b3a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003b38:	e09f      	b.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fd fbcd 	bl	80012d8 <HAL_GetTick>
 8003b3e:	0002      	movs	r2, r0
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d13d      	bne.n	8003bcc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b50:	f3ef 8310 	mrs	r3, PRIMASK
 8003b54:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b58:	647b      	str	r3, [r7, #68]	; 0x44
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	f383 8810 	msr	PRIMASK, r3
}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	494c      	ldr	r1, [pc, #304]	; (8003ca4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003b72:	400a      	ands	r2, r1
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b78:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	f383 8810 	msr	PRIMASK, r3
}
 8003b80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b82:	f3ef 8310 	mrs	r3, PRIMASK
 8003b86:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b92:	f383 8810 	msr	PRIMASK, r3
}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	438a      	bics	r2, r1
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bae:	f383 8810 	msr	PRIMASK, r3
}
 8003bb2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2274      	movs	r2, #116	; 0x74
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e067      	b.n	8003c9c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	d050      	beq.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	401a      	ands	r2, r3
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d146      	bne.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2280      	movs	r2, #128	; 0x80
 8003bf2:	0112      	lsls	r2, r2, #4
 8003bf4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bfa:	613b      	str	r3, [r7, #16]
  return(result);
 8003bfc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c00:	2301      	movs	r3, #1
 8003c02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f383 8810 	msr	PRIMASK, r3
}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4923      	ldr	r1, [pc, #140]	; (8003ca4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003c18:	400a      	ands	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	f383 8810 	msr	PRIMASK, r3
}
 8003c26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c28:	f3ef 8310 	mrs	r3, PRIMASK
 8003c2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003c2e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c30:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c32:	2301      	movs	r3, #1
 8003c34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	f383 8810 	msr	PRIMASK, r3
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2101      	movs	r1, #1
 8003c4a:	438a      	bics	r2, r1
 8003c4c:	609a      	str	r2, [r3, #8]
 8003c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c50:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	f383 8810 	msr	PRIMASK, r3
}
 8003c58:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2280      	movs	r2, #128	; 0x80
 8003c6a:	2120      	movs	r1, #32
 8003c6c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2274      	movs	r2, #116	; 0x74
 8003c72:	2100      	movs	r1, #0
 8003c74:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e010      	b.n	8003c9c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	4013      	ands	r3, r2
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	425a      	negs	r2, r3
 8003c8a:	4153      	adcs	r3, r2
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	001a      	movs	r2, r3
 8003c90:	1dfb      	adds	r3, r7, #7
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d100      	bne.n	8003c9a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003c98:	e74b      	b.n	8003b32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b014      	add	sp, #80	; 0x50
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	fffffe5f 	.word	0xfffffe5f

08003ca8 <__libc_init_array>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	2600      	movs	r6, #0
 8003cac:	4d0c      	ldr	r5, [pc, #48]	; (8003ce0 <__libc_init_array+0x38>)
 8003cae:	4c0d      	ldr	r4, [pc, #52]	; (8003ce4 <__libc_init_array+0x3c>)
 8003cb0:	1b64      	subs	r4, r4, r5
 8003cb2:	10a4      	asrs	r4, r4, #2
 8003cb4:	42a6      	cmp	r6, r4
 8003cb6:	d109      	bne.n	8003ccc <__libc_init_array+0x24>
 8003cb8:	2600      	movs	r6, #0
 8003cba:	f000 f821 	bl	8003d00 <_init>
 8003cbe:	4d0a      	ldr	r5, [pc, #40]	; (8003ce8 <__libc_init_array+0x40>)
 8003cc0:	4c0a      	ldr	r4, [pc, #40]	; (8003cec <__libc_init_array+0x44>)
 8003cc2:	1b64      	subs	r4, r4, r5
 8003cc4:	10a4      	asrs	r4, r4, #2
 8003cc6:	42a6      	cmp	r6, r4
 8003cc8:	d105      	bne.n	8003cd6 <__libc_init_array+0x2e>
 8003cca:	bd70      	pop	{r4, r5, r6, pc}
 8003ccc:	00b3      	lsls	r3, r6, #2
 8003cce:	58eb      	ldr	r3, [r5, r3]
 8003cd0:	4798      	blx	r3
 8003cd2:	3601      	adds	r6, #1
 8003cd4:	e7ee      	b.n	8003cb4 <__libc_init_array+0xc>
 8003cd6:	00b3      	lsls	r3, r6, #2
 8003cd8:	58eb      	ldr	r3, [r5, r3]
 8003cda:	4798      	blx	r3
 8003cdc:	3601      	adds	r6, #1
 8003cde:	e7f2      	b.n	8003cc6 <__libc_init_array+0x1e>
 8003ce0:	08003d8c 	.word	0x08003d8c
 8003ce4:	08003d8c 	.word	0x08003d8c
 8003ce8:	08003d8c 	.word	0x08003d8c
 8003cec:	08003d90 	.word	0x08003d90

08003cf0 <memset>:
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	1882      	adds	r2, r0, r2
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d100      	bne.n	8003cfa <memset+0xa>
 8003cf8:	4770      	bx	lr
 8003cfa:	7019      	strb	r1, [r3, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	e7f9      	b.n	8003cf4 <memset+0x4>

08003d00 <_init>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr

08003d0c <_fini>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d12:	bc08      	pop	{r3}
 8003d14:	469e      	mov	lr, r3
 8003d16:	4770      	bx	lr
