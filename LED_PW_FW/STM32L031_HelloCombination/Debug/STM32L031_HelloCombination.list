
STM32L031_HelloCombination.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005020  08005020  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  08005020  08005020  00015020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005028  08005028  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800502c  0800502c  0001502c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08005030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000054  08005084  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08005084  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cca8  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c07  00000000  00000000  0002cd24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002e930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  0002f3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000112dd  00000000  00000000  0002fe08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e3d1  00000000  00000000  000410e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a23f  00000000  00000000  0004f4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b96f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002818  00000000  00000000  000b9748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000054 	.word	0x20000054
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004f5c 	.word	0x08004f5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000058 	.word	0x20000058
 8000104:	08004f5c 	.word	0x08004f5c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f84c 	bl	80004c0 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	0415      	lsls	r5, r2, #16
 8000438:	0c2d      	lsrs	r5, r5, #16
 800043a:	000f      	movs	r7, r1
 800043c:	0001      	movs	r1, r0
 800043e:	002e      	movs	r6, r5
 8000440:	46c6      	mov	lr, r8
 8000442:	4684      	mov	ip, r0
 8000444:	0400      	lsls	r0, r0, #16
 8000446:	0c14      	lsrs	r4, r2, #16
 8000448:	0c00      	lsrs	r0, r0, #16
 800044a:	0c09      	lsrs	r1, r1, #16
 800044c:	4346      	muls	r6, r0
 800044e:	434d      	muls	r5, r1
 8000450:	4360      	muls	r0, r4
 8000452:	4361      	muls	r1, r4
 8000454:	1940      	adds	r0, r0, r5
 8000456:	0c34      	lsrs	r4, r6, #16
 8000458:	1824      	adds	r4, r4, r0
 800045a:	b500      	push	{lr}
 800045c:	42a5      	cmp	r5, r4
 800045e:	d903      	bls.n	8000468 <__aeabi_lmul+0x34>
 8000460:	2080      	movs	r0, #128	; 0x80
 8000462:	0240      	lsls	r0, r0, #9
 8000464:	4680      	mov	r8, r0
 8000466:	4441      	add	r1, r8
 8000468:	0c25      	lsrs	r5, r4, #16
 800046a:	186d      	adds	r5, r5, r1
 800046c:	4661      	mov	r1, ip
 800046e:	4359      	muls	r1, r3
 8000470:	437a      	muls	r2, r7
 8000472:	0430      	lsls	r0, r6, #16
 8000474:	1949      	adds	r1, r1, r5
 8000476:	0424      	lsls	r4, r4, #16
 8000478:	0c00      	lsrs	r0, r0, #16
 800047a:	1820      	adds	r0, r4, r0
 800047c:	1889      	adds	r1, r1, r2
 800047e:	bc80      	pop	{r7}
 8000480:	46b8      	mov	r8, r7
 8000482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000484 <__aeabi_d2uiz>:
 8000484:	b570      	push	{r4, r5, r6, lr}
 8000486:	2200      	movs	r2, #0
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <__aeabi_d2uiz+0x38>)
 800048a:	0004      	movs	r4, r0
 800048c:	000d      	movs	r5, r1
 800048e:	f000 fff7 	bl	8001480 <__aeabi_dcmpge>
 8000492:	2800      	cmp	r0, #0
 8000494:	d104      	bne.n	80004a0 <__aeabi_d2uiz+0x1c>
 8000496:	0020      	movs	r0, r4
 8000498:	0029      	movs	r1, r5
 800049a:	f000 ff57 	bl	800134c <__aeabi_d2iz>
 800049e:	bd70      	pop	{r4, r5, r6, pc}
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <__aeabi_d2uiz+0x38>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	0020      	movs	r0, r4
 80004a6:	0029      	movs	r1, r5
 80004a8:	f000 fbbe 	bl	8000c28 <__aeabi_dsub>
 80004ac:	f000 ff4e 	bl	800134c <__aeabi_d2iz>
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	061b      	lsls	r3, r3, #24
 80004b4:	469c      	mov	ip, r3
 80004b6:	4460      	add	r0, ip
 80004b8:	e7f1      	b.n	800049e <__aeabi_d2uiz+0x1a>
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	41e00000 	.word	0x41e00000

080004c0 <__udivmoddi4>:
 80004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c2:	4657      	mov	r7, sl
 80004c4:	464e      	mov	r6, r9
 80004c6:	4645      	mov	r5, r8
 80004c8:	46de      	mov	lr, fp
 80004ca:	b5e0      	push	{r5, r6, r7, lr}
 80004cc:	0004      	movs	r4, r0
 80004ce:	000d      	movs	r5, r1
 80004d0:	4692      	mov	sl, r2
 80004d2:	4699      	mov	r9, r3
 80004d4:	b083      	sub	sp, #12
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d830      	bhi.n	800053c <__udivmoddi4+0x7c>
 80004da:	d02d      	beq.n	8000538 <__udivmoddi4+0x78>
 80004dc:	4649      	mov	r1, r9
 80004de:	4650      	mov	r0, sl
 80004e0:	f000 fff6 	bl	80014d0 <__clzdi2>
 80004e4:	0029      	movs	r1, r5
 80004e6:	0006      	movs	r6, r0
 80004e8:	0020      	movs	r0, r4
 80004ea:	f000 fff1 	bl	80014d0 <__clzdi2>
 80004ee:	1a33      	subs	r3, r6, r0
 80004f0:	4698      	mov	r8, r3
 80004f2:	3b20      	subs	r3, #32
 80004f4:	469b      	mov	fp, r3
 80004f6:	d433      	bmi.n	8000560 <__udivmoddi4+0xa0>
 80004f8:	465a      	mov	r2, fp
 80004fa:	4653      	mov	r3, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	4642      	mov	r2, r8
 8000500:	001f      	movs	r7, r3
 8000502:	4653      	mov	r3, sl
 8000504:	4093      	lsls	r3, r2
 8000506:	001e      	movs	r6, r3
 8000508:	42af      	cmp	r7, r5
 800050a:	d83a      	bhi.n	8000582 <__udivmoddi4+0xc2>
 800050c:	42af      	cmp	r7, r5
 800050e:	d100      	bne.n	8000512 <__udivmoddi4+0x52>
 8000510:	e078      	b.n	8000604 <__udivmoddi4+0x144>
 8000512:	465b      	mov	r3, fp
 8000514:	1ba4      	subs	r4, r4, r6
 8000516:	41bd      	sbcs	r5, r7
 8000518:	2b00      	cmp	r3, #0
 800051a:	da00      	bge.n	800051e <__udivmoddi4+0x5e>
 800051c:	e075      	b.n	800060a <__udivmoddi4+0x14a>
 800051e:	2200      	movs	r2, #0
 8000520:	2300      	movs	r3, #0
 8000522:	9200      	str	r2, [sp, #0]
 8000524:	9301      	str	r3, [sp, #4]
 8000526:	2301      	movs	r3, #1
 8000528:	465a      	mov	r2, fp
 800052a:	4093      	lsls	r3, r2
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2301      	movs	r3, #1
 8000530:	4642      	mov	r2, r8
 8000532:	4093      	lsls	r3, r2
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	e028      	b.n	800058a <__udivmoddi4+0xca>
 8000538:	4282      	cmp	r2, r0
 800053a:	d9cf      	bls.n	80004dc <__udivmoddi4+0x1c>
 800053c:	2200      	movs	r2, #0
 800053e:	2300      	movs	r3, #0
 8000540:	9200      	str	r2, [sp, #0]
 8000542:	9301      	str	r3, [sp, #4]
 8000544:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <__udivmoddi4+0x8e>
 800054a:	601c      	str	r4, [r3, #0]
 800054c:	605d      	str	r5, [r3, #4]
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	b003      	add	sp, #12
 8000554:	bcf0      	pop	{r4, r5, r6, r7}
 8000556:	46bb      	mov	fp, r7
 8000558:	46b2      	mov	sl, r6
 800055a:	46a9      	mov	r9, r5
 800055c:	46a0      	mov	r8, r4
 800055e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000560:	4642      	mov	r2, r8
 8000562:	2320      	movs	r3, #32
 8000564:	1a9b      	subs	r3, r3, r2
 8000566:	4652      	mov	r2, sl
 8000568:	40da      	lsrs	r2, r3
 800056a:	4641      	mov	r1, r8
 800056c:	0013      	movs	r3, r2
 800056e:	464a      	mov	r2, r9
 8000570:	408a      	lsls	r2, r1
 8000572:	0017      	movs	r7, r2
 8000574:	4642      	mov	r2, r8
 8000576:	431f      	orrs	r7, r3
 8000578:	4653      	mov	r3, sl
 800057a:	4093      	lsls	r3, r2
 800057c:	001e      	movs	r6, r3
 800057e:	42af      	cmp	r7, r5
 8000580:	d9c4      	bls.n	800050c <__udivmoddi4+0x4c>
 8000582:	2200      	movs	r2, #0
 8000584:	2300      	movs	r3, #0
 8000586:	9200      	str	r2, [sp, #0]
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	4643      	mov	r3, r8
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0d9      	beq.n	8000544 <__udivmoddi4+0x84>
 8000590:	07fb      	lsls	r3, r7, #31
 8000592:	0872      	lsrs	r2, r6, #1
 8000594:	431a      	orrs	r2, r3
 8000596:	4646      	mov	r6, r8
 8000598:	087b      	lsrs	r3, r7, #1
 800059a:	e00e      	b.n	80005ba <__udivmoddi4+0xfa>
 800059c:	42ab      	cmp	r3, r5
 800059e:	d101      	bne.n	80005a4 <__udivmoddi4+0xe4>
 80005a0:	42a2      	cmp	r2, r4
 80005a2:	d80c      	bhi.n	80005be <__udivmoddi4+0xfe>
 80005a4:	1aa4      	subs	r4, r4, r2
 80005a6:	419d      	sbcs	r5, r3
 80005a8:	2001      	movs	r0, #1
 80005aa:	1924      	adds	r4, r4, r4
 80005ac:	416d      	adcs	r5, r5
 80005ae:	2100      	movs	r1, #0
 80005b0:	3e01      	subs	r6, #1
 80005b2:	1824      	adds	r4, r4, r0
 80005b4:	414d      	adcs	r5, r1
 80005b6:	2e00      	cmp	r6, #0
 80005b8:	d006      	beq.n	80005c8 <__udivmoddi4+0x108>
 80005ba:	42ab      	cmp	r3, r5
 80005bc:	d9ee      	bls.n	800059c <__udivmoddi4+0xdc>
 80005be:	3e01      	subs	r6, #1
 80005c0:	1924      	adds	r4, r4, r4
 80005c2:	416d      	adcs	r5, r5
 80005c4:	2e00      	cmp	r6, #0
 80005c6:	d1f8      	bne.n	80005ba <__udivmoddi4+0xfa>
 80005c8:	9800      	ldr	r0, [sp, #0]
 80005ca:	9901      	ldr	r1, [sp, #4]
 80005cc:	465b      	mov	r3, fp
 80005ce:	1900      	adds	r0, r0, r4
 80005d0:	4169      	adcs	r1, r5
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	db24      	blt.n	8000620 <__udivmoddi4+0x160>
 80005d6:	002b      	movs	r3, r5
 80005d8:	465a      	mov	r2, fp
 80005da:	4644      	mov	r4, r8
 80005dc:	40d3      	lsrs	r3, r2
 80005de:	002a      	movs	r2, r5
 80005e0:	40e2      	lsrs	r2, r4
 80005e2:	001c      	movs	r4, r3
 80005e4:	465b      	mov	r3, fp
 80005e6:	0015      	movs	r5, r2
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	db2a      	blt.n	8000642 <__udivmoddi4+0x182>
 80005ec:	0026      	movs	r6, r4
 80005ee:	409e      	lsls	r6, r3
 80005f0:	0033      	movs	r3, r6
 80005f2:	0026      	movs	r6, r4
 80005f4:	4647      	mov	r7, r8
 80005f6:	40be      	lsls	r6, r7
 80005f8:	0032      	movs	r2, r6
 80005fa:	1a80      	subs	r0, r0, r2
 80005fc:	4199      	sbcs	r1, r3
 80005fe:	9000      	str	r0, [sp, #0]
 8000600:	9101      	str	r1, [sp, #4]
 8000602:	e79f      	b.n	8000544 <__udivmoddi4+0x84>
 8000604:	42a3      	cmp	r3, r4
 8000606:	d8bc      	bhi.n	8000582 <__udivmoddi4+0xc2>
 8000608:	e783      	b.n	8000512 <__udivmoddi4+0x52>
 800060a:	4642      	mov	r2, r8
 800060c:	2320      	movs	r3, #32
 800060e:	2100      	movs	r1, #0
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	2200      	movs	r2, #0
 8000614:	9100      	str	r1, [sp, #0]
 8000616:	9201      	str	r2, [sp, #4]
 8000618:	2201      	movs	r2, #1
 800061a:	40da      	lsrs	r2, r3
 800061c:	9201      	str	r2, [sp, #4]
 800061e:	e786      	b.n	800052e <__udivmoddi4+0x6e>
 8000620:	4642      	mov	r2, r8
 8000622:	2320      	movs	r3, #32
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	002a      	movs	r2, r5
 8000628:	4646      	mov	r6, r8
 800062a:	409a      	lsls	r2, r3
 800062c:	0023      	movs	r3, r4
 800062e:	40f3      	lsrs	r3, r6
 8000630:	4644      	mov	r4, r8
 8000632:	4313      	orrs	r3, r2
 8000634:	002a      	movs	r2, r5
 8000636:	40e2      	lsrs	r2, r4
 8000638:	001c      	movs	r4, r3
 800063a:	465b      	mov	r3, fp
 800063c:	0015      	movs	r5, r2
 800063e:	2b00      	cmp	r3, #0
 8000640:	dad4      	bge.n	80005ec <__udivmoddi4+0x12c>
 8000642:	4642      	mov	r2, r8
 8000644:	002f      	movs	r7, r5
 8000646:	2320      	movs	r3, #32
 8000648:	0026      	movs	r6, r4
 800064a:	4097      	lsls	r7, r2
 800064c:	1a9b      	subs	r3, r3, r2
 800064e:	40de      	lsrs	r6, r3
 8000650:	003b      	movs	r3, r7
 8000652:	4333      	orrs	r3, r6
 8000654:	e7cd      	b.n	80005f2 <__udivmoddi4+0x132>
 8000656:	46c0      	nop			; (mov r8, r8)

08000658 <__aeabi_ddiv>:
 8000658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800065a:	4657      	mov	r7, sl
 800065c:	464e      	mov	r6, r9
 800065e:	4645      	mov	r5, r8
 8000660:	46de      	mov	lr, fp
 8000662:	b5e0      	push	{r5, r6, r7, lr}
 8000664:	4681      	mov	r9, r0
 8000666:	0005      	movs	r5, r0
 8000668:	030c      	lsls	r4, r1, #12
 800066a:	0048      	lsls	r0, r1, #1
 800066c:	4692      	mov	sl, r2
 800066e:	001f      	movs	r7, r3
 8000670:	b085      	sub	sp, #20
 8000672:	0b24      	lsrs	r4, r4, #12
 8000674:	0d40      	lsrs	r0, r0, #21
 8000676:	0fce      	lsrs	r6, r1, #31
 8000678:	2800      	cmp	r0, #0
 800067a:	d059      	beq.n	8000730 <__aeabi_ddiv+0xd8>
 800067c:	4b87      	ldr	r3, [pc, #540]	; (800089c <__aeabi_ddiv+0x244>)
 800067e:	4298      	cmp	r0, r3
 8000680:	d100      	bne.n	8000684 <__aeabi_ddiv+0x2c>
 8000682:	e098      	b.n	80007b6 <__aeabi_ddiv+0x15e>
 8000684:	0f6b      	lsrs	r3, r5, #29
 8000686:	00e4      	lsls	r4, r4, #3
 8000688:	431c      	orrs	r4, r3
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	041b      	lsls	r3, r3, #16
 800068e:	4323      	orrs	r3, r4
 8000690:	4698      	mov	r8, r3
 8000692:	4b83      	ldr	r3, [pc, #524]	; (80008a0 <__aeabi_ddiv+0x248>)
 8000694:	00ed      	lsls	r5, r5, #3
 8000696:	469b      	mov	fp, r3
 8000698:	2300      	movs	r3, #0
 800069a:	4699      	mov	r9, r3
 800069c:	4483      	add	fp, r0
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	033c      	lsls	r4, r7, #12
 80006a2:	007b      	lsls	r3, r7, #1
 80006a4:	4650      	mov	r0, sl
 80006a6:	0b24      	lsrs	r4, r4, #12
 80006a8:	0d5b      	lsrs	r3, r3, #21
 80006aa:	0fff      	lsrs	r7, r7, #31
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d067      	beq.n	8000780 <__aeabi_ddiv+0x128>
 80006b0:	4a7a      	ldr	r2, [pc, #488]	; (800089c <__aeabi_ddiv+0x244>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d018      	beq.n	80006e8 <__aeabi_ddiv+0x90>
 80006b6:	497a      	ldr	r1, [pc, #488]	; (80008a0 <__aeabi_ddiv+0x248>)
 80006b8:	0f42      	lsrs	r2, r0, #29
 80006ba:	468c      	mov	ip, r1
 80006bc:	00e4      	lsls	r4, r4, #3
 80006be:	4659      	mov	r1, fp
 80006c0:	4314      	orrs	r4, r2
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	4463      	add	r3, ip
 80006c6:	0412      	lsls	r2, r2, #16
 80006c8:	1acb      	subs	r3, r1, r3
 80006ca:	4314      	orrs	r4, r2
 80006cc:	469b      	mov	fp, r3
 80006ce:	00c2      	lsls	r2, r0, #3
 80006d0:	2000      	movs	r0, #0
 80006d2:	0033      	movs	r3, r6
 80006d4:	407b      	eors	r3, r7
 80006d6:	469a      	mov	sl, r3
 80006d8:	464b      	mov	r3, r9
 80006da:	2b0f      	cmp	r3, #15
 80006dc:	d900      	bls.n	80006e0 <__aeabi_ddiv+0x88>
 80006de:	e0ef      	b.n	80008c0 <__aeabi_ddiv+0x268>
 80006e0:	4970      	ldr	r1, [pc, #448]	; (80008a4 <__aeabi_ddiv+0x24c>)
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	58cb      	ldr	r3, [r1, r3]
 80006e6:	469f      	mov	pc, r3
 80006e8:	4b6f      	ldr	r3, [pc, #444]	; (80008a8 <__aeabi_ddiv+0x250>)
 80006ea:	4652      	mov	r2, sl
 80006ec:	469c      	mov	ip, r3
 80006ee:	4322      	orrs	r2, r4
 80006f0:	44e3      	add	fp, ip
 80006f2:	2a00      	cmp	r2, #0
 80006f4:	d000      	beq.n	80006f8 <__aeabi_ddiv+0xa0>
 80006f6:	e095      	b.n	8000824 <__aeabi_ddiv+0x1cc>
 80006f8:	4649      	mov	r1, r9
 80006fa:	2302      	movs	r3, #2
 80006fc:	4319      	orrs	r1, r3
 80006fe:	4689      	mov	r9, r1
 8000700:	2400      	movs	r4, #0
 8000702:	2002      	movs	r0, #2
 8000704:	e7e5      	b.n	80006d2 <__aeabi_ddiv+0x7a>
 8000706:	2300      	movs	r3, #0
 8000708:	2400      	movs	r4, #0
 800070a:	2500      	movs	r5, #0
 800070c:	4652      	mov	r2, sl
 800070e:	051b      	lsls	r3, r3, #20
 8000710:	4323      	orrs	r3, r4
 8000712:	07d2      	lsls	r2, r2, #31
 8000714:	4313      	orrs	r3, r2
 8000716:	0028      	movs	r0, r5
 8000718:	0019      	movs	r1, r3
 800071a:	b005      	add	sp, #20
 800071c:	bcf0      	pop	{r4, r5, r6, r7}
 800071e:	46bb      	mov	fp, r7
 8000720:	46b2      	mov	sl, r6
 8000722:	46a9      	mov	r9, r5
 8000724:	46a0      	mov	r8, r4
 8000726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000728:	2400      	movs	r4, #0
 800072a:	2500      	movs	r5, #0
 800072c:	4b5b      	ldr	r3, [pc, #364]	; (800089c <__aeabi_ddiv+0x244>)
 800072e:	e7ed      	b.n	800070c <__aeabi_ddiv+0xb4>
 8000730:	464b      	mov	r3, r9
 8000732:	4323      	orrs	r3, r4
 8000734:	4698      	mov	r8, r3
 8000736:	d100      	bne.n	800073a <__aeabi_ddiv+0xe2>
 8000738:	e089      	b.n	800084e <__aeabi_ddiv+0x1f6>
 800073a:	2c00      	cmp	r4, #0
 800073c:	d100      	bne.n	8000740 <__aeabi_ddiv+0xe8>
 800073e:	e1e0      	b.n	8000b02 <__aeabi_ddiv+0x4aa>
 8000740:	0020      	movs	r0, r4
 8000742:	f000 fea7 	bl	8001494 <__clzsi2>
 8000746:	0001      	movs	r1, r0
 8000748:	0002      	movs	r2, r0
 800074a:	390b      	subs	r1, #11
 800074c:	231d      	movs	r3, #29
 800074e:	1a5b      	subs	r3, r3, r1
 8000750:	4649      	mov	r1, r9
 8000752:	0010      	movs	r0, r2
 8000754:	40d9      	lsrs	r1, r3
 8000756:	3808      	subs	r0, #8
 8000758:	4084      	lsls	r4, r0
 800075a:	000b      	movs	r3, r1
 800075c:	464d      	mov	r5, r9
 800075e:	4323      	orrs	r3, r4
 8000760:	4698      	mov	r8, r3
 8000762:	4085      	lsls	r5, r0
 8000764:	4851      	ldr	r0, [pc, #324]	; (80008ac <__aeabi_ddiv+0x254>)
 8000766:	033c      	lsls	r4, r7, #12
 8000768:	1a83      	subs	r3, r0, r2
 800076a:	469b      	mov	fp, r3
 800076c:	2300      	movs	r3, #0
 800076e:	4699      	mov	r9, r3
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	007b      	lsls	r3, r7, #1
 8000774:	4650      	mov	r0, sl
 8000776:	0b24      	lsrs	r4, r4, #12
 8000778:	0d5b      	lsrs	r3, r3, #21
 800077a:	0fff      	lsrs	r7, r7, #31
 800077c:	2b00      	cmp	r3, #0
 800077e:	d197      	bne.n	80006b0 <__aeabi_ddiv+0x58>
 8000780:	4652      	mov	r2, sl
 8000782:	4322      	orrs	r2, r4
 8000784:	d055      	beq.n	8000832 <__aeabi_ddiv+0x1da>
 8000786:	2c00      	cmp	r4, #0
 8000788:	d100      	bne.n	800078c <__aeabi_ddiv+0x134>
 800078a:	e1ca      	b.n	8000b22 <__aeabi_ddiv+0x4ca>
 800078c:	0020      	movs	r0, r4
 800078e:	f000 fe81 	bl	8001494 <__clzsi2>
 8000792:	0002      	movs	r2, r0
 8000794:	3a0b      	subs	r2, #11
 8000796:	231d      	movs	r3, #29
 8000798:	0001      	movs	r1, r0
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	4652      	mov	r2, sl
 800079e:	3908      	subs	r1, #8
 80007a0:	40da      	lsrs	r2, r3
 80007a2:	408c      	lsls	r4, r1
 80007a4:	4314      	orrs	r4, r2
 80007a6:	4652      	mov	r2, sl
 80007a8:	408a      	lsls	r2, r1
 80007aa:	4b41      	ldr	r3, [pc, #260]	; (80008b0 <__aeabi_ddiv+0x258>)
 80007ac:	4458      	add	r0, fp
 80007ae:	469b      	mov	fp, r3
 80007b0:	4483      	add	fp, r0
 80007b2:	2000      	movs	r0, #0
 80007b4:	e78d      	b.n	80006d2 <__aeabi_ddiv+0x7a>
 80007b6:	464b      	mov	r3, r9
 80007b8:	4323      	orrs	r3, r4
 80007ba:	4698      	mov	r8, r3
 80007bc:	d140      	bne.n	8000840 <__aeabi_ddiv+0x1e8>
 80007be:	2308      	movs	r3, #8
 80007c0:	4699      	mov	r9, r3
 80007c2:	3b06      	subs	r3, #6
 80007c4:	2500      	movs	r5, #0
 80007c6:	4683      	mov	fp, r0
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	e769      	b.n	80006a0 <__aeabi_ddiv+0x48>
 80007cc:	46b2      	mov	sl, r6
 80007ce:	9b00      	ldr	r3, [sp, #0]
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d0a9      	beq.n	8000728 <__aeabi_ddiv+0xd0>
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	d100      	bne.n	80007da <__aeabi_ddiv+0x182>
 80007d8:	e211      	b.n	8000bfe <__aeabi_ddiv+0x5a6>
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d093      	beq.n	8000706 <__aeabi_ddiv+0xae>
 80007de:	4a35      	ldr	r2, [pc, #212]	; (80008b4 <__aeabi_ddiv+0x25c>)
 80007e0:	445a      	add	r2, fp
 80007e2:	2a00      	cmp	r2, #0
 80007e4:	dc00      	bgt.n	80007e8 <__aeabi_ddiv+0x190>
 80007e6:	e13c      	b.n	8000a62 <__aeabi_ddiv+0x40a>
 80007e8:	076b      	lsls	r3, r5, #29
 80007ea:	d000      	beq.n	80007ee <__aeabi_ddiv+0x196>
 80007ec:	e1a7      	b.n	8000b3e <__aeabi_ddiv+0x4e6>
 80007ee:	08ed      	lsrs	r5, r5, #3
 80007f0:	4643      	mov	r3, r8
 80007f2:	01db      	lsls	r3, r3, #7
 80007f4:	d506      	bpl.n	8000804 <__aeabi_ddiv+0x1ac>
 80007f6:	4642      	mov	r2, r8
 80007f8:	4b2f      	ldr	r3, [pc, #188]	; (80008b8 <__aeabi_ddiv+0x260>)
 80007fa:	401a      	ands	r2, r3
 80007fc:	4690      	mov	r8, r2
 80007fe:	2280      	movs	r2, #128	; 0x80
 8000800:	00d2      	lsls	r2, r2, #3
 8000802:	445a      	add	r2, fp
 8000804:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <__aeabi_ddiv+0x264>)
 8000806:	429a      	cmp	r2, r3
 8000808:	dc8e      	bgt.n	8000728 <__aeabi_ddiv+0xd0>
 800080a:	4643      	mov	r3, r8
 800080c:	0552      	lsls	r2, r2, #21
 800080e:	0758      	lsls	r0, r3, #29
 8000810:	025c      	lsls	r4, r3, #9
 8000812:	4305      	orrs	r5, r0
 8000814:	0b24      	lsrs	r4, r4, #12
 8000816:	0d53      	lsrs	r3, r2, #21
 8000818:	e778      	b.n	800070c <__aeabi_ddiv+0xb4>
 800081a:	46ba      	mov	sl, r7
 800081c:	46a0      	mov	r8, r4
 800081e:	0015      	movs	r5, r2
 8000820:	9000      	str	r0, [sp, #0]
 8000822:	e7d4      	b.n	80007ce <__aeabi_ddiv+0x176>
 8000824:	464a      	mov	r2, r9
 8000826:	2303      	movs	r3, #3
 8000828:	431a      	orrs	r2, r3
 800082a:	4691      	mov	r9, r2
 800082c:	2003      	movs	r0, #3
 800082e:	4652      	mov	r2, sl
 8000830:	e74f      	b.n	80006d2 <__aeabi_ddiv+0x7a>
 8000832:	4649      	mov	r1, r9
 8000834:	2301      	movs	r3, #1
 8000836:	4319      	orrs	r1, r3
 8000838:	4689      	mov	r9, r1
 800083a:	2400      	movs	r4, #0
 800083c:	2001      	movs	r0, #1
 800083e:	e748      	b.n	80006d2 <__aeabi_ddiv+0x7a>
 8000840:	230c      	movs	r3, #12
 8000842:	4699      	mov	r9, r3
 8000844:	3b09      	subs	r3, #9
 8000846:	46a0      	mov	r8, r4
 8000848:	4683      	mov	fp, r0
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	e728      	b.n	80006a0 <__aeabi_ddiv+0x48>
 800084e:	2304      	movs	r3, #4
 8000850:	4699      	mov	r9, r3
 8000852:	2300      	movs	r3, #0
 8000854:	469b      	mov	fp, r3
 8000856:	3301      	adds	r3, #1
 8000858:	2500      	movs	r5, #0
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	e720      	b.n	80006a0 <__aeabi_ddiv+0x48>
 800085e:	2300      	movs	r3, #0
 8000860:	2480      	movs	r4, #128	; 0x80
 8000862:	469a      	mov	sl, r3
 8000864:	2500      	movs	r5, #0
 8000866:	4b0d      	ldr	r3, [pc, #52]	; (800089c <__aeabi_ddiv+0x244>)
 8000868:	0324      	lsls	r4, r4, #12
 800086a:	e74f      	b.n	800070c <__aeabi_ddiv+0xb4>
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	4641      	mov	r1, r8
 8000870:	031b      	lsls	r3, r3, #12
 8000872:	4219      	tst	r1, r3
 8000874:	d008      	beq.n	8000888 <__aeabi_ddiv+0x230>
 8000876:	421c      	tst	r4, r3
 8000878:	d106      	bne.n	8000888 <__aeabi_ddiv+0x230>
 800087a:	431c      	orrs	r4, r3
 800087c:	0324      	lsls	r4, r4, #12
 800087e:	46ba      	mov	sl, r7
 8000880:	0015      	movs	r5, r2
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <__aeabi_ddiv+0x244>)
 8000884:	0b24      	lsrs	r4, r4, #12
 8000886:	e741      	b.n	800070c <__aeabi_ddiv+0xb4>
 8000888:	2480      	movs	r4, #128	; 0x80
 800088a:	4643      	mov	r3, r8
 800088c:	0324      	lsls	r4, r4, #12
 800088e:	431c      	orrs	r4, r3
 8000890:	0324      	lsls	r4, r4, #12
 8000892:	46b2      	mov	sl, r6
 8000894:	4b01      	ldr	r3, [pc, #4]	; (800089c <__aeabi_ddiv+0x244>)
 8000896:	0b24      	lsrs	r4, r4, #12
 8000898:	e738      	b.n	800070c <__aeabi_ddiv+0xb4>
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	000007ff 	.word	0x000007ff
 80008a0:	fffffc01 	.word	0xfffffc01
 80008a4:	08004f74 	.word	0x08004f74
 80008a8:	fffff801 	.word	0xfffff801
 80008ac:	fffffc0d 	.word	0xfffffc0d
 80008b0:	000003f3 	.word	0x000003f3
 80008b4:	000003ff 	.word	0x000003ff
 80008b8:	feffffff 	.word	0xfeffffff
 80008bc:	000007fe 	.word	0x000007fe
 80008c0:	4544      	cmp	r4, r8
 80008c2:	d200      	bcs.n	80008c6 <__aeabi_ddiv+0x26e>
 80008c4:	e116      	b.n	8000af4 <__aeabi_ddiv+0x49c>
 80008c6:	d100      	bne.n	80008ca <__aeabi_ddiv+0x272>
 80008c8:	e111      	b.n	8000aee <__aeabi_ddiv+0x496>
 80008ca:	2301      	movs	r3, #1
 80008cc:	425b      	negs	r3, r3
 80008ce:	469c      	mov	ip, r3
 80008d0:	002e      	movs	r6, r5
 80008d2:	4640      	mov	r0, r8
 80008d4:	2500      	movs	r5, #0
 80008d6:	44e3      	add	fp, ip
 80008d8:	0223      	lsls	r3, r4, #8
 80008da:	0e14      	lsrs	r4, r2, #24
 80008dc:	431c      	orrs	r4, r3
 80008de:	0c1b      	lsrs	r3, r3, #16
 80008e0:	4699      	mov	r9, r3
 80008e2:	0423      	lsls	r3, r4, #16
 80008e4:	0c1f      	lsrs	r7, r3, #16
 80008e6:	0212      	lsls	r2, r2, #8
 80008e8:	4649      	mov	r1, r9
 80008ea:	9200      	str	r2, [sp, #0]
 80008ec:	9701      	str	r7, [sp, #4]
 80008ee:	f7ff fc91 	bl	8000214 <__aeabi_uidivmod>
 80008f2:	0002      	movs	r2, r0
 80008f4:	437a      	muls	r2, r7
 80008f6:	040b      	lsls	r3, r1, #16
 80008f8:	0c31      	lsrs	r1, r6, #16
 80008fa:	4680      	mov	r8, r0
 80008fc:	4319      	orrs	r1, r3
 80008fe:	428a      	cmp	r2, r1
 8000900:	d90b      	bls.n	800091a <__aeabi_ddiv+0x2c2>
 8000902:	2301      	movs	r3, #1
 8000904:	425b      	negs	r3, r3
 8000906:	469c      	mov	ip, r3
 8000908:	1909      	adds	r1, r1, r4
 800090a:	44e0      	add	r8, ip
 800090c:	428c      	cmp	r4, r1
 800090e:	d804      	bhi.n	800091a <__aeabi_ddiv+0x2c2>
 8000910:	428a      	cmp	r2, r1
 8000912:	d902      	bls.n	800091a <__aeabi_ddiv+0x2c2>
 8000914:	1e83      	subs	r3, r0, #2
 8000916:	4698      	mov	r8, r3
 8000918:	1909      	adds	r1, r1, r4
 800091a:	1a88      	subs	r0, r1, r2
 800091c:	4649      	mov	r1, r9
 800091e:	f7ff fc79 	bl	8000214 <__aeabi_uidivmod>
 8000922:	0409      	lsls	r1, r1, #16
 8000924:	468c      	mov	ip, r1
 8000926:	0431      	lsls	r1, r6, #16
 8000928:	4666      	mov	r6, ip
 800092a:	9a01      	ldr	r2, [sp, #4]
 800092c:	0c09      	lsrs	r1, r1, #16
 800092e:	4342      	muls	r2, r0
 8000930:	0003      	movs	r3, r0
 8000932:	4331      	orrs	r1, r6
 8000934:	428a      	cmp	r2, r1
 8000936:	d904      	bls.n	8000942 <__aeabi_ddiv+0x2ea>
 8000938:	1909      	adds	r1, r1, r4
 800093a:	3b01      	subs	r3, #1
 800093c:	428c      	cmp	r4, r1
 800093e:	d800      	bhi.n	8000942 <__aeabi_ddiv+0x2ea>
 8000940:	e111      	b.n	8000b66 <__aeabi_ddiv+0x50e>
 8000942:	1a89      	subs	r1, r1, r2
 8000944:	4642      	mov	r2, r8
 8000946:	9e00      	ldr	r6, [sp, #0]
 8000948:	0412      	lsls	r2, r2, #16
 800094a:	431a      	orrs	r2, r3
 800094c:	0c33      	lsrs	r3, r6, #16
 800094e:	001f      	movs	r7, r3
 8000950:	0c10      	lsrs	r0, r2, #16
 8000952:	4690      	mov	r8, r2
 8000954:	9302      	str	r3, [sp, #8]
 8000956:	0413      	lsls	r3, r2, #16
 8000958:	0432      	lsls	r2, r6, #16
 800095a:	0c16      	lsrs	r6, r2, #16
 800095c:	0032      	movs	r2, r6
 800095e:	0c1b      	lsrs	r3, r3, #16
 8000960:	435a      	muls	r2, r3
 8000962:	9603      	str	r6, [sp, #12]
 8000964:	437b      	muls	r3, r7
 8000966:	4346      	muls	r6, r0
 8000968:	4378      	muls	r0, r7
 800096a:	0c17      	lsrs	r7, r2, #16
 800096c:	46bc      	mov	ip, r7
 800096e:	199b      	adds	r3, r3, r6
 8000970:	4463      	add	r3, ip
 8000972:	429e      	cmp	r6, r3
 8000974:	d903      	bls.n	800097e <__aeabi_ddiv+0x326>
 8000976:	2680      	movs	r6, #128	; 0x80
 8000978:	0276      	lsls	r6, r6, #9
 800097a:	46b4      	mov	ip, r6
 800097c:	4460      	add	r0, ip
 800097e:	0c1e      	lsrs	r6, r3, #16
 8000980:	1830      	adds	r0, r6, r0
 8000982:	0416      	lsls	r6, r2, #16
 8000984:	041b      	lsls	r3, r3, #16
 8000986:	0c36      	lsrs	r6, r6, #16
 8000988:	199e      	adds	r6, r3, r6
 800098a:	4281      	cmp	r1, r0
 800098c:	d200      	bcs.n	8000990 <__aeabi_ddiv+0x338>
 800098e:	e09c      	b.n	8000aca <__aeabi_ddiv+0x472>
 8000990:	d100      	bne.n	8000994 <__aeabi_ddiv+0x33c>
 8000992:	e097      	b.n	8000ac4 <__aeabi_ddiv+0x46c>
 8000994:	1bae      	subs	r6, r5, r6
 8000996:	1a09      	subs	r1, r1, r0
 8000998:	42b5      	cmp	r5, r6
 800099a:	4180      	sbcs	r0, r0
 800099c:	4240      	negs	r0, r0
 800099e:	1a08      	subs	r0, r1, r0
 80009a0:	4284      	cmp	r4, r0
 80009a2:	d100      	bne.n	80009a6 <__aeabi_ddiv+0x34e>
 80009a4:	e111      	b.n	8000bca <__aeabi_ddiv+0x572>
 80009a6:	4649      	mov	r1, r9
 80009a8:	f7ff fc34 	bl	8000214 <__aeabi_uidivmod>
 80009ac:	9a01      	ldr	r2, [sp, #4]
 80009ae:	040b      	lsls	r3, r1, #16
 80009b0:	4342      	muls	r2, r0
 80009b2:	0c31      	lsrs	r1, r6, #16
 80009b4:	0005      	movs	r5, r0
 80009b6:	4319      	orrs	r1, r3
 80009b8:	428a      	cmp	r2, r1
 80009ba:	d907      	bls.n	80009cc <__aeabi_ddiv+0x374>
 80009bc:	1909      	adds	r1, r1, r4
 80009be:	3d01      	subs	r5, #1
 80009c0:	428c      	cmp	r4, r1
 80009c2:	d803      	bhi.n	80009cc <__aeabi_ddiv+0x374>
 80009c4:	428a      	cmp	r2, r1
 80009c6:	d901      	bls.n	80009cc <__aeabi_ddiv+0x374>
 80009c8:	1e85      	subs	r5, r0, #2
 80009ca:	1909      	adds	r1, r1, r4
 80009cc:	1a88      	subs	r0, r1, r2
 80009ce:	4649      	mov	r1, r9
 80009d0:	f7ff fc20 	bl	8000214 <__aeabi_uidivmod>
 80009d4:	0409      	lsls	r1, r1, #16
 80009d6:	468c      	mov	ip, r1
 80009d8:	0431      	lsls	r1, r6, #16
 80009da:	4666      	mov	r6, ip
 80009dc:	9a01      	ldr	r2, [sp, #4]
 80009de:	0c09      	lsrs	r1, r1, #16
 80009e0:	4342      	muls	r2, r0
 80009e2:	0003      	movs	r3, r0
 80009e4:	4331      	orrs	r1, r6
 80009e6:	428a      	cmp	r2, r1
 80009e8:	d907      	bls.n	80009fa <__aeabi_ddiv+0x3a2>
 80009ea:	1909      	adds	r1, r1, r4
 80009ec:	3b01      	subs	r3, #1
 80009ee:	428c      	cmp	r4, r1
 80009f0:	d803      	bhi.n	80009fa <__aeabi_ddiv+0x3a2>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	d901      	bls.n	80009fa <__aeabi_ddiv+0x3a2>
 80009f6:	1e83      	subs	r3, r0, #2
 80009f8:	1909      	adds	r1, r1, r4
 80009fa:	9e03      	ldr	r6, [sp, #12]
 80009fc:	1a89      	subs	r1, r1, r2
 80009fe:	0032      	movs	r2, r6
 8000a00:	042d      	lsls	r5, r5, #16
 8000a02:	431d      	orrs	r5, r3
 8000a04:	9f02      	ldr	r7, [sp, #8]
 8000a06:	042b      	lsls	r3, r5, #16
 8000a08:	0c1b      	lsrs	r3, r3, #16
 8000a0a:	435a      	muls	r2, r3
 8000a0c:	437b      	muls	r3, r7
 8000a0e:	469c      	mov	ip, r3
 8000a10:	0c28      	lsrs	r0, r5, #16
 8000a12:	4346      	muls	r6, r0
 8000a14:	0c13      	lsrs	r3, r2, #16
 8000a16:	44b4      	add	ip, r6
 8000a18:	4463      	add	r3, ip
 8000a1a:	4378      	muls	r0, r7
 8000a1c:	429e      	cmp	r6, r3
 8000a1e:	d903      	bls.n	8000a28 <__aeabi_ddiv+0x3d0>
 8000a20:	2680      	movs	r6, #128	; 0x80
 8000a22:	0276      	lsls	r6, r6, #9
 8000a24:	46b4      	mov	ip, r6
 8000a26:	4460      	add	r0, ip
 8000a28:	0c1e      	lsrs	r6, r3, #16
 8000a2a:	0412      	lsls	r2, r2, #16
 8000a2c:	041b      	lsls	r3, r3, #16
 8000a2e:	0c12      	lsrs	r2, r2, #16
 8000a30:	1830      	adds	r0, r6, r0
 8000a32:	189b      	adds	r3, r3, r2
 8000a34:	4281      	cmp	r1, r0
 8000a36:	d306      	bcc.n	8000a46 <__aeabi_ddiv+0x3ee>
 8000a38:	d002      	beq.n	8000a40 <__aeabi_ddiv+0x3e8>
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	431d      	orrs	r5, r3
 8000a3e:	e6ce      	b.n	80007de <__aeabi_ddiv+0x186>
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d100      	bne.n	8000a46 <__aeabi_ddiv+0x3ee>
 8000a44:	e6cb      	b.n	80007de <__aeabi_ddiv+0x186>
 8000a46:	1861      	adds	r1, r4, r1
 8000a48:	1e6e      	subs	r6, r5, #1
 8000a4a:	42a1      	cmp	r1, r4
 8000a4c:	d200      	bcs.n	8000a50 <__aeabi_ddiv+0x3f8>
 8000a4e:	e0a4      	b.n	8000b9a <__aeabi_ddiv+0x542>
 8000a50:	4281      	cmp	r1, r0
 8000a52:	d200      	bcs.n	8000a56 <__aeabi_ddiv+0x3fe>
 8000a54:	e0c9      	b.n	8000bea <__aeabi_ddiv+0x592>
 8000a56:	d100      	bne.n	8000a5a <__aeabi_ddiv+0x402>
 8000a58:	e0d9      	b.n	8000c0e <__aeabi_ddiv+0x5b6>
 8000a5a:	0035      	movs	r5, r6
 8000a5c:	e7ed      	b.n	8000a3a <__aeabi_ddiv+0x3e2>
 8000a5e:	2501      	movs	r5, #1
 8000a60:	426d      	negs	r5, r5
 8000a62:	2101      	movs	r1, #1
 8000a64:	1a89      	subs	r1, r1, r2
 8000a66:	2938      	cmp	r1, #56	; 0x38
 8000a68:	dd00      	ble.n	8000a6c <__aeabi_ddiv+0x414>
 8000a6a:	e64c      	b.n	8000706 <__aeabi_ddiv+0xae>
 8000a6c:	291f      	cmp	r1, #31
 8000a6e:	dc00      	bgt.n	8000a72 <__aeabi_ddiv+0x41a>
 8000a70:	e07f      	b.n	8000b72 <__aeabi_ddiv+0x51a>
 8000a72:	231f      	movs	r3, #31
 8000a74:	425b      	negs	r3, r3
 8000a76:	1a9a      	subs	r2, r3, r2
 8000a78:	4643      	mov	r3, r8
 8000a7a:	40d3      	lsrs	r3, r2
 8000a7c:	2920      	cmp	r1, #32
 8000a7e:	d004      	beq.n	8000a8a <__aeabi_ddiv+0x432>
 8000a80:	4644      	mov	r4, r8
 8000a82:	4a65      	ldr	r2, [pc, #404]	; (8000c18 <__aeabi_ddiv+0x5c0>)
 8000a84:	445a      	add	r2, fp
 8000a86:	4094      	lsls	r4, r2
 8000a88:	4325      	orrs	r5, r4
 8000a8a:	1e6a      	subs	r2, r5, #1
 8000a8c:	4195      	sbcs	r5, r2
 8000a8e:	2207      	movs	r2, #7
 8000a90:	432b      	orrs	r3, r5
 8000a92:	0015      	movs	r5, r2
 8000a94:	2400      	movs	r4, #0
 8000a96:	401d      	ands	r5, r3
 8000a98:	421a      	tst	r2, r3
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_ddiv+0x446>
 8000a9c:	e0a1      	b.n	8000be2 <__aeabi_ddiv+0x58a>
 8000a9e:	220f      	movs	r2, #15
 8000aa0:	2400      	movs	r4, #0
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	2a04      	cmp	r2, #4
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_ddiv+0x452>
 8000aa8:	e098      	b.n	8000bdc <__aeabi_ddiv+0x584>
 8000aaa:	1d1a      	adds	r2, r3, #4
 8000aac:	429a      	cmp	r2, r3
 8000aae:	419b      	sbcs	r3, r3
 8000ab0:	425b      	negs	r3, r3
 8000ab2:	18e4      	adds	r4, r4, r3
 8000ab4:	0013      	movs	r3, r2
 8000ab6:	0222      	lsls	r2, r4, #8
 8000ab8:	d400      	bmi.n	8000abc <__aeabi_ddiv+0x464>
 8000aba:	e08f      	b.n	8000bdc <__aeabi_ddiv+0x584>
 8000abc:	2301      	movs	r3, #1
 8000abe:	2400      	movs	r4, #0
 8000ac0:	2500      	movs	r5, #0
 8000ac2:	e623      	b.n	800070c <__aeabi_ddiv+0xb4>
 8000ac4:	42b5      	cmp	r5, r6
 8000ac6:	d300      	bcc.n	8000aca <__aeabi_ddiv+0x472>
 8000ac8:	e764      	b.n	8000994 <__aeabi_ddiv+0x33c>
 8000aca:	4643      	mov	r3, r8
 8000acc:	1e5a      	subs	r2, r3, #1
 8000ace:	9b00      	ldr	r3, [sp, #0]
 8000ad0:	469c      	mov	ip, r3
 8000ad2:	4465      	add	r5, ip
 8000ad4:	001f      	movs	r7, r3
 8000ad6:	429d      	cmp	r5, r3
 8000ad8:	419b      	sbcs	r3, r3
 8000ada:	425b      	negs	r3, r3
 8000adc:	191b      	adds	r3, r3, r4
 8000ade:	18c9      	adds	r1, r1, r3
 8000ae0:	428c      	cmp	r4, r1
 8000ae2:	d23a      	bcs.n	8000b5a <__aeabi_ddiv+0x502>
 8000ae4:	4288      	cmp	r0, r1
 8000ae6:	d863      	bhi.n	8000bb0 <__aeabi_ddiv+0x558>
 8000ae8:	d060      	beq.n	8000bac <__aeabi_ddiv+0x554>
 8000aea:	4690      	mov	r8, r2
 8000aec:	e752      	b.n	8000994 <__aeabi_ddiv+0x33c>
 8000aee:	42aa      	cmp	r2, r5
 8000af0:	d900      	bls.n	8000af4 <__aeabi_ddiv+0x49c>
 8000af2:	e6ea      	b.n	80008ca <__aeabi_ddiv+0x272>
 8000af4:	4643      	mov	r3, r8
 8000af6:	07de      	lsls	r6, r3, #31
 8000af8:	0858      	lsrs	r0, r3, #1
 8000afa:	086b      	lsrs	r3, r5, #1
 8000afc:	431e      	orrs	r6, r3
 8000afe:	07ed      	lsls	r5, r5, #31
 8000b00:	e6ea      	b.n	80008d8 <__aeabi_ddiv+0x280>
 8000b02:	4648      	mov	r0, r9
 8000b04:	f000 fcc6 	bl	8001494 <__clzsi2>
 8000b08:	0001      	movs	r1, r0
 8000b0a:	0002      	movs	r2, r0
 8000b0c:	3115      	adds	r1, #21
 8000b0e:	3220      	adds	r2, #32
 8000b10:	291c      	cmp	r1, #28
 8000b12:	dc00      	bgt.n	8000b16 <__aeabi_ddiv+0x4be>
 8000b14:	e61a      	b.n	800074c <__aeabi_ddiv+0xf4>
 8000b16:	464b      	mov	r3, r9
 8000b18:	3808      	subs	r0, #8
 8000b1a:	4083      	lsls	r3, r0
 8000b1c:	2500      	movs	r5, #0
 8000b1e:	4698      	mov	r8, r3
 8000b20:	e620      	b.n	8000764 <__aeabi_ddiv+0x10c>
 8000b22:	f000 fcb7 	bl	8001494 <__clzsi2>
 8000b26:	0003      	movs	r3, r0
 8000b28:	001a      	movs	r2, r3
 8000b2a:	3215      	adds	r2, #21
 8000b2c:	3020      	adds	r0, #32
 8000b2e:	2a1c      	cmp	r2, #28
 8000b30:	dc00      	bgt.n	8000b34 <__aeabi_ddiv+0x4dc>
 8000b32:	e630      	b.n	8000796 <__aeabi_ddiv+0x13e>
 8000b34:	4654      	mov	r4, sl
 8000b36:	3b08      	subs	r3, #8
 8000b38:	2200      	movs	r2, #0
 8000b3a:	409c      	lsls	r4, r3
 8000b3c:	e635      	b.n	80007aa <__aeabi_ddiv+0x152>
 8000b3e:	230f      	movs	r3, #15
 8000b40:	402b      	ands	r3, r5
 8000b42:	2b04      	cmp	r3, #4
 8000b44:	d100      	bne.n	8000b48 <__aeabi_ddiv+0x4f0>
 8000b46:	e652      	b.n	80007ee <__aeabi_ddiv+0x196>
 8000b48:	2305      	movs	r3, #5
 8000b4a:	425b      	negs	r3, r3
 8000b4c:	42ab      	cmp	r3, r5
 8000b4e:	419b      	sbcs	r3, r3
 8000b50:	3504      	adds	r5, #4
 8000b52:	425b      	negs	r3, r3
 8000b54:	08ed      	lsrs	r5, r5, #3
 8000b56:	4498      	add	r8, r3
 8000b58:	e64a      	b.n	80007f0 <__aeabi_ddiv+0x198>
 8000b5a:	428c      	cmp	r4, r1
 8000b5c:	d1c5      	bne.n	8000aea <__aeabi_ddiv+0x492>
 8000b5e:	42af      	cmp	r7, r5
 8000b60:	d9c0      	bls.n	8000ae4 <__aeabi_ddiv+0x48c>
 8000b62:	4690      	mov	r8, r2
 8000b64:	e716      	b.n	8000994 <__aeabi_ddiv+0x33c>
 8000b66:	428a      	cmp	r2, r1
 8000b68:	d800      	bhi.n	8000b6c <__aeabi_ddiv+0x514>
 8000b6a:	e6ea      	b.n	8000942 <__aeabi_ddiv+0x2ea>
 8000b6c:	1e83      	subs	r3, r0, #2
 8000b6e:	1909      	adds	r1, r1, r4
 8000b70:	e6e7      	b.n	8000942 <__aeabi_ddiv+0x2ea>
 8000b72:	4a2a      	ldr	r2, [pc, #168]	; (8000c1c <__aeabi_ddiv+0x5c4>)
 8000b74:	0028      	movs	r0, r5
 8000b76:	445a      	add	r2, fp
 8000b78:	4643      	mov	r3, r8
 8000b7a:	4095      	lsls	r5, r2
 8000b7c:	4093      	lsls	r3, r2
 8000b7e:	40c8      	lsrs	r0, r1
 8000b80:	1e6a      	subs	r2, r5, #1
 8000b82:	4195      	sbcs	r5, r2
 8000b84:	4644      	mov	r4, r8
 8000b86:	4303      	orrs	r3, r0
 8000b88:	432b      	orrs	r3, r5
 8000b8a:	40cc      	lsrs	r4, r1
 8000b8c:	075a      	lsls	r2, r3, #29
 8000b8e:	d092      	beq.n	8000ab6 <__aeabi_ddiv+0x45e>
 8000b90:	220f      	movs	r2, #15
 8000b92:	401a      	ands	r2, r3
 8000b94:	2a04      	cmp	r2, #4
 8000b96:	d188      	bne.n	8000aaa <__aeabi_ddiv+0x452>
 8000b98:	e78d      	b.n	8000ab6 <__aeabi_ddiv+0x45e>
 8000b9a:	0035      	movs	r5, r6
 8000b9c:	4281      	cmp	r1, r0
 8000b9e:	d000      	beq.n	8000ba2 <__aeabi_ddiv+0x54a>
 8000ba0:	e74b      	b.n	8000a3a <__aeabi_ddiv+0x3e2>
 8000ba2:	9a00      	ldr	r2, [sp, #0]
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d000      	beq.n	8000baa <__aeabi_ddiv+0x552>
 8000ba8:	e747      	b.n	8000a3a <__aeabi_ddiv+0x3e2>
 8000baa:	e618      	b.n	80007de <__aeabi_ddiv+0x186>
 8000bac:	42ae      	cmp	r6, r5
 8000bae:	d99c      	bls.n	8000aea <__aeabi_ddiv+0x492>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	425b      	negs	r3, r3
 8000bb4:	469c      	mov	ip, r3
 8000bb6:	9b00      	ldr	r3, [sp, #0]
 8000bb8:	44e0      	add	r8, ip
 8000bba:	469c      	mov	ip, r3
 8000bbc:	4465      	add	r5, ip
 8000bbe:	429d      	cmp	r5, r3
 8000bc0:	419b      	sbcs	r3, r3
 8000bc2:	425b      	negs	r3, r3
 8000bc4:	191b      	adds	r3, r3, r4
 8000bc6:	18c9      	adds	r1, r1, r3
 8000bc8:	e6e4      	b.n	8000994 <__aeabi_ddiv+0x33c>
 8000bca:	4a15      	ldr	r2, [pc, #84]	; (8000c20 <__aeabi_ddiv+0x5c8>)
 8000bcc:	445a      	add	r2, fp
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	dc00      	bgt.n	8000bd4 <__aeabi_ddiv+0x57c>
 8000bd2:	e744      	b.n	8000a5e <__aeabi_ddiv+0x406>
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	2500      	movs	r5, #0
 8000bd8:	4498      	add	r8, r3
 8000bda:	e609      	b.n	80007f0 <__aeabi_ddiv+0x198>
 8000bdc:	0765      	lsls	r5, r4, #29
 8000bde:	0264      	lsls	r4, r4, #9
 8000be0:	0b24      	lsrs	r4, r4, #12
 8000be2:	08db      	lsrs	r3, r3, #3
 8000be4:	431d      	orrs	r5, r3
 8000be6:	2300      	movs	r3, #0
 8000be8:	e590      	b.n	800070c <__aeabi_ddiv+0xb4>
 8000bea:	9e00      	ldr	r6, [sp, #0]
 8000bec:	3d02      	subs	r5, #2
 8000bee:	0072      	lsls	r2, r6, #1
 8000bf0:	42b2      	cmp	r2, r6
 8000bf2:	41bf      	sbcs	r7, r7
 8000bf4:	427f      	negs	r7, r7
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	1909      	adds	r1, r1, r4
 8000bfa:	9200      	str	r2, [sp, #0]
 8000bfc:	e7ce      	b.n	8000b9c <__aeabi_ddiv+0x544>
 8000bfe:	2480      	movs	r4, #128	; 0x80
 8000c00:	4643      	mov	r3, r8
 8000c02:	0324      	lsls	r4, r4, #12
 8000c04:	431c      	orrs	r4, r3
 8000c06:	0324      	lsls	r4, r4, #12
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <__aeabi_ddiv+0x5cc>)
 8000c0a:	0b24      	lsrs	r4, r4, #12
 8000c0c:	e57e      	b.n	800070c <__aeabi_ddiv+0xb4>
 8000c0e:	9a00      	ldr	r2, [sp, #0]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d3ea      	bcc.n	8000bea <__aeabi_ddiv+0x592>
 8000c14:	0035      	movs	r5, r6
 8000c16:	e7c4      	b.n	8000ba2 <__aeabi_ddiv+0x54a>
 8000c18:	0000043e 	.word	0x0000043e
 8000c1c:	0000041e 	.word	0x0000041e
 8000c20:	000003ff 	.word	0x000003ff
 8000c24:	000007ff 	.word	0x000007ff

08000c28 <__aeabi_dsub>:
 8000c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2a:	4657      	mov	r7, sl
 8000c2c:	464e      	mov	r6, r9
 8000c2e:	4645      	mov	r5, r8
 8000c30:	46de      	mov	lr, fp
 8000c32:	0004      	movs	r4, r0
 8000c34:	b5e0      	push	{r5, r6, r7, lr}
 8000c36:	001f      	movs	r7, r3
 8000c38:	0010      	movs	r0, r2
 8000c3a:	030b      	lsls	r3, r1, #12
 8000c3c:	0f62      	lsrs	r2, r4, #29
 8000c3e:	004e      	lsls	r6, r1, #1
 8000c40:	0fcd      	lsrs	r5, r1, #31
 8000c42:	0a5b      	lsrs	r3, r3, #9
 8000c44:	0339      	lsls	r1, r7, #12
 8000c46:	4313      	orrs	r3, r2
 8000c48:	0a49      	lsrs	r1, r1, #9
 8000c4a:	00e2      	lsls	r2, r4, #3
 8000c4c:	0f44      	lsrs	r4, r0, #29
 8000c4e:	4321      	orrs	r1, r4
 8000c50:	4cc2      	ldr	r4, [pc, #776]	; (8000f5c <__aeabi_dsub+0x334>)
 8000c52:	4691      	mov	r9, r2
 8000c54:	4692      	mov	sl, r2
 8000c56:	00c0      	lsls	r0, r0, #3
 8000c58:	007a      	lsls	r2, r7, #1
 8000c5a:	4680      	mov	r8, r0
 8000c5c:	0d76      	lsrs	r6, r6, #21
 8000c5e:	0d52      	lsrs	r2, r2, #21
 8000c60:	0fff      	lsrs	r7, r7, #31
 8000c62:	42a2      	cmp	r2, r4
 8000c64:	d100      	bne.n	8000c68 <__aeabi_dsub+0x40>
 8000c66:	e0b4      	b.n	8000dd2 <__aeabi_dsub+0x1aa>
 8000c68:	2401      	movs	r4, #1
 8000c6a:	4067      	eors	r7, r4
 8000c6c:	46bb      	mov	fp, r7
 8000c6e:	42bd      	cmp	r5, r7
 8000c70:	d100      	bne.n	8000c74 <__aeabi_dsub+0x4c>
 8000c72:	e088      	b.n	8000d86 <__aeabi_dsub+0x15e>
 8000c74:	1ab4      	subs	r4, r6, r2
 8000c76:	46a4      	mov	ip, r4
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	dc00      	bgt.n	8000c7e <__aeabi_dsub+0x56>
 8000c7c:	e0b2      	b.n	8000de4 <__aeabi_dsub+0x1bc>
 8000c7e:	2a00      	cmp	r2, #0
 8000c80:	d100      	bne.n	8000c84 <__aeabi_dsub+0x5c>
 8000c82:	e0c5      	b.n	8000e10 <__aeabi_dsub+0x1e8>
 8000c84:	4ab5      	ldr	r2, [pc, #724]	; (8000f5c <__aeabi_dsub+0x334>)
 8000c86:	4296      	cmp	r6, r2
 8000c88:	d100      	bne.n	8000c8c <__aeabi_dsub+0x64>
 8000c8a:	e28b      	b.n	80011a4 <__aeabi_dsub+0x57c>
 8000c8c:	2280      	movs	r2, #128	; 0x80
 8000c8e:	0412      	lsls	r2, r2, #16
 8000c90:	4311      	orrs	r1, r2
 8000c92:	4662      	mov	r2, ip
 8000c94:	2a38      	cmp	r2, #56	; 0x38
 8000c96:	dd00      	ble.n	8000c9a <__aeabi_dsub+0x72>
 8000c98:	e1a1      	b.n	8000fde <__aeabi_dsub+0x3b6>
 8000c9a:	2a1f      	cmp	r2, #31
 8000c9c:	dd00      	ble.n	8000ca0 <__aeabi_dsub+0x78>
 8000c9e:	e216      	b.n	80010ce <__aeabi_dsub+0x4a6>
 8000ca0:	2720      	movs	r7, #32
 8000ca2:	000c      	movs	r4, r1
 8000ca4:	1abf      	subs	r7, r7, r2
 8000ca6:	40bc      	lsls	r4, r7
 8000ca8:	0002      	movs	r2, r0
 8000caa:	46a0      	mov	r8, r4
 8000cac:	4664      	mov	r4, ip
 8000cae:	40b8      	lsls	r0, r7
 8000cb0:	40e2      	lsrs	r2, r4
 8000cb2:	4644      	mov	r4, r8
 8000cb4:	4314      	orrs	r4, r2
 8000cb6:	0002      	movs	r2, r0
 8000cb8:	1e50      	subs	r0, r2, #1
 8000cba:	4182      	sbcs	r2, r0
 8000cbc:	4660      	mov	r0, ip
 8000cbe:	40c1      	lsrs	r1, r0
 8000cc0:	4322      	orrs	r2, r4
 8000cc2:	1a5b      	subs	r3, r3, r1
 8000cc4:	4649      	mov	r1, r9
 8000cc6:	1a8c      	subs	r4, r1, r2
 8000cc8:	45a1      	cmp	r9, r4
 8000cca:	4192      	sbcs	r2, r2
 8000ccc:	4252      	negs	r2, r2
 8000cce:	1a9b      	subs	r3, r3, r2
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	4643      	mov	r3, r8
 8000cd4:	021b      	lsls	r3, r3, #8
 8000cd6:	d400      	bmi.n	8000cda <__aeabi_dsub+0xb2>
 8000cd8:	e117      	b.n	8000f0a <__aeabi_dsub+0x2e2>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	025b      	lsls	r3, r3, #9
 8000cde:	0a5b      	lsrs	r3, r3, #9
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	4643      	mov	r3, r8
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d100      	bne.n	8000cea <__aeabi_dsub+0xc2>
 8000ce8:	e16c      	b.n	8000fc4 <__aeabi_dsub+0x39c>
 8000cea:	4640      	mov	r0, r8
 8000cec:	f000 fbd2 	bl	8001494 <__clzsi2>
 8000cf0:	0002      	movs	r2, r0
 8000cf2:	3a08      	subs	r2, #8
 8000cf4:	2120      	movs	r1, #32
 8000cf6:	0020      	movs	r0, r4
 8000cf8:	4643      	mov	r3, r8
 8000cfa:	1a89      	subs	r1, r1, r2
 8000cfc:	4093      	lsls	r3, r2
 8000cfe:	40c8      	lsrs	r0, r1
 8000d00:	4094      	lsls	r4, r2
 8000d02:	4303      	orrs	r3, r0
 8000d04:	4296      	cmp	r6, r2
 8000d06:	dd00      	ble.n	8000d0a <__aeabi_dsub+0xe2>
 8000d08:	e157      	b.n	8000fba <__aeabi_dsub+0x392>
 8000d0a:	1b96      	subs	r6, r2, r6
 8000d0c:	1c71      	adds	r1, r6, #1
 8000d0e:	291f      	cmp	r1, #31
 8000d10:	dd00      	ble.n	8000d14 <__aeabi_dsub+0xec>
 8000d12:	e1cb      	b.n	80010ac <__aeabi_dsub+0x484>
 8000d14:	2220      	movs	r2, #32
 8000d16:	0018      	movs	r0, r3
 8000d18:	0026      	movs	r6, r4
 8000d1a:	1a52      	subs	r2, r2, r1
 8000d1c:	4094      	lsls	r4, r2
 8000d1e:	4090      	lsls	r0, r2
 8000d20:	40ce      	lsrs	r6, r1
 8000d22:	40cb      	lsrs	r3, r1
 8000d24:	1e62      	subs	r2, r4, #1
 8000d26:	4194      	sbcs	r4, r2
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	4698      	mov	r8, r3
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	4304      	orrs	r4, r0
 8000d30:	0763      	lsls	r3, r4, #29
 8000d32:	d009      	beq.n	8000d48 <__aeabi_dsub+0x120>
 8000d34:	230f      	movs	r3, #15
 8000d36:	4023      	ands	r3, r4
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d005      	beq.n	8000d48 <__aeabi_dsub+0x120>
 8000d3c:	1d23      	adds	r3, r4, #4
 8000d3e:	42a3      	cmp	r3, r4
 8000d40:	41a4      	sbcs	r4, r4
 8000d42:	4264      	negs	r4, r4
 8000d44:	44a0      	add	r8, r4
 8000d46:	001c      	movs	r4, r3
 8000d48:	4643      	mov	r3, r8
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	d400      	bmi.n	8000d50 <__aeabi_dsub+0x128>
 8000d4e:	e0df      	b.n	8000f10 <__aeabi_dsub+0x2e8>
 8000d50:	4b82      	ldr	r3, [pc, #520]	; (8000f5c <__aeabi_dsub+0x334>)
 8000d52:	3601      	adds	r6, #1
 8000d54:	429e      	cmp	r6, r3
 8000d56:	d100      	bne.n	8000d5a <__aeabi_dsub+0x132>
 8000d58:	e0fb      	b.n	8000f52 <__aeabi_dsub+0x32a>
 8000d5a:	4642      	mov	r2, r8
 8000d5c:	4b80      	ldr	r3, [pc, #512]	; (8000f60 <__aeabi_dsub+0x338>)
 8000d5e:	08e4      	lsrs	r4, r4, #3
 8000d60:	401a      	ands	r2, r3
 8000d62:	0013      	movs	r3, r2
 8000d64:	0571      	lsls	r1, r6, #21
 8000d66:	0752      	lsls	r2, r2, #29
 8000d68:	025b      	lsls	r3, r3, #9
 8000d6a:	4322      	orrs	r2, r4
 8000d6c:	0b1b      	lsrs	r3, r3, #12
 8000d6e:	0d49      	lsrs	r1, r1, #21
 8000d70:	0509      	lsls	r1, r1, #20
 8000d72:	07ed      	lsls	r5, r5, #31
 8000d74:	4319      	orrs	r1, r3
 8000d76:	4329      	orrs	r1, r5
 8000d78:	0010      	movs	r0, r2
 8000d7a:	bcf0      	pop	{r4, r5, r6, r7}
 8000d7c:	46bb      	mov	fp, r7
 8000d7e:	46b2      	mov	sl, r6
 8000d80:	46a9      	mov	r9, r5
 8000d82:	46a0      	mov	r8, r4
 8000d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d86:	1ab4      	subs	r4, r6, r2
 8000d88:	46a4      	mov	ip, r4
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	dd58      	ble.n	8000e40 <__aeabi_dsub+0x218>
 8000d8e:	2a00      	cmp	r2, #0
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dsub+0x16c>
 8000d92:	e09e      	b.n	8000ed2 <__aeabi_dsub+0x2aa>
 8000d94:	4a71      	ldr	r2, [pc, #452]	; (8000f5c <__aeabi_dsub+0x334>)
 8000d96:	4296      	cmp	r6, r2
 8000d98:	d100      	bne.n	8000d9c <__aeabi_dsub+0x174>
 8000d9a:	e13b      	b.n	8001014 <__aeabi_dsub+0x3ec>
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	0412      	lsls	r2, r2, #16
 8000da0:	4311      	orrs	r1, r2
 8000da2:	4662      	mov	r2, ip
 8000da4:	2a38      	cmp	r2, #56	; 0x38
 8000da6:	dd00      	ble.n	8000daa <__aeabi_dsub+0x182>
 8000da8:	e0c1      	b.n	8000f2e <__aeabi_dsub+0x306>
 8000daa:	2a1f      	cmp	r2, #31
 8000dac:	dc00      	bgt.n	8000db0 <__aeabi_dsub+0x188>
 8000dae:	e1bb      	b.n	8001128 <__aeabi_dsub+0x500>
 8000db0:	000c      	movs	r4, r1
 8000db2:	3a20      	subs	r2, #32
 8000db4:	40d4      	lsrs	r4, r2
 8000db6:	0022      	movs	r2, r4
 8000db8:	4664      	mov	r4, ip
 8000dba:	2c20      	cmp	r4, #32
 8000dbc:	d004      	beq.n	8000dc8 <__aeabi_dsub+0x1a0>
 8000dbe:	2740      	movs	r7, #64	; 0x40
 8000dc0:	1b3f      	subs	r7, r7, r4
 8000dc2:	40b9      	lsls	r1, r7
 8000dc4:	4308      	orrs	r0, r1
 8000dc6:	4680      	mov	r8, r0
 8000dc8:	4644      	mov	r4, r8
 8000dca:	1e61      	subs	r1, r4, #1
 8000dcc:	418c      	sbcs	r4, r1
 8000dce:	4314      	orrs	r4, r2
 8000dd0:	e0b1      	b.n	8000f36 <__aeabi_dsub+0x30e>
 8000dd2:	000c      	movs	r4, r1
 8000dd4:	4304      	orrs	r4, r0
 8000dd6:	d02a      	beq.n	8000e2e <__aeabi_dsub+0x206>
 8000dd8:	46bb      	mov	fp, r7
 8000dda:	42bd      	cmp	r5, r7
 8000ddc:	d02d      	beq.n	8000e3a <__aeabi_dsub+0x212>
 8000dde:	4c61      	ldr	r4, [pc, #388]	; (8000f64 <__aeabi_dsub+0x33c>)
 8000de0:	46a4      	mov	ip, r4
 8000de2:	44b4      	add	ip, r6
 8000de4:	4664      	mov	r4, ip
 8000de6:	2c00      	cmp	r4, #0
 8000de8:	d05c      	beq.n	8000ea4 <__aeabi_dsub+0x27c>
 8000dea:	1b94      	subs	r4, r2, r6
 8000dec:	46a4      	mov	ip, r4
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d000      	beq.n	8000df4 <__aeabi_dsub+0x1cc>
 8000df2:	e115      	b.n	8001020 <__aeabi_dsub+0x3f8>
 8000df4:	464d      	mov	r5, r9
 8000df6:	431d      	orrs	r5, r3
 8000df8:	d100      	bne.n	8000dfc <__aeabi_dsub+0x1d4>
 8000dfa:	e1c3      	b.n	8001184 <__aeabi_dsub+0x55c>
 8000dfc:	1e65      	subs	r5, r4, #1
 8000dfe:	2c01      	cmp	r4, #1
 8000e00:	d100      	bne.n	8000e04 <__aeabi_dsub+0x1dc>
 8000e02:	e20c      	b.n	800121e <__aeabi_dsub+0x5f6>
 8000e04:	4e55      	ldr	r6, [pc, #340]	; (8000f5c <__aeabi_dsub+0x334>)
 8000e06:	42b4      	cmp	r4, r6
 8000e08:	d100      	bne.n	8000e0c <__aeabi_dsub+0x1e4>
 8000e0a:	e1f8      	b.n	80011fe <__aeabi_dsub+0x5d6>
 8000e0c:	46ac      	mov	ip, r5
 8000e0e:	e10e      	b.n	800102e <__aeabi_dsub+0x406>
 8000e10:	000a      	movs	r2, r1
 8000e12:	4302      	orrs	r2, r0
 8000e14:	d100      	bne.n	8000e18 <__aeabi_dsub+0x1f0>
 8000e16:	e136      	b.n	8001086 <__aeabi_dsub+0x45e>
 8000e18:	0022      	movs	r2, r4
 8000e1a:	3a01      	subs	r2, #1
 8000e1c:	2c01      	cmp	r4, #1
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_dsub+0x1fa>
 8000e20:	e1c6      	b.n	80011b0 <__aeabi_dsub+0x588>
 8000e22:	4c4e      	ldr	r4, [pc, #312]	; (8000f5c <__aeabi_dsub+0x334>)
 8000e24:	45a4      	cmp	ip, r4
 8000e26:	d100      	bne.n	8000e2a <__aeabi_dsub+0x202>
 8000e28:	e0f4      	b.n	8001014 <__aeabi_dsub+0x3ec>
 8000e2a:	4694      	mov	ip, r2
 8000e2c:	e731      	b.n	8000c92 <__aeabi_dsub+0x6a>
 8000e2e:	2401      	movs	r4, #1
 8000e30:	4067      	eors	r7, r4
 8000e32:	46bb      	mov	fp, r7
 8000e34:	42bd      	cmp	r5, r7
 8000e36:	d000      	beq.n	8000e3a <__aeabi_dsub+0x212>
 8000e38:	e71c      	b.n	8000c74 <__aeabi_dsub+0x4c>
 8000e3a:	4c4a      	ldr	r4, [pc, #296]	; (8000f64 <__aeabi_dsub+0x33c>)
 8000e3c:	46a4      	mov	ip, r4
 8000e3e:	44b4      	add	ip, r6
 8000e40:	4664      	mov	r4, ip
 8000e42:	2c00      	cmp	r4, #0
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dsub+0x220>
 8000e46:	e0cf      	b.n	8000fe8 <__aeabi_dsub+0x3c0>
 8000e48:	1b94      	subs	r4, r2, r6
 8000e4a:	46a4      	mov	ip, r4
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_dsub+0x22a>
 8000e50:	e15c      	b.n	800110c <__aeabi_dsub+0x4e4>
 8000e52:	4e42      	ldr	r6, [pc, #264]	; (8000f5c <__aeabi_dsub+0x334>)
 8000e54:	42b2      	cmp	r2, r6
 8000e56:	d100      	bne.n	8000e5a <__aeabi_dsub+0x232>
 8000e58:	e1ec      	b.n	8001234 <__aeabi_dsub+0x60c>
 8000e5a:	2680      	movs	r6, #128	; 0x80
 8000e5c:	0436      	lsls	r6, r6, #16
 8000e5e:	4333      	orrs	r3, r6
 8000e60:	4664      	mov	r4, ip
 8000e62:	2c38      	cmp	r4, #56	; 0x38
 8000e64:	dd00      	ble.n	8000e68 <__aeabi_dsub+0x240>
 8000e66:	e1b3      	b.n	80011d0 <__aeabi_dsub+0x5a8>
 8000e68:	2c1f      	cmp	r4, #31
 8000e6a:	dd00      	ble.n	8000e6e <__aeabi_dsub+0x246>
 8000e6c:	e238      	b.n	80012e0 <__aeabi_dsub+0x6b8>
 8000e6e:	2620      	movs	r6, #32
 8000e70:	1b36      	subs	r6, r6, r4
 8000e72:	001c      	movs	r4, r3
 8000e74:	40b4      	lsls	r4, r6
 8000e76:	464f      	mov	r7, r9
 8000e78:	46a0      	mov	r8, r4
 8000e7a:	4664      	mov	r4, ip
 8000e7c:	40e7      	lsrs	r7, r4
 8000e7e:	4644      	mov	r4, r8
 8000e80:	433c      	orrs	r4, r7
 8000e82:	464f      	mov	r7, r9
 8000e84:	40b7      	lsls	r7, r6
 8000e86:	003e      	movs	r6, r7
 8000e88:	1e77      	subs	r7, r6, #1
 8000e8a:	41be      	sbcs	r6, r7
 8000e8c:	4334      	orrs	r4, r6
 8000e8e:	4666      	mov	r6, ip
 8000e90:	40f3      	lsrs	r3, r6
 8000e92:	18c9      	adds	r1, r1, r3
 8000e94:	1824      	adds	r4, r4, r0
 8000e96:	4284      	cmp	r4, r0
 8000e98:	419b      	sbcs	r3, r3
 8000e9a:	425b      	negs	r3, r3
 8000e9c:	4698      	mov	r8, r3
 8000e9e:	0016      	movs	r6, r2
 8000ea0:	4488      	add	r8, r1
 8000ea2:	e04e      	b.n	8000f42 <__aeabi_dsub+0x31a>
 8000ea4:	4a30      	ldr	r2, [pc, #192]	; (8000f68 <__aeabi_dsub+0x340>)
 8000ea6:	1c74      	adds	r4, r6, #1
 8000ea8:	4214      	tst	r4, r2
 8000eaa:	d000      	beq.n	8000eae <__aeabi_dsub+0x286>
 8000eac:	e0d6      	b.n	800105c <__aeabi_dsub+0x434>
 8000eae:	464a      	mov	r2, r9
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	2e00      	cmp	r6, #0
 8000eb4:	d000      	beq.n	8000eb8 <__aeabi_dsub+0x290>
 8000eb6:	e15b      	b.n	8001170 <__aeabi_dsub+0x548>
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	d100      	bne.n	8000ebe <__aeabi_dsub+0x296>
 8000ebc:	e1a5      	b.n	800120a <__aeabi_dsub+0x5e2>
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	4302      	orrs	r2, r0
 8000ec2:	d000      	beq.n	8000ec6 <__aeabi_dsub+0x29e>
 8000ec4:	e1bb      	b.n	800123e <__aeabi_dsub+0x616>
 8000ec6:	464a      	mov	r2, r9
 8000ec8:	0759      	lsls	r1, r3, #29
 8000eca:	08d2      	lsrs	r2, r2, #3
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	08db      	lsrs	r3, r3, #3
 8000ed0:	e027      	b.n	8000f22 <__aeabi_dsub+0x2fa>
 8000ed2:	000a      	movs	r2, r1
 8000ed4:	4302      	orrs	r2, r0
 8000ed6:	d100      	bne.n	8000eda <__aeabi_dsub+0x2b2>
 8000ed8:	e174      	b.n	80011c4 <__aeabi_dsub+0x59c>
 8000eda:	0022      	movs	r2, r4
 8000edc:	3a01      	subs	r2, #1
 8000ede:	2c01      	cmp	r4, #1
 8000ee0:	d005      	beq.n	8000eee <__aeabi_dsub+0x2c6>
 8000ee2:	4c1e      	ldr	r4, [pc, #120]	; (8000f5c <__aeabi_dsub+0x334>)
 8000ee4:	45a4      	cmp	ip, r4
 8000ee6:	d100      	bne.n	8000eea <__aeabi_dsub+0x2c2>
 8000ee8:	e094      	b.n	8001014 <__aeabi_dsub+0x3ec>
 8000eea:	4694      	mov	ip, r2
 8000eec:	e759      	b.n	8000da2 <__aeabi_dsub+0x17a>
 8000eee:	4448      	add	r0, r9
 8000ef0:	4548      	cmp	r0, r9
 8000ef2:	4192      	sbcs	r2, r2
 8000ef4:	185b      	adds	r3, r3, r1
 8000ef6:	4698      	mov	r8, r3
 8000ef8:	0004      	movs	r4, r0
 8000efa:	4252      	negs	r2, r2
 8000efc:	4490      	add	r8, r2
 8000efe:	4643      	mov	r3, r8
 8000f00:	2602      	movs	r6, #2
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	d500      	bpl.n	8000f08 <__aeabi_dsub+0x2e0>
 8000f06:	e0c4      	b.n	8001092 <__aeabi_dsub+0x46a>
 8000f08:	3e01      	subs	r6, #1
 8000f0a:	0763      	lsls	r3, r4, #29
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_dsub+0x2e8>
 8000f0e:	e711      	b.n	8000d34 <__aeabi_dsub+0x10c>
 8000f10:	4643      	mov	r3, r8
 8000f12:	46b4      	mov	ip, r6
 8000f14:	0759      	lsls	r1, r3, #29
 8000f16:	08e2      	lsrs	r2, r4, #3
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	08db      	lsrs	r3, r3, #3
 8000f1c:	490f      	ldr	r1, [pc, #60]	; (8000f5c <__aeabi_dsub+0x334>)
 8000f1e:	458c      	cmp	ip, r1
 8000f20:	d040      	beq.n	8000fa4 <__aeabi_dsub+0x37c>
 8000f22:	4661      	mov	r1, ip
 8000f24:	031b      	lsls	r3, r3, #12
 8000f26:	0549      	lsls	r1, r1, #21
 8000f28:	0b1b      	lsrs	r3, r3, #12
 8000f2a:	0d49      	lsrs	r1, r1, #21
 8000f2c:	e720      	b.n	8000d70 <__aeabi_dsub+0x148>
 8000f2e:	4301      	orrs	r1, r0
 8000f30:	000c      	movs	r4, r1
 8000f32:	1e61      	subs	r1, r4, #1
 8000f34:	418c      	sbcs	r4, r1
 8000f36:	444c      	add	r4, r9
 8000f38:	454c      	cmp	r4, r9
 8000f3a:	4192      	sbcs	r2, r2
 8000f3c:	4252      	negs	r2, r2
 8000f3e:	4690      	mov	r8, r2
 8000f40:	4498      	add	r8, r3
 8000f42:	4643      	mov	r3, r8
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	d5e0      	bpl.n	8000f0a <__aeabi_dsub+0x2e2>
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__aeabi_dsub+0x334>)
 8000f4a:	3601      	adds	r6, #1
 8000f4c:	429e      	cmp	r6, r3
 8000f4e:	d000      	beq.n	8000f52 <__aeabi_dsub+0x32a>
 8000f50:	e09f      	b.n	8001092 <__aeabi_dsub+0x46a>
 8000f52:	0031      	movs	r1, r6
 8000f54:	2300      	movs	r3, #0
 8000f56:	2200      	movs	r2, #0
 8000f58:	e70a      	b.n	8000d70 <__aeabi_dsub+0x148>
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	000007ff 	.word	0x000007ff
 8000f60:	ff7fffff 	.word	0xff7fffff
 8000f64:	fffff801 	.word	0xfffff801
 8000f68:	000007fe 	.word	0x000007fe
 8000f6c:	2a00      	cmp	r2, #0
 8000f6e:	d100      	bne.n	8000f72 <__aeabi_dsub+0x34a>
 8000f70:	e160      	b.n	8001234 <__aeabi_dsub+0x60c>
 8000f72:	000a      	movs	r2, r1
 8000f74:	4302      	orrs	r2, r0
 8000f76:	d04d      	beq.n	8001014 <__aeabi_dsub+0x3ec>
 8000f78:	464a      	mov	r2, r9
 8000f7a:	075c      	lsls	r4, r3, #29
 8000f7c:	08d2      	lsrs	r2, r2, #3
 8000f7e:	4322      	orrs	r2, r4
 8000f80:	2480      	movs	r4, #128	; 0x80
 8000f82:	08db      	lsrs	r3, r3, #3
 8000f84:	0324      	lsls	r4, r4, #12
 8000f86:	4223      	tst	r3, r4
 8000f88:	d007      	beq.n	8000f9a <__aeabi_dsub+0x372>
 8000f8a:	08ce      	lsrs	r6, r1, #3
 8000f8c:	4226      	tst	r6, r4
 8000f8e:	d104      	bne.n	8000f9a <__aeabi_dsub+0x372>
 8000f90:	465d      	mov	r5, fp
 8000f92:	0033      	movs	r3, r6
 8000f94:	08c2      	lsrs	r2, r0, #3
 8000f96:	0749      	lsls	r1, r1, #29
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	0f51      	lsrs	r1, r2, #29
 8000f9c:	00d2      	lsls	r2, r2, #3
 8000f9e:	08d2      	lsrs	r2, r2, #3
 8000fa0:	0749      	lsls	r1, r1, #29
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	0011      	movs	r1, r2
 8000fa6:	4319      	orrs	r1, r3
 8000fa8:	d100      	bne.n	8000fac <__aeabi_dsub+0x384>
 8000faa:	e1c8      	b.n	800133e <__aeabi_dsub+0x716>
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	0309      	lsls	r1, r1, #12
 8000fb0:	430b      	orrs	r3, r1
 8000fb2:	031b      	lsls	r3, r3, #12
 8000fb4:	49d5      	ldr	r1, [pc, #852]	; (800130c <__aeabi_dsub+0x6e4>)
 8000fb6:	0b1b      	lsrs	r3, r3, #12
 8000fb8:	e6da      	b.n	8000d70 <__aeabi_dsub+0x148>
 8000fba:	49d5      	ldr	r1, [pc, #852]	; (8001310 <__aeabi_dsub+0x6e8>)
 8000fbc:	1ab6      	subs	r6, r6, r2
 8000fbe:	400b      	ands	r3, r1
 8000fc0:	4698      	mov	r8, r3
 8000fc2:	e6b5      	b.n	8000d30 <__aeabi_dsub+0x108>
 8000fc4:	0020      	movs	r0, r4
 8000fc6:	f000 fa65 	bl	8001494 <__clzsi2>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	3218      	adds	r2, #24
 8000fce:	2a1f      	cmp	r2, #31
 8000fd0:	dc00      	bgt.n	8000fd4 <__aeabi_dsub+0x3ac>
 8000fd2:	e68f      	b.n	8000cf4 <__aeabi_dsub+0xcc>
 8000fd4:	0023      	movs	r3, r4
 8000fd6:	3808      	subs	r0, #8
 8000fd8:	4083      	lsls	r3, r0
 8000fda:	2400      	movs	r4, #0
 8000fdc:	e692      	b.n	8000d04 <__aeabi_dsub+0xdc>
 8000fde:	4308      	orrs	r0, r1
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	1e50      	subs	r0, r2, #1
 8000fe4:	4182      	sbcs	r2, r0
 8000fe6:	e66d      	b.n	8000cc4 <__aeabi_dsub+0x9c>
 8000fe8:	4cca      	ldr	r4, [pc, #808]	; (8001314 <__aeabi_dsub+0x6ec>)
 8000fea:	1c72      	adds	r2, r6, #1
 8000fec:	4222      	tst	r2, r4
 8000fee:	d000      	beq.n	8000ff2 <__aeabi_dsub+0x3ca>
 8000ff0:	e0ad      	b.n	800114e <__aeabi_dsub+0x526>
 8000ff2:	464a      	mov	r2, r9
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	2e00      	cmp	r6, #0
 8000ff8:	d1b8      	bne.n	8000f6c <__aeabi_dsub+0x344>
 8000ffa:	2a00      	cmp	r2, #0
 8000ffc:	d100      	bne.n	8001000 <__aeabi_dsub+0x3d8>
 8000ffe:	e158      	b.n	80012b2 <__aeabi_dsub+0x68a>
 8001000:	000a      	movs	r2, r1
 8001002:	4302      	orrs	r2, r0
 8001004:	d000      	beq.n	8001008 <__aeabi_dsub+0x3e0>
 8001006:	e159      	b.n	80012bc <__aeabi_dsub+0x694>
 8001008:	464a      	mov	r2, r9
 800100a:	0759      	lsls	r1, r3, #29
 800100c:	08d2      	lsrs	r2, r2, #3
 800100e:	430a      	orrs	r2, r1
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	e786      	b.n	8000f22 <__aeabi_dsub+0x2fa>
 8001014:	464a      	mov	r2, r9
 8001016:	0759      	lsls	r1, r3, #29
 8001018:	08d2      	lsrs	r2, r2, #3
 800101a:	430a      	orrs	r2, r1
 800101c:	08db      	lsrs	r3, r3, #3
 800101e:	e7c1      	b.n	8000fa4 <__aeabi_dsub+0x37c>
 8001020:	4dba      	ldr	r5, [pc, #744]	; (800130c <__aeabi_dsub+0x6e4>)
 8001022:	42aa      	cmp	r2, r5
 8001024:	d100      	bne.n	8001028 <__aeabi_dsub+0x400>
 8001026:	e11e      	b.n	8001266 <__aeabi_dsub+0x63e>
 8001028:	2580      	movs	r5, #128	; 0x80
 800102a:	042d      	lsls	r5, r5, #16
 800102c:	432b      	orrs	r3, r5
 800102e:	4664      	mov	r4, ip
 8001030:	2c38      	cmp	r4, #56	; 0x38
 8001032:	dc5d      	bgt.n	80010f0 <__aeabi_dsub+0x4c8>
 8001034:	2c1f      	cmp	r4, #31
 8001036:	dd00      	ble.n	800103a <__aeabi_dsub+0x412>
 8001038:	e0d0      	b.n	80011dc <__aeabi_dsub+0x5b4>
 800103a:	2520      	movs	r5, #32
 800103c:	4667      	mov	r7, ip
 800103e:	1b2d      	subs	r5, r5, r4
 8001040:	464e      	mov	r6, r9
 8001042:	001c      	movs	r4, r3
 8001044:	40fe      	lsrs	r6, r7
 8001046:	40ac      	lsls	r4, r5
 8001048:	4334      	orrs	r4, r6
 800104a:	464e      	mov	r6, r9
 800104c:	40ae      	lsls	r6, r5
 800104e:	0035      	movs	r5, r6
 8001050:	40fb      	lsrs	r3, r7
 8001052:	1e6e      	subs	r6, r5, #1
 8001054:	41b5      	sbcs	r5, r6
 8001056:	1ac9      	subs	r1, r1, r3
 8001058:	432c      	orrs	r4, r5
 800105a:	e04e      	b.n	80010fa <__aeabi_dsub+0x4d2>
 800105c:	464a      	mov	r2, r9
 800105e:	1a14      	subs	r4, r2, r0
 8001060:	45a1      	cmp	r9, r4
 8001062:	4192      	sbcs	r2, r2
 8001064:	4252      	negs	r2, r2
 8001066:	4690      	mov	r8, r2
 8001068:	1a5f      	subs	r7, r3, r1
 800106a:	003a      	movs	r2, r7
 800106c:	4647      	mov	r7, r8
 800106e:	1bd2      	subs	r2, r2, r7
 8001070:	4690      	mov	r8, r2
 8001072:	0212      	lsls	r2, r2, #8
 8001074:	d500      	bpl.n	8001078 <__aeabi_dsub+0x450>
 8001076:	e08b      	b.n	8001190 <__aeabi_dsub+0x568>
 8001078:	4642      	mov	r2, r8
 800107a:	4322      	orrs	r2, r4
 800107c:	d000      	beq.n	8001080 <__aeabi_dsub+0x458>
 800107e:	e630      	b.n	8000ce2 <__aeabi_dsub+0xba>
 8001080:	2300      	movs	r3, #0
 8001082:	2500      	movs	r5, #0
 8001084:	e74d      	b.n	8000f22 <__aeabi_dsub+0x2fa>
 8001086:	464a      	mov	r2, r9
 8001088:	0759      	lsls	r1, r3, #29
 800108a:	08d2      	lsrs	r2, r2, #3
 800108c:	430a      	orrs	r2, r1
 800108e:	08db      	lsrs	r3, r3, #3
 8001090:	e744      	b.n	8000f1c <__aeabi_dsub+0x2f4>
 8001092:	4642      	mov	r2, r8
 8001094:	4b9e      	ldr	r3, [pc, #632]	; (8001310 <__aeabi_dsub+0x6e8>)
 8001096:	0861      	lsrs	r1, r4, #1
 8001098:	401a      	ands	r2, r3
 800109a:	0013      	movs	r3, r2
 800109c:	2201      	movs	r2, #1
 800109e:	4014      	ands	r4, r2
 80010a0:	430c      	orrs	r4, r1
 80010a2:	07da      	lsls	r2, r3, #31
 80010a4:	085b      	lsrs	r3, r3, #1
 80010a6:	4698      	mov	r8, r3
 80010a8:	4314      	orrs	r4, r2
 80010aa:	e641      	b.n	8000d30 <__aeabi_dsub+0x108>
 80010ac:	001a      	movs	r2, r3
 80010ae:	3e1f      	subs	r6, #31
 80010b0:	40f2      	lsrs	r2, r6
 80010b2:	0016      	movs	r6, r2
 80010b4:	2920      	cmp	r1, #32
 80010b6:	d003      	beq.n	80010c0 <__aeabi_dsub+0x498>
 80010b8:	2240      	movs	r2, #64	; 0x40
 80010ba:	1a51      	subs	r1, r2, r1
 80010bc:	408b      	lsls	r3, r1
 80010be:	431c      	orrs	r4, r3
 80010c0:	1e62      	subs	r2, r4, #1
 80010c2:	4194      	sbcs	r4, r2
 80010c4:	2300      	movs	r3, #0
 80010c6:	4334      	orrs	r4, r6
 80010c8:	4698      	mov	r8, r3
 80010ca:	2600      	movs	r6, #0
 80010cc:	e71d      	b.n	8000f0a <__aeabi_dsub+0x2e2>
 80010ce:	000c      	movs	r4, r1
 80010d0:	3a20      	subs	r2, #32
 80010d2:	40d4      	lsrs	r4, r2
 80010d4:	0022      	movs	r2, r4
 80010d6:	4664      	mov	r4, ip
 80010d8:	2c20      	cmp	r4, #32
 80010da:	d004      	beq.n	80010e6 <__aeabi_dsub+0x4be>
 80010dc:	2740      	movs	r7, #64	; 0x40
 80010de:	1b3f      	subs	r7, r7, r4
 80010e0:	40b9      	lsls	r1, r7
 80010e2:	4308      	orrs	r0, r1
 80010e4:	4680      	mov	r8, r0
 80010e6:	4644      	mov	r4, r8
 80010e8:	1e61      	subs	r1, r4, #1
 80010ea:	418c      	sbcs	r4, r1
 80010ec:	4322      	orrs	r2, r4
 80010ee:	e5e9      	b.n	8000cc4 <__aeabi_dsub+0x9c>
 80010f0:	464c      	mov	r4, r9
 80010f2:	4323      	orrs	r3, r4
 80010f4:	001c      	movs	r4, r3
 80010f6:	1e63      	subs	r3, r4, #1
 80010f8:	419c      	sbcs	r4, r3
 80010fa:	1b04      	subs	r4, r0, r4
 80010fc:	42a0      	cmp	r0, r4
 80010fe:	419b      	sbcs	r3, r3
 8001100:	425b      	negs	r3, r3
 8001102:	1acb      	subs	r3, r1, r3
 8001104:	4698      	mov	r8, r3
 8001106:	465d      	mov	r5, fp
 8001108:	0016      	movs	r6, r2
 800110a:	e5e2      	b.n	8000cd2 <__aeabi_dsub+0xaa>
 800110c:	464e      	mov	r6, r9
 800110e:	431e      	orrs	r6, r3
 8001110:	d100      	bne.n	8001114 <__aeabi_dsub+0x4ec>
 8001112:	e0ae      	b.n	8001272 <__aeabi_dsub+0x64a>
 8001114:	1e66      	subs	r6, r4, #1
 8001116:	2c01      	cmp	r4, #1
 8001118:	d100      	bne.n	800111c <__aeabi_dsub+0x4f4>
 800111a:	e0fd      	b.n	8001318 <__aeabi_dsub+0x6f0>
 800111c:	4f7b      	ldr	r7, [pc, #492]	; (800130c <__aeabi_dsub+0x6e4>)
 800111e:	42bc      	cmp	r4, r7
 8001120:	d100      	bne.n	8001124 <__aeabi_dsub+0x4fc>
 8001122:	e107      	b.n	8001334 <__aeabi_dsub+0x70c>
 8001124:	46b4      	mov	ip, r6
 8001126:	e69b      	b.n	8000e60 <__aeabi_dsub+0x238>
 8001128:	4664      	mov	r4, ip
 800112a:	2220      	movs	r2, #32
 800112c:	1b12      	subs	r2, r2, r4
 800112e:	000c      	movs	r4, r1
 8001130:	4094      	lsls	r4, r2
 8001132:	0007      	movs	r7, r0
 8001134:	4090      	lsls	r0, r2
 8001136:	46a0      	mov	r8, r4
 8001138:	4664      	mov	r4, ip
 800113a:	1e42      	subs	r2, r0, #1
 800113c:	4190      	sbcs	r0, r2
 800113e:	4662      	mov	r2, ip
 8001140:	40e7      	lsrs	r7, r4
 8001142:	4644      	mov	r4, r8
 8001144:	40d1      	lsrs	r1, r2
 8001146:	433c      	orrs	r4, r7
 8001148:	4304      	orrs	r4, r0
 800114a:	185b      	adds	r3, r3, r1
 800114c:	e6f3      	b.n	8000f36 <__aeabi_dsub+0x30e>
 800114e:	4c6f      	ldr	r4, [pc, #444]	; (800130c <__aeabi_dsub+0x6e4>)
 8001150:	42a2      	cmp	r2, r4
 8001152:	d100      	bne.n	8001156 <__aeabi_dsub+0x52e>
 8001154:	e0d5      	b.n	8001302 <__aeabi_dsub+0x6da>
 8001156:	4448      	add	r0, r9
 8001158:	185b      	adds	r3, r3, r1
 800115a:	4548      	cmp	r0, r9
 800115c:	4189      	sbcs	r1, r1
 800115e:	4249      	negs	r1, r1
 8001160:	185b      	adds	r3, r3, r1
 8001162:	07dc      	lsls	r4, r3, #31
 8001164:	0840      	lsrs	r0, r0, #1
 8001166:	085b      	lsrs	r3, r3, #1
 8001168:	4698      	mov	r8, r3
 800116a:	0016      	movs	r6, r2
 800116c:	4304      	orrs	r4, r0
 800116e:	e6cc      	b.n	8000f0a <__aeabi_dsub+0x2e2>
 8001170:	2a00      	cmp	r2, #0
 8001172:	d000      	beq.n	8001176 <__aeabi_dsub+0x54e>
 8001174:	e082      	b.n	800127c <__aeabi_dsub+0x654>
 8001176:	000a      	movs	r2, r1
 8001178:	4302      	orrs	r2, r0
 800117a:	d140      	bne.n	80011fe <__aeabi_dsub+0x5d6>
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	2500      	movs	r5, #0
 8001180:	031b      	lsls	r3, r3, #12
 8001182:	e713      	b.n	8000fac <__aeabi_dsub+0x384>
 8001184:	074b      	lsls	r3, r1, #29
 8001186:	08c2      	lsrs	r2, r0, #3
 8001188:	431a      	orrs	r2, r3
 800118a:	465d      	mov	r5, fp
 800118c:	08cb      	lsrs	r3, r1, #3
 800118e:	e6c5      	b.n	8000f1c <__aeabi_dsub+0x2f4>
 8001190:	464a      	mov	r2, r9
 8001192:	1a84      	subs	r4, r0, r2
 8001194:	42a0      	cmp	r0, r4
 8001196:	4192      	sbcs	r2, r2
 8001198:	1acb      	subs	r3, r1, r3
 800119a:	4252      	negs	r2, r2
 800119c:	1a9b      	subs	r3, r3, r2
 800119e:	4698      	mov	r8, r3
 80011a0:	465d      	mov	r5, fp
 80011a2:	e59e      	b.n	8000ce2 <__aeabi_dsub+0xba>
 80011a4:	464a      	mov	r2, r9
 80011a6:	0759      	lsls	r1, r3, #29
 80011a8:	08d2      	lsrs	r2, r2, #3
 80011aa:	430a      	orrs	r2, r1
 80011ac:	08db      	lsrs	r3, r3, #3
 80011ae:	e6f9      	b.n	8000fa4 <__aeabi_dsub+0x37c>
 80011b0:	464a      	mov	r2, r9
 80011b2:	1a14      	subs	r4, r2, r0
 80011b4:	45a1      	cmp	r9, r4
 80011b6:	4192      	sbcs	r2, r2
 80011b8:	1a5b      	subs	r3, r3, r1
 80011ba:	4252      	negs	r2, r2
 80011bc:	1a9b      	subs	r3, r3, r2
 80011be:	4698      	mov	r8, r3
 80011c0:	2601      	movs	r6, #1
 80011c2:	e586      	b.n	8000cd2 <__aeabi_dsub+0xaa>
 80011c4:	464a      	mov	r2, r9
 80011c6:	0759      	lsls	r1, r3, #29
 80011c8:	08d2      	lsrs	r2, r2, #3
 80011ca:	430a      	orrs	r2, r1
 80011cc:	08db      	lsrs	r3, r3, #3
 80011ce:	e6a5      	b.n	8000f1c <__aeabi_dsub+0x2f4>
 80011d0:	464c      	mov	r4, r9
 80011d2:	4323      	orrs	r3, r4
 80011d4:	001c      	movs	r4, r3
 80011d6:	1e63      	subs	r3, r4, #1
 80011d8:	419c      	sbcs	r4, r3
 80011da:	e65b      	b.n	8000e94 <__aeabi_dsub+0x26c>
 80011dc:	4665      	mov	r5, ip
 80011de:	001e      	movs	r6, r3
 80011e0:	3d20      	subs	r5, #32
 80011e2:	40ee      	lsrs	r6, r5
 80011e4:	2c20      	cmp	r4, #32
 80011e6:	d005      	beq.n	80011f4 <__aeabi_dsub+0x5cc>
 80011e8:	2540      	movs	r5, #64	; 0x40
 80011ea:	1b2d      	subs	r5, r5, r4
 80011ec:	40ab      	lsls	r3, r5
 80011ee:	464c      	mov	r4, r9
 80011f0:	431c      	orrs	r4, r3
 80011f2:	46a2      	mov	sl, r4
 80011f4:	4654      	mov	r4, sl
 80011f6:	1e63      	subs	r3, r4, #1
 80011f8:	419c      	sbcs	r4, r3
 80011fa:	4334      	orrs	r4, r6
 80011fc:	e77d      	b.n	80010fa <__aeabi_dsub+0x4d2>
 80011fe:	074b      	lsls	r3, r1, #29
 8001200:	08c2      	lsrs	r2, r0, #3
 8001202:	431a      	orrs	r2, r3
 8001204:	465d      	mov	r5, fp
 8001206:	08cb      	lsrs	r3, r1, #3
 8001208:	e6cc      	b.n	8000fa4 <__aeabi_dsub+0x37c>
 800120a:	000a      	movs	r2, r1
 800120c:	4302      	orrs	r2, r0
 800120e:	d100      	bne.n	8001212 <__aeabi_dsub+0x5ea>
 8001210:	e736      	b.n	8001080 <__aeabi_dsub+0x458>
 8001212:	074b      	lsls	r3, r1, #29
 8001214:	08c2      	lsrs	r2, r0, #3
 8001216:	431a      	orrs	r2, r3
 8001218:	465d      	mov	r5, fp
 800121a:	08cb      	lsrs	r3, r1, #3
 800121c:	e681      	b.n	8000f22 <__aeabi_dsub+0x2fa>
 800121e:	464a      	mov	r2, r9
 8001220:	1a84      	subs	r4, r0, r2
 8001222:	42a0      	cmp	r0, r4
 8001224:	4192      	sbcs	r2, r2
 8001226:	1acb      	subs	r3, r1, r3
 8001228:	4252      	negs	r2, r2
 800122a:	1a9b      	subs	r3, r3, r2
 800122c:	4698      	mov	r8, r3
 800122e:	465d      	mov	r5, fp
 8001230:	2601      	movs	r6, #1
 8001232:	e54e      	b.n	8000cd2 <__aeabi_dsub+0xaa>
 8001234:	074b      	lsls	r3, r1, #29
 8001236:	08c2      	lsrs	r2, r0, #3
 8001238:	431a      	orrs	r2, r3
 800123a:	08cb      	lsrs	r3, r1, #3
 800123c:	e6b2      	b.n	8000fa4 <__aeabi_dsub+0x37c>
 800123e:	464a      	mov	r2, r9
 8001240:	1a14      	subs	r4, r2, r0
 8001242:	45a1      	cmp	r9, r4
 8001244:	4192      	sbcs	r2, r2
 8001246:	1a5f      	subs	r7, r3, r1
 8001248:	4252      	negs	r2, r2
 800124a:	1aba      	subs	r2, r7, r2
 800124c:	4690      	mov	r8, r2
 800124e:	0212      	lsls	r2, r2, #8
 8001250:	d56b      	bpl.n	800132a <__aeabi_dsub+0x702>
 8001252:	464a      	mov	r2, r9
 8001254:	1a84      	subs	r4, r0, r2
 8001256:	42a0      	cmp	r0, r4
 8001258:	4192      	sbcs	r2, r2
 800125a:	1acb      	subs	r3, r1, r3
 800125c:	4252      	negs	r2, r2
 800125e:	1a9b      	subs	r3, r3, r2
 8001260:	4698      	mov	r8, r3
 8001262:	465d      	mov	r5, fp
 8001264:	e564      	b.n	8000d30 <__aeabi_dsub+0x108>
 8001266:	074b      	lsls	r3, r1, #29
 8001268:	08c2      	lsrs	r2, r0, #3
 800126a:	431a      	orrs	r2, r3
 800126c:	465d      	mov	r5, fp
 800126e:	08cb      	lsrs	r3, r1, #3
 8001270:	e698      	b.n	8000fa4 <__aeabi_dsub+0x37c>
 8001272:	074b      	lsls	r3, r1, #29
 8001274:	08c2      	lsrs	r2, r0, #3
 8001276:	431a      	orrs	r2, r3
 8001278:	08cb      	lsrs	r3, r1, #3
 800127a:	e64f      	b.n	8000f1c <__aeabi_dsub+0x2f4>
 800127c:	000a      	movs	r2, r1
 800127e:	4302      	orrs	r2, r0
 8001280:	d090      	beq.n	80011a4 <__aeabi_dsub+0x57c>
 8001282:	464a      	mov	r2, r9
 8001284:	075c      	lsls	r4, r3, #29
 8001286:	08d2      	lsrs	r2, r2, #3
 8001288:	4314      	orrs	r4, r2
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	08db      	lsrs	r3, r3, #3
 800128e:	0312      	lsls	r2, r2, #12
 8001290:	4213      	tst	r3, r2
 8001292:	d008      	beq.n	80012a6 <__aeabi_dsub+0x67e>
 8001294:	08ce      	lsrs	r6, r1, #3
 8001296:	4216      	tst	r6, r2
 8001298:	d105      	bne.n	80012a6 <__aeabi_dsub+0x67e>
 800129a:	08c0      	lsrs	r0, r0, #3
 800129c:	0749      	lsls	r1, r1, #29
 800129e:	4308      	orrs	r0, r1
 80012a0:	0004      	movs	r4, r0
 80012a2:	465d      	mov	r5, fp
 80012a4:	0033      	movs	r3, r6
 80012a6:	0f61      	lsrs	r1, r4, #29
 80012a8:	00e2      	lsls	r2, r4, #3
 80012aa:	0749      	lsls	r1, r1, #29
 80012ac:	08d2      	lsrs	r2, r2, #3
 80012ae:	430a      	orrs	r2, r1
 80012b0:	e678      	b.n	8000fa4 <__aeabi_dsub+0x37c>
 80012b2:	074b      	lsls	r3, r1, #29
 80012b4:	08c2      	lsrs	r2, r0, #3
 80012b6:	431a      	orrs	r2, r3
 80012b8:	08cb      	lsrs	r3, r1, #3
 80012ba:	e632      	b.n	8000f22 <__aeabi_dsub+0x2fa>
 80012bc:	4448      	add	r0, r9
 80012be:	185b      	adds	r3, r3, r1
 80012c0:	4548      	cmp	r0, r9
 80012c2:	4192      	sbcs	r2, r2
 80012c4:	4698      	mov	r8, r3
 80012c6:	4252      	negs	r2, r2
 80012c8:	4490      	add	r8, r2
 80012ca:	4643      	mov	r3, r8
 80012cc:	0004      	movs	r4, r0
 80012ce:	021b      	lsls	r3, r3, #8
 80012d0:	d400      	bmi.n	80012d4 <__aeabi_dsub+0x6ac>
 80012d2:	e61a      	b.n	8000f0a <__aeabi_dsub+0x2e2>
 80012d4:	4642      	mov	r2, r8
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <__aeabi_dsub+0x6e8>)
 80012d8:	2601      	movs	r6, #1
 80012da:	401a      	ands	r2, r3
 80012dc:	4690      	mov	r8, r2
 80012de:	e614      	b.n	8000f0a <__aeabi_dsub+0x2e2>
 80012e0:	4666      	mov	r6, ip
 80012e2:	001f      	movs	r7, r3
 80012e4:	3e20      	subs	r6, #32
 80012e6:	40f7      	lsrs	r7, r6
 80012e8:	2c20      	cmp	r4, #32
 80012ea:	d005      	beq.n	80012f8 <__aeabi_dsub+0x6d0>
 80012ec:	2640      	movs	r6, #64	; 0x40
 80012ee:	1b36      	subs	r6, r6, r4
 80012f0:	40b3      	lsls	r3, r6
 80012f2:	464c      	mov	r4, r9
 80012f4:	431c      	orrs	r4, r3
 80012f6:	46a2      	mov	sl, r4
 80012f8:	4654      	mov	r4, sl
 80012fa:	1e63      	subs	r3, r4, #1
 80012fc:	419c      	sbcs	r4, r3
 80012fe:	433c      	orrs	r4, r7
 8001300:	e5c8      	b.n	8000e94 <__aeabi_dsub+0x26c>
 8001302:	0011      	movs	r1, r2
 8001304:	2300      	movs	r3, #0
 8001306:	2200      	movs	r2, #0
 8001308:	e532      	b.n	8000d70 <__aeabi_dsub+0x148>
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	000007ff 	.word	0x000007ff
 8001310:	ff7fffff 	.word	0xff7fffff
 8001314:	000007fe 	.word	0x000007fe
 8001318:	464a      	mov	r2, r9
 800131a:	1814      	adds	r4, r2, r0
 800131c:	4284      	cmp	r4, r0
 800131e:	4192      	sbcs	r2, r2
 8001320:	185b      	adds	r3, r3, r1
 8001322:	4698      	mov	r8, r3
 8001324:	4252      	negs	r2, r2
 8001326:	4490      	add	r8, r2
 8001328:	e5e9      	b.n	8000efe <__aeabi_dsub+0x2d6>
 800132a:	4642      	mov	r2, r8
 800132c:	4322      	orrs	r2, r4
 800132e:	d100      	bne.n	8001332 <__aeabi_dsub+0x70a>
 8001330:	e6a6      	b.n	8001080 <__aeabi_dsub+0x458>
 8001332:	e5ea      	b.n	8000f0a <__aeabi_dsub+0x2e2>
 8001334:	074b      	lsls	r3, r1, #29
 8001336:	08c2      	lsrs	r2, r0, #3
 8001338:	431a      	orrs	r2, r3
 800133a:	08cb      	lsrs	r3, r1, #3
 800133c:	e632      	b.n	8000fa4 <__aeabi_dsub+0x37c>
 800133e:	2200      	movs	r2, #0
 8001340:	4901      	ldr	r1, [pc, #4]	; (8001348 <__aeabi_dsub+0x720>)
 8001342:	0013      	movs	r3, r2
 8001344:	e514      	b.n	8000d70 <__aeabi_dsub+0x148>
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	000007ff 	.word	0x000007ff

0800134c <__aeabi_d2iz>:
 800134c:	000a      	movs	r2, r1
 800134e:	b530      	push	{r4, r5, lr}
 8001350:	4c13      	ldr	r4, [pc, #76]	; (80013a0 <__aeabi_d2iz+0x54>)
 8001352:	0053      	lsls	r3, r2, #1
 8001354:	0309      	lsls	r1, r1, #12
 8001356:	0005      	movs	r5, r0
 8001358:	0b09      	lsrs	r1, r1, #12
 800135a:	2000      	movs	r0, #0
 800135c:	0d5b      	lsrs	r3, r3, #21
 800135e:	0fd2      	lsrs	r2, r2, #31
 8001360:	42a3      	cmp	r3, r4
 8001362:	dd04      	ble.n	800136e <__aeabi_d2iz+0x22>
 8001364:	480f      	ldr	r0, [pc, #60]	; (80013a4 <__aeabi_d2iz+0x58>)
 8001366:	4283      	cmp	r3, r0
 8001368:	dd02      	ble.n	8001370 <__aeabi_d2iz+0x24>
 800136a:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <__aeabi_d2iz+0x5c>)
 800136c:	18d0      	adds	r0, r2, r3
 800136e:	bd30      	pop	{r4, r5, pc}
 8001370:	2080      	movs	r0, #128	; 0x80
 8001372:	0340      	lsls	r0, r0, #13
 8001374:	4301      	orrs	r1, r0
 8001376:	480d      	ldr	r0, [pc, #52]	; (80013ac <__aeabi_d2iz+0x60>)
 8001378:	1ac0      	subs	r0, r0, r3
 800137a:	281f      	cmp	r0, #31
 800137c:	dd08      	ble.n	8001390 <__aeabi_d2iz+0x44>
 800137e:	480c      	ldr	r0, [pc, #48]	; (80013b0 <__aeabi_d2iz+0x64>)
 8001380:	1ac3      	subs	r3, r0, r3
 8001382:	40d9      	lsrs	r1, r3
 8001384:	000b      	movs	r3, r1
 8001386:	4258      	negs	r0, r3
 8001388:	2a00      	cmp	r2, #0
 800138a:	d1f0      	bne.n	800136e <__aeabi_d2iz+0x22>
 800138c:	0018      	movs	r0, r3
 800138e:	e7ee      	b.n	800136e <__aeabi_d2iz+0x22>
 8001390:	4c08      	ldr	r4, [pc, #32]	; (80013b4 <__aeabi_d2iz+0x68>)
 8001392:	40c5      	lsrs	r5, r0
 8001394:	46a4      	mov	ip, r4
 8001396:	4463      	add	r3, ip
 8001398:	4099      	lsls	r1, r3
 800139a:	000b      	movs	r3, r1
 800139c:	432b      	orrs	r3, r5
 800139e:	e7f2      	b.n	8001386 <__aeabi_d2iz+0x3a>
 80013a0:	000003fe 	.word	0x000003fe
 80013a4:	0000041d 	.word	0x0000041d
 80013a8:	7fffffff 	.word	0x7fffffff
 80013ac:	00000433 	.word	0x00000433
 80013b0:	00000413 	.word	0x00000413
 80013b4:	fffffbed 	.word	0xfffffbed

080013b8 <__aeabi_i2d>:
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	2800      	cmp	r0, #0
 80013bc:	d016      	beq.n	80013ec <__aeabi_i2d+0x34>
 80013be:	17c3      	asrs	r3, r0, #31
 80013c0:	18c5      	adds	r5, r0, r3
 80013c2:	405d      	eors	r5, r3
 80013c4:	0fc4      	lsrs	r4, r0, #31
 80013c6:	0028      	movs	r0, r5
 80013c8:	f000 f864 	bl	8001494 <__clzsi2>
 80013cc:	4a11      	ldr	r2, [pc, #68]	; (8001414 <__aeabi_i2d+0x5c>)
 80013ce:	1a12      	subs	r2, r2, r0
 80013d0:	280a      	cmp	r0, #10
 80013d2:	dc16      	bgt.n	8001402 <__aeabi_i2d+0x4a>
 80013d4:	0003      	movs	r3, r0
 80013d6:	002e      	movs	r6, r5
 80013d8:	3315      	adds	r3, #21
 80013da:	409e      	lsls	r6, r3
 80013dc:	230b      	movs	r3, #11
 80013de:	1a18      	subs	r0, r3, r0
 80013e0:	40c5      	lsrs	r5, r0
 80013e2:	0553      	lsls	r3, r2, #21
 80013e4:	032d      	lsls	r5, r5, #12
 80013e6:	0b2d      	lsrs	r5, r5, #12
 80013e8:	0d5b      	lsrs	r3, r3, #21
 80013ea:	e003      	b.n	80013f4 <__aeabi_i2d+0x3c>
 80013ec:	2400      	movs	r4, #0
 80013ee:	2300      	movs	r3, #0
 80013f0:	2500      	movs	r5, #0
 80013f2:	2600      	movs	r6, #0
 80013f4:	051b      	lsls	r3, r3, #20
 80013f6:	432b      	orrs	r3, r5
 80013f8:	07e4      	lsls	r4, r4, #31
 80013fa:	4323      	orrs	r3, r4
 80013fc:	0030      	movs	r0, r6
 80013fe:	0019      	movs	r1, r3
 8001400:	bd70      	pop	{r4, r5, r6, pc}
 8001402:	380b      	subs	r0, #11
 8001404:	4085      	lsls	r5, r0
 8001406:	0553      	lsls	r3, r2, #21
 8001408:	032d      	lsls	r5, r5, #12
 800140a:	2600      	movs	r6, #0
 800140c:	0b2d      	lsrs	r5, r5, #12
 800140e:	0d5b      	lsrs	r3, r3, #21
 8001410:	e7f0      	b.n	80013f4 <__aeabi_i2d+0x3c>
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	0000041e 	.word	0x0000041e

08001418 <__aeabi_cdrcmple>:
 8001418:	4684      	mov	ip, r0
 800141a:	1c10      	adds	r0, r2, #0
 800141c:	4662      	mov	r2, ip
 800141e:	468c      	mov	ip, r1
 8001420:	1c19      	adds	r1, r3, #0
 8001422:	4663      	mov	r3, ip
 8001424:	e000      	b.n	8001428 <__aeabi_cdcmpeq>
 8001426:	46c0      	nop			; (mov r8, r8)

08001428 <__aeabi_cdcmpeq>:
 8001428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800142a:	f000 f90b 	bl	8001644 <__ledf2>
 800142e:	2800      	cmp	r0, #0
 8001430:	d401      	bmi.n	8001436 <__aeabi_cdcmpeq+0xe>
 8001432:	2100      	movs	r1, #0
 8001434:	42c8      	cmn	r0, r1
 8001436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001438 <__aeabi_dcmpeq>:
 8001438:	b510      	push	{r4, lr}
 800143a:	f000 f855 	bl	80014e8 <__eqdf2>
 800143e:	4240      	negs	r0, r0
 8001440:	3001      	adds	r0, #1
 8001442:	bd10      	pop	{r4, pc}

08001444 <__aeabi_dcmplt>:
 8001444:	b510      	push	{r4, lr}
 8001446:	f000 f8fd 	bl	8001644 <__ledf2>
 800144a:	2800      	cmp	r0, #0
 800144c:	db01      	blt.n	8001452 <__aeabi_dcmplt+0xe>
 800144e:	2000      	movs	r0, #0
 8001450:	bd10      	pop	{r4, pc}
 8001452:	2001      	movs	r0, #1
 8001454:	bd10      	pop	{r4, pc}
 8001456:	46c0      	nop			; (mov r8, r8)

08001458 <__aeabi_dcmple>:
 8001458:	b510      	push	{r4, lr}
 800145a:	f000 f8f3 	bl	8001644 <__ledf2>
 800145e:	2800      	cmp	r0, #0
 8001460:	dd01      	ble.n	8001466 <__aeabi_dcmple+0xe>
 8001462:	2000      	movs	r0, #0
 8001464:	bd10      	pop	{r4, pc}
 8001466:	2001      	movs	r0, #1
 8001468:	bd10      	pop	{r4, pc}
 800146a:	46c0      	nop			; (mov r8, r8)

0800146c <__aeabi_dcmpgt>:
 800146c:	b510      	push	{r4, lr}
 800146e:	f000 f877 	bl	8001560 <__gedf2>
 8001472:	2800      	cmp	r0, #0
 8001474:	dc01      	bgt.n	800147a <__aeabi_dcmpgt+0xe>
 8001476:	2000      	movs	r0, #0
 8001478:	bd10      	pop	{r4, pc}
 800147a:	2001      	movs	r0, #1
 800147c:	bd10      	pop	{r4, pc}
 800147e:	46c0      	nop			; (mov r8, r8)

08001480 <__aeabi_dcmpge>:
 8001480:	b510      	push	{r4, lr}
 8001482:	f000 f86d 	bl	8001560 <__gedf2>
 8001486:	2800      	cmp	r0, #0
 8001488:	da01      	bge.n	800148e <__aeabi_dcmpge+0xe>
 800148a:	2000      	movs	r0, #0
 800148c:	bd10      	pop	{r4, pc}
 800148e:	2001      	movs	r0, #1
 8001490:	bd10      	pop	{r4, pc}
 8001492:	46c0      	nop			; (mov r8, r8)

08001494 <__clzsi2>:
 8001494:	211c      	movs	r1, #28
 8001496:	2301      	movs	r3, #1
 8001498:	041b      	lsls	r3, r3, #16
 800149a:	4298      	cmp	r0, r3
 800149c:	d301      	bcc.n	80014a2 <__clzsi2+0xe>
 800149e:	0c00      	lsrs	r0, r0, #16
 80014a0:	3910      	subs	r1, #16
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	4298      	cmp	r0, r3
 80014a6:	d301      	bcc.n	80014ac <__clzsi2+0x18>
 80014a8:	0a00      	lsrs	r0, r0, #8
 80014aa:	3908      	subs	r1, #8
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	4298      	cmp	r0, r3
 80014b0:	d301      	bcc.n	80014b6 <__clzsi2+0x22>
 80014b2:	0900      	lsrs	r0, r0, #4
 80014b4:	3904      	subs	r1, #4
 80014b6:	a202      	add	r2, pc, #8	; (adr r2, 80014c0 <__clzsi2+0x2c>)
 80014b8:	5c10      	ldrb	r0, [r2, r0]
 80014ba:	1840      	adds	r0, r0, r1
 80014bc:	4770      	bx	lr
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	02020304 	.word	0x02020304
 80014c4:	01010101 	.word	0x01010101
	...

080014d0 <__clzdi2>:
 80014d0:	b510      	push	{r4, lr}
 80014d2:	2900      	cmp	r1, #0
 80014d4:	d103      	bne.n	80014de <__clzdi2+0xe>
 80014d6:	f7ff ffdd 	bl	8001494 <__clzsi2>
 80014da:	3020      	adds	r0, #32
 80014dc:	e002      	b.n	80014e4 <__clzdi2+0x14>
 80014de:	1c08      	adds	r0, r1, #0
 80014e0:	f7ff ffd8 	bl	8001494 <__clzsi2>
 80014e4:	bd10      	pop	{r4, pc}
 80014e6:	46c0      	nop			; (mov r8, r8)

080014e8 <__eqdf2>:
 80014e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ea:	464f      	mov	r7, r9
 80014ec:	4646      	mov	r6, r8
 80014ee:	46d6      	mov	lr, sl
 80014f0:	4694      	mov	ip, r2
 80014f2:	4691      	mov	r9, r2
 80014f4:	031a      	lsls	r2, r3, #12
 80014f6:	0b12      	lsrs	r2, r2, #12
 80014f8:	4d18      	ldr	r5, [pc, #96]	; (800155c <__eqdf2+0x74>)
 80014fa:	b5c0      	push	{r6, r7, lr}
 80014fc:	004c      	lsls	r4, r1, #1
 80014fe:	030f      	lsls	r7, r1, #12
 8001500:	4692      	mov	sl, r2
 8001502:	005a      	lsls	r2, r3, #1
 8001504:	0006      	movs	r6, r0
 8001506:	4680      	mov	r8, r0
 8001508:	0b3f      	lsrs	r7, r7, #12
 800150a:	2001      	movs	r0, #1
 800150c:	0d64      	lsrs	r4, r4, #21
 800150e:	0fc9      	lsrs	r1, r1, #31
 8001510:	0d52      	lsrs	r2, r2, #21
 8001512:	0fdb      	lsrs	r3, r3, #31
 8001514:	42ac      	cmp	r4, r5
 8001516:	d00a      	beq.n	800152e <__eqdf2+0x46>
 8001518:	42aa      	cmp	r2, r5
 800151a:	d003      	beq.n	8001524 <__eqdf2+0x3c>
 800151c:	4294      	cmp	r4, r2
 800151e:	d101      	bne.n	8001524 <__eqdf2+0x3c>
 8001520:	4557      	cmp	r7, sl
 8001522:	d00d      	beq.n	8001540 <__eqdf2+0x58>
 8001524:	bce0      	pop	{r5, r6, r7}
 8001526:	46ba      	mov	sl, r7
 8001528:	46b1      	mov	r9, r6
 800152a:	46a8      	mov	r8, r5
 800152c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152e:	003d      	movs	r5, r7
 8001530:	4335      	orrs	r5, r6
 8001532:	d1f7      	bne.n	8001524 <__eqdf2+0x3c>
 8001534:	42a2      	cmp	r2, r4
 8001536:	d1f5      	bne.n	8001524 <__eqdf2+0x3c>
 8001538:	4652      	mov	r2, sl
 800153a:	4665      	mov	r5, ip
 800153c:	432a      	orrs	r2, r5
 800153e:	d1f1      	bne.n	8001524 <__eqdf2+0x3c>
 8001540:	2001      	movs	r0, #1
 8001542:	45c8      	cmp	r8, r9
 8001544:	d1ee      	bne.n	8001524 <__eqdf2+0x3c>
 8001546:	4299      	cmp	r1, r3
 8001548:	d006      	beq.n	8001558 <__eqdf2+0x70>
 800154a:	2c00      	cmp	r4, #0
 800154c:	d1ea      	bne.n	8001524 <__eqdf2+0x3c>
 800154e:	433e      	orrs	r6, r7
 8001550:	0030      	movs	r0, r6
 8001552:	1e46      	subs	r6, r0, #1
 8001554:	41b0      	sbcs	r0, r6
 8001556:	e7e5      	b.n	8001524 <__eqdf2+0x3c>
 8001558:	2000      	movs	r0, #0
 800155a:	e7e3      	b.n	8001524 <__eqdf2+0x3c>
 800155c:	000007ff 	.word	0x000007ff

08001560 <__gedf2>:
 8001560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001562:	464e      	mov	r6, r9
 8001564:	4645      	mov	r5, r8
 8001566:	4657      	mov	r7, sl
 8001568:	46de      	mov	lr, fp
 800156a:	0004      	movs	r4, r0
 800156c:	0018      	movs	r0, r3
 800156e:	b5e0      	push	{r5, r6, r7, lr}
 8001570:	0016      	movs	r6, r2
 8001572:	031b      	lsls	r3, r3, #12
 8001574:	0b1b      	lsrs	r3, r3, #12
 8001576:	4d32      	ldr	r5, [pc, #200]	; (8001640 <__gedf2+0xe0>)
 8001578:	030f      	lsls	r7, r1, #12
 800157a:	004a      	lsls	r2, r1, #1
 800157c:	4699      	mov	r9, r3
 800157e:	0043      	lsls	r3, r0, #1
 8001580:	46a4      	mov	ip, r4
 8001582:	46b0      	mov	r8, r6
 8001584:	0b3f      	lsrs	r7, r7, #12
 8001586:	0d52      	lsrs	r2, r2, #21
 8001588:	0fc9      	lsrs	r1, r1, #31
 800158a:	0d5b      	lsrs	r3, r3, #21
 800158c:	0fc0      	lsrs	r0, r0, #31
 800158e:	42aa      	cmp	r2, r5
 8001590:	d029      	beq.n	80015e6 <__gedf2+0x86>
 8001592:	42ab      	cmp	r3, r5
 8001594:	d018      	beq.n	80015c8 <__gedf2+0x68>
 8001596:	2a00      	cmp	r2, #0
 8001598:	d12a      	bne.n	80015f0 <__gedf2+0x90>
 800159a:	433c      	orrs	r4, r7
 800159c:	46a3      	mov	fp, r4
 800159e:	4265      	negs	r5, r4
 80015a0:	4165      	adcs	r5, r4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <__gedf2+0x4c>
 80015a6:	464c      	mov	r4, r9
 80015a8:	4326      	orrs	r6, r4
 80015aa:	d027      	beq.n	80015fc <__gedf2+0x9c>
 80015ac:	2d00      	cmp	r5, #0
 80015ae:	d115      	bne.n	80015dc <__gedf2+0x7c>
 80015b0:	4281      	cmp	r1, r0
 80015b2:	d028      	beq.n	8001606 <__gedf2+0xa6>
 80015b4:	2002      	movs	r0, #2
 80015b6:	3901      	subs	r1, #1
 80015b8:	4008      	ands	r0, r1
 80015ba:	3801      	subs	r0, #1
 80015bc:	bcf0      	pop	{r4, r5, r6, r7}
 80015be:	46bb      	mov	fp, r7
 80015c0:	46b2      	mov	sl, r6
 80015c2:	46a9      	mov	r9, r5
 80015c4:	46a0      	mov	r8, r4
 80015c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c8:	464d      	mov	r5, r9
 80015ca:	432e      	orrs	r6, r5
 80015cc:	d12f      	bne.n	800162e <__gedf2+0xce>
 80015ce:	2a00      	cmp	r2, #0
 80015d0:	d1ee      	bne.n	80015b0 <__gedf2+0x50>
 80015d2:	433c      	orrs	r4, r7
 80015d4:	4265      	negs	r5, r4
 80015d6:	4165      	adcs	r5, r4
 80015d8:	2d00      	cmp	r5, #0
 80015da:	d0e9      	beq.n	80015b0 <__gedf2+0x50>
 80015dc:	2800      	cmp	r0, #0
 80015de:	d1ed      	bne.n	80015bc <__gedf2+0x5c>
 80015e0:	2001      	movs	r0, #1
 80015e2:	4240      	negs	r0, r0
 80015e4:	e7ea      	b.n	80015bc <__gedf2+0x5c>
 80015e6:	003d      	movs	r5, r7
 80015e8:	4325      	orrs	r5, r4
 80015ea:	d120      	bne.n	800162e <__gedf2+0xce>
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d0eb      	beq.n	80015c8 <__gedf2+0x68>
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1dd      	bne.n	80015b0 <__gedf2+0x50>
 80015f4:	464c      	mov	r4, r9
 80015f6:	4326      	orrs	r6, r4
 80015f8:	d1da      	bne.n	80015b0 <__gedf2+0x50>
 80015fa:	e7db      	b.n	80015b4 <__gedf2+0x54>
 80015fc:	465b      	mov	r3, fp
 80015fe:	2000      	movs	r0, #0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0db      	beq.n	80015bc <__gedf2+0x5c>
 8001604:	e7d6      	b.n	80015b4 <__gedf2+0x54>
 8001606:	429a      	cmp	r2, r3
 8001608:	dc0a      	bgt.n	8001620 <__gedf2+0xc0>
 800160a:	dbe7      	blt.n	80015dc <__gedf2+0x7c>
 800160c:	454f      	cmp	r7, r9
 800160e:	d8d1      	bhi.n	80015b4 <__gedf2+0x54>
 8001610:	d010      	beq.n	8001634 <__gedf2+0xd4>
 8001612:	2000      	movs	r0, #0
 8001614:	454f      	cmp	r7, r9
 8001616:	d2d1      	bcs.n	80015bc <__gedf2+0x5c>
 8001618:	2900      	cmp	r1, #0
 800161a:	d0e1      	beq.n	80015e0 <__gedf2+0x80>
 800161c:	0008      	movs	r0, r1
 800161e:	e7cd      	b.n	80015bc <__gedf2+0x5c>
 8001620:	4243      	negs	r3, r0
 8001622:	4158      	adcs	r0, r3
 8001624:	2302      	movs	r3, #2
 8001626:	4240      	negs	r0, r0
 8001628:	4018      	ands	r0, r3
 800162a:	3801      	subs	r0, #1
 800162c:	e7c6      	b.n	80015bc <__gedf2+0x5c>
 800162e:	2002      	movs	r0, #2
 8001630:	4240      	negs	r0, r0
 8001632:	e7c3      	b.n	80015bc <__gedf2+0x5c>
 8001634:	45c4      	cmp	ip, r8
 8001636:	d8bd      	bhi.n	80015b4 <__gedf2+0x54>
 8001638:	2000      	movs	r0, #0
 800163a:	45c4      	cmp	ip, r8
 800163c:	d2be      	bcs.n	80015bc <__gedf2+0x5c>
 800163e:	e7eb      	b.n	8001618 <__gedf2+0xb8>
 8001640:	000007ff 	.word	0x000007ff

08001644 <__ledf2>:
 8001644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001646:	464e      	mov	r6, r9
 8001648:	4645      	mov	r5, r8
 800164a:	4657      	mov	r7, sl
 800164c:	46de      	mov	lr, fp
 800164e:	0004      	movs	r4, r0
 8001650:	0018      	movs	r0, r3
 8001652:	b5e0      	push	{r5, r6, r7, lr}
 8001654:	0016      	movs	r6, r2
 8001656:	031b      	lsls	r3, r3, #12
 8001658:	0b1b      	lsrs	r3, r3, #12
 800165a:	4d31      	ldr	r5, [pc, #196]	; (8001720 <__ledf2+0xdc>)
 800165c:	030f      	lsls	r7, r1, #12
 800165e:	004a      	lsls	r2, r1, #1
 8001660:	4699      	mov	r9, r3
 8001662:	0043      	lsls	r3, r0, #1
 8001664:	46a4      	mov	ip, r4
 8001666:	46b0      	mov	r8, r6
 8001668:	0b3f      	lsrs	r7, r7, #12
 800166a:	0d52      	lsrs	r2, r2, #21
 800166c:	0fc9      	lsrs	r1, r1, #31
 800166e:	0d5b      	lsrs	r3, r3, #21
 8001670:	0fc0      	lsrs	r0, r0, #31
 8001672:	42aa      	cmp	r2, r5
 8001674:	d011      	beq.n	800169a <__ledf2+0x56>
 8001676:	42ab      	cmp	r3, r5
 8001678:	d014      	beq.n	80016a4 <__ledf2+0x60>
 800167a:	2a00      	cmp	r2, #0
 800167c:	d12f      	bne.n	80016de <__ledf2+0x9a>
 800167e:	433c      	orrs	r4, r7
 8001680:	46a3      	mov	fp, r4
 8001682:	4265      	negs	r5, r4
 8001684:	4165      	adcs	r5, r4
 8001686:	2b00      	cmp	r3, #0
 8001688:	d114      	bne.n	80016b4 <__ledf2+0x70>
 800168a:	464c      	mov	r4, r9
 800168c:	4326      	orrs	r6, r4
 800168e:	d111      	bne.n	80016b4 <__ledf2+0x70>
 8001690:	465b      	mov	r3, fp
 8001692:	2000      	movs	r0, #0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d017      	beq.n	80016c8 <__ledf2+0x84>
 8001698:	e010      	b.n	80016bc <__ledf2+0x78>
 800169a:	003d      	movs	r5, r7
 800169c:	4325      	orrs	r5, r4
 800169e:	d112      	bne.n	80016c6 <__ledf2+0x82>
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d11c      	bne.n	80016de <__ledf2+0x9a>
 80016a4:	464d      	mov	r5, r9
 80016a6:	432e      	orrs	r6, r5
 80016a8:	d10d      	bne.n	80016c6 <__ledf2+0x82>
 80016aa:	2a00      	cmp	r2, #0
 80016ac:	d104      	bne.n	80016b8 <__ledf2+0x74>
 80016ae:	433c      	orrs	r4, r7
 80016b0:	4265      	negs	r5, r4
 80016b2:	4165      	adcs	r5, r4
 80016b4:	2d00      	cmp	r5, #0
 80016b6:	d10d      	bne.n	80016d4 <__ledf2+0x90>
 80016b8:	4281      	cmp	r1, r0
 80016ba:	d016      	beq.n	80016ea <__ledf2+0xa6>
 80016bc:	2002      	movs	r0, #2
 80016be:	3901      	subs	r1, #1
 80016c0:	4008      	ands	r0, r1
 80016c2:	3801      	subs	r0, #1
 80016c4:	e000      	b.n	80016c8 <__ledf2+0x84>
 80016c6:	2002      	movs	r0, #2
 80016c8:	bcf0      	pop	{r4, r5, r6, r7}
 80016ca:	46bb      	mov	fp, r7
 80016cc:	46b2      	mov	sl, r6
 80016ce:	46a9      	mov	r9, r5
 80016d0:	46a0      	mov	r8, r4
 80016d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d4:	2800      	cmp	r0, #0
 80016d6:	d1f7      	bne.n	80016c8 <__ledf2+0x84>
 80016d8:	2001      	movs	r0, #1
 80016da:	4240      	negs	r0, r0
 80016dc:	e7f4      	b.n	80016c8 <__ledf2+0x84>
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1ea      	bne.n	80016b8 <__ledf2+0x74>
 80016e2:	464c      	mov	r4, r9
 80016e4:	4326      	orrs	r6, r4
 80016e6:	d1e7      	bne.n	80016b8 <__ledf2+0x74>
 80016e8:	e7e8      	b.n	80016bc <__ledf2+0x78>
 80016ea:	429a      	cmp	r2, r3
 80016ec:	dd06      	ble.n	80016fc <__ledf2+0xb8>
 80016ee:	4243      	negs	r3, r0
 80016f0:	4158      	adcs	r0, r3
 80016f2:	2302      	movs	r3, #2
 80016f4:	4240      	negs	r0, r0
 80016f6:	4018      	ands	r0, r3
 80016f8:	3801      	subs	r0, #1
 80016fa:	e7e5      	b.n	80016c8 <__ledf2+0x84>
 80016fc:	429a      	cmp	r2, r3
 80016fe:	dbe9      	blt.n	80016d4 <__ledf2+0x90>
 8001700:	454f      	cmp	r7, r9
 8001702:	d8db      	bhi.n	80016bc <__ledf2+0x78>
 8001704:	d006      	beq.n	8001714 <__ledf2+0xd0>
 8001706:	2000      	movs	r0, #0
 8001708:	454f      	cmp	r7, r9
 800170a:	d2dd      	bcs.n	80016c8 <__ledf2+0x84>
 800170c:	2900      	cmp	r1, #0
 800170e:	d0e3      	beq.n	80016d8 <__ledf2+0x94>
 8001710:	0008      	movs	r0, r1
 8001712:	e7d9      	b.n	80016c8 <__ledf2+0x84>
 8001714:	45c4      	cmp	ip, r8
 8001716:	d8d1      	bhi.n	80016bc <__ledf2+0x78>
 8001718:	2000      	movs	r0, #0
 800171a:	45c4      	cmp	ip, r8
 800171c:	d2d4      	bcs.n	80016c8 <__ledf2+0x84>
 800171e:	e7f5      	b.n	800170c <__ledf2+0xc8>
 8001720:	000007ff 	.word	0x000007ff

08001724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b08f      	sub	sp, #60	; 0x3c
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172a:	f000 fe9d 	bl	8002468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172e:	f000 f96b 	bl	8001a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001732:	f000 fa91 	bl	8001c58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001736:	f000 fa5f 	bl	8001bf8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800173a:	f000 f9ed 	bl	8001b18 <MX_I2C1_Init>
  MX_RTC_Init();
 800173e:	f000 fa2b 	bl	8001b98 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  // NOTE: USER MODIFIED CODE IN AUTO CONFIG MX_RTC_Init(); !!!!!!!!!!!!!!!!!!!!!!!!

  // when coming from standby
  if (PWR->CSR & PWR_CSR_SBF) {
 8001742:	4bad      	ldr	r3, [pc, #692]	; (80019f8 <main+0x2d4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2202      	movs	r2, #2
 8001748:	4013      	ands	r3, r2
 800174a:	d006      	beq.n	800175a <main+0x36>
    // reset the standby flag
    PWR->CR |= PWR_CR_CSBF;
 800174c:	4baa      	ldr	r3, [pc, #680]	; (80019f8 <main+0x2d4>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4ba9      	ldr	r3, [pc, #676]	; (80019f8 <main+0x2d4>)
 8001752:	2108      	movs	r1, #8
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	e001      	b.n	800175e <main+0x3a>
  } else {
    // coming from flashing (or full reset)

    MAX_Set_Rtc();
 800175a:	f000 fafb 	bl	8001d54 <MAX_Set_Rtc>
  }

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	0159      	lsls	r1, r3, #5
 8001762:	23a0      	movs	r3, #160	; 0xa0
 8001764:	05db      	lsls	r3, r3, #23
 8001766:	2201      	movs	r2, #1
 8001768:	0018      	movs	r0, r3
 800176a:	f001 f92c 	bl	80029c6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	0119      	lsls	r1, r3, #4
 8001772:	23a0      	movs	r3, #160	; 0xa0
 8001774:	05db      	lsls	r3, r3, #23
 8001776:	2201      	movs	r2, #1
 8001778:	0018      	movs	r0, r3
 800177a:	f001 f924 	bl	80029c6 <HAL_GPIO_WritePin>

  MAX_Init3746A();
 800177e:	f000 fce7 	bl	8002150 <MAX_Init3746A>

  RTC_TimeTypeDef lasttime;
  lasttime.Seconds = 99;
 8001782:	211c      	movs	r1, #28
 8001784:	187b      	adds	r3, r7, r1
 8001786:	2263      	movs	r2, #99	; 0x63
 8001788:	709a      	strb	r2, [r3, #2]
  lasttime.Hours = 99;
 800178a:	187b      	adds	r3, r7, r1
 800178c:	2263      	movs	r2, #99	; 0x63
 800178e:	701a      	strb	r2, [r3, #0]
  lasttime.Minutes = 99;
 8001790:	187b      	adds	r3, r7, r1
 8001792:	2263      	movs	r2, #99	; 0x63
 8001794:	705a      	strb	r2, [r3, #1]

  bool changed = false;
 8001796:	2337      	movs	r3, #55	; 0x37
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;
    HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800179e:	2408      	movs	r4, #8
 80017a0:	1939      	adds	r1, r7, r4
 80017a2:	4b96      	ldr	r3, [pc, #600]	; (80019fc <main+0x2d8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	0018      	movs	r0, r3
 80017a8:	f002 fd48 	bl	800423c <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80017ac:	1d39      	adds	r1, r7, #4
 80017ae:	4b93      	ldr	r3, [pc, #588]	; (80019fc <main+0x2d8>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	0018      	movs	r0, r3
 80017b4:	f002 fe4c 	bl	8004450 <HAL_RTC_GetDate>

    uint8_t data[2];
    data[0] = 0xfe;
 80017b8:	003b      	movs	r3, r7
 80017ba:	22fe      	movs	r2, #254	; 0xfe
 80017bc:	701a      	strb	r2, [r3, #0]
    data[1] = 0xc5;
 80017be:	003b      	movs	r3, r7
 80017c0:	22c5      	movs	r2, #197	; 0xc5
 80017c2:	705a      	strb	r2, [r3, #1]
    MAX_I2CSend(data);
 80017c4:	003b      	movs	r3, r7
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 fd38 	bl	800223c <MAX_I2CSend>
    data[0] = 0xfd;
 80017cc:	003b      	movs	r3, r7
 80017ce:	22fd      	movs	r2, #253	; 0xfd
 80017d0:	701a      	strb	r2, [r3, #0]
    data[1] = 0x00;
 80017d2:	003b      	movs	r3, r7
 80017d4:	2200      	movs	r2, #0
 80017d6:	705a      	strb	r2, [r3, #1]
    MAX_I2CSend(data); // page 0
 80017d8:	003b      	movs	r3, r7
 80017da:	0018      	movs	r0, r3
 80017dc:	f000 fd2e 	bl	800223c <MAX_I2CSend>

    if (time.Seconds != lasttime.Seconds) {
 80017e0:	193b      	adds	r3, r7, r4
 80017e2:	789a      	ldrb	r2, [r3, #2]
 80017e4:	211c      	movs	r1, #28
 80017e6:	187b      	adds	r3, r7, r1
 80017e8:	789b      	ldrb	r3, [r3, #2]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d03f      	beq.n	800186e <main+0x14a>
      data[0] = minutes[(lasttime.Seconds+41)%60];
 80017ee:	187b      	adds	r3, r7, r1
 80017f0:	789b      	ldrb	r3, [r3, #2]
 80017f2:	3329      	adds	r3, #41	; 0x29
 80017f4:	213c      	movs	r1, #60	; 0x3c
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7fe fdf6 	bl	80003e8 <__aeabi_idivmod>
 80017fc:	000b      	movs	r3, r1
 80017fe:	001a      	movs	r2, r3
 8001800:	4b7f      	ldr	r3, [pc, #508]	; (8001a00 <main+0x2dc>)
 8001802:	5c9a      	ldrb	r2, [r3, r2]
 8001804:	003b      	movs	r3, r7
 8001806:	701a      	strb	r2, [r3, #0]
      data[1] = 0x00;
 8001808:	003b      	movs	r3, r7
 800180a:	2200      	movs	r2, #0
 800180c:	705a      	strb	r2, [r3, #1]
      MAX_I2CSend(data); // off
 800180e:	003b      	movs	r3, r7
 8001810:	0018      	movs	r0, r3
 8001812:	f000 fd13 	bl	800223c <MAX_I2CSend>

      changed = true;
 8001816:	2337      	movs	r3, #55	; 0x37
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	2201      	movs	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]

      data[0] = minutes[(time.Seconds+41)%60];
 800181e:	193b      	adds	r3, r7, r4
 8001820:	789b      	ldrb	r3, [r3, #2]
 8001822:	3329      	adds	r3, #41	; 0x29
 8001824:	213c      	movs	r1, #60	; 0x3c
 8001826:	0018      	movs	r0, r3
 8001828:	f7fe fdde 	bl	80003e8 <__aeabi_idivmod>
 800182c:	000b      	movs	r3, r1
 800182e:	001a      	movs	r2, r3
 8001830:	4b73      	ldr	r3, [pc, #460]	; (8001a00 <main+0x2dc>)
 8001832:	5c9a      	ldrb	r2, [r3, r2]
 8001834:	003b      	movs	r3, r7
 8001836:	701a      	strb	r2, [r3, #0]
      data[1] = 0x08;
 8001838:	003b      	movs	r3, r7
 800183a:	2208      	movs	r2, #8
 800183c:	705a      	strb	r2, [r3, #1]
      MAX_I2CSend(data); // on
 800183e:	003b      	movs	r3, r7
 8001840:	0018      	movs	r0, r3
 8001842:	f000 fcfb 	bl	800223c <MAX_I2CSend>
      data[0] = minutes[(time.Minutes+41)%60];
 8001846:	193b      	adds	r3, r7, r4
 8001848:	785b      	ldrb	r3, [r3, #1]
 800184a:	3329      	adds	r3, #41	; 0x29
 800184c:	213c      	movs	r1, #60	; 0x3c
 800184e:	0018      	movs	r0, r3
 8001850:	f7fe fdca 	bl	80003e8 <__aeabi_idivmod>
 8001854:	000b      	movs	r3, r1
 8001856:	001a      	movs	r2, r3
 8001858:	4b69      	ldr	r3, [pc, #420]	; (8001a00 <main+0x2dc>)
 800185a:	5c9a      	ldrb	r2, [r3, r2]
 800185c:	003b      	movs	r3, r7
 800185e:	701a      	strb	r2, [r3, #0]
      data[1] = 0x08;
 8001860:	003b      	movs	r3, r7
 8001862:	2208      	movs	r2, #8
 8001864:	705a      	strb	r2, [r3, #1]
      MAX_I2CSend(data); // on
 8001866:	003b      	movs	r3, r7
 8001868:	0018      	movs	r0, r3
 800186a:	f000 fce7 	bl	800223c <MAX_I2CSend>
    }

    if (time.Minutes != lasttime.Minutes) {
 800186e:	2408      	movs	r4, #8
 8001870:	193b      	adds	r3, r7, r4
 8001872:	785a      	ldrb	r2, [r3, #1]
 8001874:	211c      	movs	r1, #28
 8001876:	187b      	adds	r3, r7, r1
 8001878:	785b      	ldrb	r3, [r3, #1]
 800187a:	429a      	cmp	r2, r3
 800187c:	d02b      	beq.n	80018d6 <main+0x1b2>
      data[0] = minutes[(lasttime.Minutes+41)%60];
 800187e:	187b      	adds	r3, r7, r1
 8001880:	785b      	ldrb	r3, [r3, #1]
 8001882:	3329      	adds	r3, #41	; 0x29
 8001884:	213c      	movs	r1, #60	; 0x3c
 8001886:	0018      	movs	r0, r3
 8001888:	f7fe fdae 	bl	80003e8 <__aeabi_idivmod>
 800188c:	000b      	movs	r3, r1
 800188e:	001a      	movs	r2, r3
 8001890:	4b5b      	ldr	r3, [pc, #364]	; (8001a00 <main+0x2dc>)
 8001892:	5c9a      	ldrb	r2, [r3, r2]
 8001894:	003b      	movs	r3, r7
 8001896:	701a      	strb	r2, [r3, #0]
      data[1] = 0x00;
 8001898:	003b      	movs	r3, r7
 800189a:	2200      	movs	r2, #0
 800189c:	705a      	strb	r2, [r3, #1]
      MAX_I2CSend(data); // off
 800189e:	003b      	movs	r3, r7
 80018a0:	0018      	movs	r0, r3
 80018a2:	f000 fccb 	bl	800223c <MAX_I2CSend>

      changed = true;
 80018a6:	2337      	movs	r3, #55	; 0x37
 80018a8:	18fb      	adds	r3, r7, r3
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]

      data[0] = minutes[(time.Minutes+41)%60];
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	785b      	ldrb	r3, [r3, #1]
 80018b2:	3329      	adds	r3, #41	; 0x29
 80018b4:	213c      	movs	r1, #60	; 0x3c
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7fe fd96 	bl	80003e8 <__aeabi_idivmod>
 80018bc:	000b      	movs	r3, r1
 80018be:	001a      	movs	r2, r3
 80018c0:	4b4f      	ldr	r3, [pc, #316]	; (8001a00 <main+0x2dc>)
 80018c2:	5c9a      	ldrb	r2, [r3, r2]
 80018c4:	003b      	movs	r3, r7
 80018c6:	701a      	strb	r2, [r3, #0]
      data[1] = 0x08;
 80018c8:	003b      	movs	r3, r7
 80018ca:	2208      	movs	r2, #8
 80018cc:	705a      	strb	r2, [r3, #1]
      MAX_I2CSend(data); // on
 80018ce:	003b      	movs	r3, r7
 80018d0:	0018      	movs	r0, r3
 80018d2:	f000 fcb3 	bl	800223c <MAX_I2CSend>
    }

    if (time.Hours != lasttime.Hours) {
 80018d6:	2408      	movs	r4, #8
 80018d8:	193b      	adds	r3, r7, r4
 80018da:	781a      	ldrb	r2, [r3, #0]
 80018dc:	211c      	movs	r1, #28
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d02b      	beq.n	800193e <main+0x21a>
      data[0] = hours[(lasttime.Hours+4)%12];
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	3304      	adds	r3, #4
 80018ec:	210c      	movs	r1, #12
 80018ee:	0018      	movs	r0, r3
 80018f0:	f7fe fd7a 	bl	80003e8 <__aeabi_idivmod>
 80018f4:	000b      	movs	r3, r1
 80018f6:	001a      	movs	r2, r3
 80018f8:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <main+0x2e0>)
 80018fa:	5c9a      	ldrb	r2, [r3, r2]
 80018fc:	003b      	movs	r3, r7
 80018fe:	701a      	strb	r2, [r3, #0]
      data[1] = 0x00;
 8001900:	003b      	movs	r3, r7
 8001902:	2200      	movs	r2, #0
 8001904:	705a      	strb	r2, [r3, #1]
      MAX_I2CSend(data); // off
 8001906:	003b      	movs	r3, r7
 8001908:	0018      	movs	r0, r3
 800190a:	f000 fc97 	bl	800223c <MAX_I2CSend>

      changed = true;
 800190e:	2337      	movs	r3, #55	; 0x37
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]

      data[0] = hours[(time.Hours+4)%12];
 8001916:	193b      	adds	r3, r7, r4
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	3304      	adds	r3, #4
 800191c:	210c      	movs	r1, #12
 800191e:	0018      	movs	r0, r3
 8001920:	f7fe fd62 	bl	80003e8 <__aeabi_idivmod>
 8001924:	000b      	movs	r3, r1
 8001926:	001a      	movs	r2, r3
 8001928:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <main+0x2e0>)
 800192a:	5c9a      	ldrb	r2, [r3, r2]
 800192c:	003b      	movs	r3, r7
 800192e:	701a      	strb	r2, [r3, #0]
      data[1] = 0x08;
 8001930:	003b      	movs	r3, r7
 8001932:	2208      	movs	r2, #8
 8001934:	705a      	strb	r2, [r3, #1]
      MAX_I2CSend(data); // on
 8001936:	003b      	movs	r3, r7
 8001938:	0018      	movs	r0, r3
 800193a:	f000 fc7f 	bl	800223c <MAX_I2CSend>
    }

    if (changed) {
 800193e:	2237      	movs	r2, #55	; 0x37
 8001940:	18bb      	adds	r3, r7, r2
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00a      	beq.n	800195e <main+0x23a>
      changed = false;
 8001948:	18bb      	adds	r3, r7, r2
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
      lasttime = time;
 800194e:	231c      	movs	r3, #28
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	2208      	movs	r2, #8
 8001954:	18ba      	adds	r2, r7, r2
 8001956:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001958:	c313      	stmia	r3!, {r0, r1, r4}
 800195a:	ca03      	ldmia	r2!, {r0, r1}
 800195c:	c303      	stmia	r3!, {r0, r1}
    }

    // if button was released, aka pulled low
    if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)) {
 800195e:	23a0      	movs	r3, #160	; 0xa0
 8001960:	05db      	lsls	r3, r3, #23
 8001962:	2102      	movs	r1, #2
 8001964:	0018      	movs	r0, r3
 8001966:	f001 f811 	bl	800298c <HAL_GPIO_ReadPin>
 800196a:	1e03      	subs	r3, r0, #0
 800196c:	d000      	beq.n	8001970 <main+0x24c>
 800196e:	e716      	b.n	800179e <main+0x7a>

      // all leds off
      data[0] = 0xfe;
 8001970:	003b      	movs	r3, r7
 8001972:	22fe      	movs	r2, #254	; 0xfe
 8001974:	701a      	strb	r2, [r3, #0]
      data[1] = 0xc5;
 8001976:	003b      	movs	r3, r7
 8001978:	22c5      	movs	r2, #197	; 0xc5
 800197a:	705a      	strb	r2, [r3, #1]
      MAX_I2CSend(data);
 800197c:	003b      	movs	r3, r7
 800197e:	0018      	movs	r0, r3
 8001980:	f000 fc5c 	bl	800223c <MAX_I2CSend>
      data[0] = 0xfd;
 8001984:	003b      	movs	r3, r7
 8001986:	22fd      	movs	r2, #253	; 0xfd
 8001988:	701a      	strb	r2, [r3, #0]
      data[1] = 0x00;
 800198a:	003b      	movs	r3, r7
 800198c:	2200      	movs	r2, #0
 800198e:	705a      	strb	r2, [r3, #1]
      MAX_I2CSend(data); // page 0
 8001990:	003b      	movs	r3, r7
 8001992:	0018      	movs	r0, r3
 8001994:	f000 fc52 	bl	800223c <MAX_I2CSend>
      for (int i = 1; i < 73; i++)
 8001998:	2301      	movs	r3, #1
 800199a:	633b      	str	r3, [r7, #48]	; 0x30
 800199c:	e00d      	b.n	80019ba <main+0x296>
      {
        data[0] = i;
 800199e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	003b      	movs	r3, r7
 80019a4:	701a      	strb	r2, [r3, #0]
        data[1] = 0x00;
 80019a6:	003b      	movs	r3, r7
 80019a8:	2200      	movs	r2, #0
 80019aa:	705a      	strb	r2, [r3, #1]
        MAX_I2CSend(data); // PWM
 80019ac:	003b      	movs	r3, r7
 80019ae:	0018      	movs	r0, r3
 80019b0:	f000 fc44 	bl	800223c <MAX_I2CSend>
      for (int i = 1; i < 73; i++)
 80019b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b6:	3301      	adds	r3, #1
 80019b8:	633b      	str	r3, [r7, #48]	; 0x30
 80019ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019bc:	2b48      	cmp	r3, #72	; 0x48
 80019be:	ddee      	ble.n	800199e <main+0x27a>
      }

      // turn stuff off
      PWR->CSR |= PWR_CSR_EWUP1 | PWR_CSR_EWUP2;
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <main+0x2d4>)
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <main+0x2d4>)
 80019c6:	21c0      	movs	r1, #192	; 0xc0
 80019c8:	0089      	lsls	r1, r1, #2
 80019ca:	430a      	orrs	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]
      PWR->CR |= PWR_CR_CWUF;
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <main+0x2d4>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <main+0x2d4>)
 80019d4:	2104      	movs	r1, #4
 80019d6:	430a      	orrs	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]
      PWR->CR |= PWR_CR_ULP; // turn off v_refint
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <main+0x2d4>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <main+0x2d4>)
 80019e0:	2180      	movs	r1, #128	; 0x80
 80019e2:	0089      	lsls	r1, r1, #2
 80019e4:	430a      	orrs	r2, r1
 80019e6:	601a      	str	r2, [r3, #0]

      HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	0018      	movs	r0, r3
 80019ee:	f001 fbd7 	bl	80031a0 <HAL_PWR_EnableWakeUpPin>

      // goto standby
      HAL_PWR_EnterSTANDBYMode();
 80019f2:	f001 fbe5 	bl	80031c0 <HAL_PWR_EnterSTANDBYMode>
  {
 80019f6:	e6d2      	b.n	800179e <main+0x7a>
 80019f8:	40007000 	.word	0x40007000
 80019fc:	200000bc 	.word	0x200000bc
 8001a00:	2000000c 	.word	0x2000000c
 8001a04:	20000000 	.word	0x20000000

08001a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b099      	sub	sp, #100	; 0x64
 8001a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a0e:	242c      	movs	r4, #44	; 0x2c
 8001a10:	193b      	adds	r3, r7, r4
 8001a12:	0018      	movs	r0, r3
 8001a14:	2334      	movs	r3, #52	; 0x34
 8001a16:	001a      	movs	r2, r3
 8001a18:	2100      	movs	r1, #0
 8001a1a:	f003 fa97 	bl	8004f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a1e:	2318      	movs	r3, #24
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	0018      	movs	r0, r3
 8001a24:	2314      	movs	r3, #20
 8001a26:	001a      	movs	r2, r3
 8001a28:	2100      	movs	r1, #0
 8001a2a:	f003 fa8f 	bl	8004f4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a2e:	003b      	movs	r3, r7
 8001a30:	0018      	movs	r0, r3
 8001a32:	2318      	movs	r3, #24
 8001a34:	001a      	movs	r2, r3
 8001a36:	2100      	movs	r1, #0
 8001a38:	f003 fa88 	bl	8004f4c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a3c:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <SystemClock_Config+0x104>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a33      	ldr	r2, [pc, #204]	; (8001b10 <SystemClock_Config+0x108>)
 8001a42:	401a      	ands	r2, r3
 8001a44:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <SystemClock_Config+0x104>)
 8001a46:	2180      	movs	r1, #128	; 0x80
 8001a48:	0109      	lsls	r1, r1, #4
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a4e:	f001 fb99 	bl	8003184 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a52:	4b30      	ldr	r3, [pc, #192]	; (8001b14 <SystemClock_Config+0x10c>)
 8001a54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a56:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <SystemClock_Config+0x10c>)
 8001a58:	492d      	ldr	r1, [pc, #180]	; (8001b10 <SystemClock_Config+0x108>)
 8001a5a:	400a      	ands	r2, r1
 8001a5c:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001a5e:	193b      	adds	r3, r7, r4
 8001a60:	2206      	movs	r2, #6
 8001a62:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a64:	193b      	adds	r3, r7, r4
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	0052      	lsls	r2, r2, #1
 8001a6a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a6c:	0021      	movs	r1, r4
 8001a6e:	187b      	adds	r3, r7, r1
 8001a70:	2201      	movs	r2, #1
 8001a72:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a74:	187b      	adds	r3, r7, r1
 8001a76:	2210      	movs	r2, #16
 8001a78:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a7a:	187b      	adds	r3, r7, r1
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a80:	187b      	adds	r3, r7, r1
 8001a82:	2200      	movs	r2, #0
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001a86:	187b      	adds	r3, r7, r1
 8001a88:	2280      	movs	r2, #128	; 0x80
 8001a8a:	02d2      	lsls	r2, r2, #11
 8001a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001a8e:	187b      	adds	r3, r7, r1
 8001a90:	2280      	movs	r2, #128	; 0x80
 8001a92:	03d2      	lsls	r2, r2, #15
 8001a94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a96:	187b      	adds	r3, r7, r1
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f001 fba7 	bl	80031ec <HAL_RCC_OscConfig>
 8001a9e:	1e03      	subs	r3, r0, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001aa2:	f000 fbdf 	bl	8002264 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa6:	2118      	movs	r1, #24
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	220f      	movs	r2, #15
 8001aac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aba:	187b      	adds	r3, r7, r1
 8001abc:	2200      	movs	r2, #0
 8001abe:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ac0:	187b      	adds	r3, r7, r1
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ac6:	187b      	adds	r3, r7, r1
 8001ac8:	2101      	movs	r1, #1
 8001aca:	0018      	movs	r0, r3
 8001acc:	f001 ff0a 	bl	80038e4 <HAL_RCC_ClockConfig>
 8001ad0:	1e03      	subs	r3, r0, #0
 8001ad2:	d001      	beq.n	8001ad8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001ad4:	f000 fbc6 	bl	8002264 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001ad8:	003b      	movs	r3, r7
 8001ada:	222a      	movs	r2, #42	; 0x2a
 8001adc:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ade:	003b      	movs	r3, r7
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ae4:	003b      	movs	r3, r7
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001aea:	003b      	movs	r3, r7
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	0252      	lsls	r2, r2, #9
 8001af0:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af2:	003b      	movs	r3, r7
 8001af4:	0018      	movs	r0, r3
 8001af6:	f002 f919 	bl	8003d2c <HAL_RCCEx_PeriphCLKConfig>
 8001afa:	1e03      	subs	r3, r0, #0
 8001afc:	d001      	beq.n	8001b02 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001afe:	f000 fbb1 	bl	8002264 <Error_Handler>
  }
}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b019      	add	sp, #100	; 0x64
 8001b08:	bd90      	pop	{r4, r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	ffffe7ff 	.word	0xffffe7ff
 8001b14:	40021000 	.word	0x40021000

08001b18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <MX_I2C1_Init+0x78>)
 8001b20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b24:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <MX_I2C1_Init+0x7c>)
 8001b26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b3a:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b46:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b54:	0018      	movs	r0, r3
 8001b56:	f000 ff53 	bl	8002a00 <HAL_I2C_Init>
 8001b5a:	1e03      	subs	r3, r0, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b5e:	f000 fb81 	bl	8002264 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b64:	2100      	movs	r1, #0
 8001b66:	0018      	movs	r0, r3
 8001b68:	f001 fa74 	bl	8003054 <HAL_I2CEx_ConfigAnalogFilter>
 8001b6c:	1e03      	subs	r3, r0, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b70:	f000 fb78 	bl	8002264 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <MX_I2C1_Init+0x74>)
 8001b76:	2100      	movs	r1, #0
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f001 fab7 	bl	80030ec <HAL_I2CEx_ConfigDigitalFilter>
 8001b7e:	1e03      	subs	r3, r0, #0
 8001b80:	d001      	beq.n	8001b86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b82:	f000 fb6f 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000070 	.word	0x20000070
 8001b90:	40005400 	.word	0x40005400
 8001b94:	00707cbb 	.word	0x00707cbb

08001b98 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <MX_RTC_Init+0x54>)
 8001b9e:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <MX_RTC_Init+0x58>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <MX_RTC_Init+0x54>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ba8:	4b10      	ldr	r3, [pc, #64]	; (8001bec <MX_RTC_Init+0x54>)
 8001baa:	227f      	movs	r2, #127	; 0x7f
 8001bac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <MX_RTC_Init+0x54>)
 8001bb0:	22ff      	movs	r2, #255	; 0xff
 8001bb2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <MX_RTC_Init+0x54>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <MX_RTC_Init+0x54>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <MX_RTC_Init+0x54>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <MX_RTC_Init+0x54>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	61da      	str	r2, [r3, #28]
  if (!(PWR->CSR & PWR_CSR_SBF)) { //USER
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <MX_RTC_Init+0x5c>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d107      	bne.n	8001be6 <MX_RTC_Init+0x4e>
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <MX_RTC_Init+0x54>)
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f002 f9cd 	bl	8003f78 <HAL_RTC_Init>
 8001bde:	1e03      	subs	r3, r0, #0
 8001be0:	d001      	beq.n	8001be6 <MX_RTC_Init+0x4e>
    {
      Error_Handler();
 8001be2:	f000 fb3f 	bl	8002264 <Error_Handler>
  } //USER
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200000bc 	.word	0x200000bc
 8001bf0:	40002800 	.word	0x40002800
 8001bf4:	40007000 	.word	0x40007000

08001bf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001bfe:	4a15      	ldr	r2, [pc, #84]	; (8001c54 <MX_USART2_UART_Init+0x5c>)
 8001c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c04:	22e1      	movs	r2, #225	; 0xe1
 8001c06:	0252      	lsls	r2, r2, #9
 8001c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c1e:	220c      	movs	r2, #12
 8001c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f002 fceb 	bl	8004618 <HAL_UART_Init>
 8001c42:	1e03      	subs	r3, r0, #0
 8001c44:	d001      	beq.n	8001c4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c46:	f000 fb0d 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200000e0 	.word	0x200000e0
 8001c54:	40004400 	.word	0x40004400

08001c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5e:	240c      	movs	r4, #12
 8001c60:	193b      	adds	r3, r7, r4
 8001c62:	0018      	movs	r0, r3
 8001c64:	2314      	movs	r3, #20
 8001c66:	001a      	movs	r2, r3
 8001c68:	2100      	movs	r1, #0
 8001c6a:	f003 f96f 	bl	8004f4c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6e:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <MX_GPIO_Init+0xf4>)
 8001c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c72:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <MX_GPIO_Init+0xf4>)
 8001c74:	2104      	movs	r1, #4
 8001c76:	430a      	orrs	r2, r1
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c7a:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <MX_GPIO_Init+0xf4>)
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	2204      	movs	r2, #4
 8001c80:	4013      	ands	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <MX_GPIO_Init+0xf4>)
 8001c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c8a:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <MX_GPIO_Init+0xf4>)
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c92:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <MX_GPIO_Init+0xf4>)
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	2201      	movs	r2, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <MX_GPIO_Init+0xf4>)
 8001ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca2:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <MX_GPIO_Init+0xf4>)
 8001ca4:	2102      	movs	r1, #2
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001caa:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <MX_GPIO_Init+0xf4>)
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	2202      	movs	r2, #2
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001cb6:	23c0      	movs	r3, #192	; 0xc0
 8001cb8:	0159      	lsls	r1, r3, #5
 8001cba:	23a0      	movs	r3, #160	; 0xa0
 8001cbc:	05db      	lsls	r3, r3, #23
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f000 fe80 	bl	80029c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001cc6:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <MX_GPIO_Init+0xf8>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2108      	movs	r1, #8
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 fe7a 	bl	80029c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cd2:	193b      	adds	r3, r7, r4
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd8:	193b      	adds	r3, r7, r4
 8001cda:	2200      	movs	r2, #0
 8001cdc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	193b      	adds	r3, r7, r4
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	193a      	adds	r2, r7, r4
 8001ce6:	23a0      	movs	r3, #160	; 0xa0
 8001ce8:	05db      	lsls	r3, r3, #23
 8001cea:	0011      	movs	r1, r2
 8001cec:	0018      	movs	r0, r3
 8001cee:	f000 fcdf 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cf2:	0021      	movs	r1, r4
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	22c0      	movs	r2, #192	; 0xc0
 8001cf8:	0152      	lsls	r2, r2, #5
 8001cfa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	000c      	movs	r4, r1
 8001cfe:	193b      	adds	r3, r7, r4
 8001d00:	2201      	movs	r2, #1
 8001d02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	193b      	adds	r3, r7, r4
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	193b      	adds	r3, r7, r4
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	193a      	adds	r2, r7, r4
 8001d12:	23a0      	movs	r3, #160	; 0xa0
 8001d14:	05db      	lsls	r3, r3, #23
 8001d16:	0011      	movs	r1, r2
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 fcc9 	bl	80026b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001d1e:	0021      	movs	r1, r4
 8001d20:	187b      	adds	r3, r7, r1
 8001d22:	2208      	movs	r2, #8
 8001d24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d26:	187b      	adds	r3, r7, r1
 8001d28:	2201      	movs	r2, #1
 8001d2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	187b      	adds	r3, r7, r1
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	187b      	adds	r3, r7, r1
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001d38:	187b      	adds	r3, r7, r1
 8001d3a:	4a05      	ldr	r2, [pc, #20]	; (8001d50 <MX_GPIO_Init+0xf8>)
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	0010      	movs	r0, r2
 8001d40:	f000 fcb6 	bl	80026b0 <HAL_GPIO_Init>

}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b009      	add	sp, #36	; 0x24
 8001d4a:	bd90      	pop	{r4, r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	50000400 	.word	0x50000400

08001d54 <MAX_Set_Rtc>:

/* USER CODE BEGIN 4 */
static void MAX_Set_Rtc(void)
{
 8001d54:	b5b0      	push	{r4, r5, r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af00      	add	r7, sp, #0
  // with the build_defs.h this sets the rtc to build time
  // it will lag the real time just by a few seconds

  RTC_TimeTypeDef time;
  time.Hours = BUILD_HOUR;
 8001d5a:	2332      	movs	r3, #50	; 0x32
 8001d5c:	2b3f      	cmp	r3, #63	; 0x3f
 8001d5e:	d00d      	beq.n	8001d7c <MAX_Set_Rtc+0x28>
 8001d60:	2332      	movs	r3, #50	; 0x32
 8001d62:	3b30      	subs	r3, #48	; 0x30
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	1c1a      	adds	r2, r3, #0
 8001d68:	0092      	lsls	r2, r2, #2
 8001d6a:	18d3      	adds	r3, r2, r3
 8001d6c:	18db      	adds	r3, r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2232      	movs	r2, #50	; 0x32
 8001d72:	189b      	adds	r3, r3, r2
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	3b30      	subs	r3, #48	; 0x30
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	e000      	b.n	8001d7e <MAX_Set_Rtc+0x2a>
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	701a      	strb	r2, [r3, #0]
  time.Minutes = BUILD_MIN;
 8001d82:	2332      	movs	r3, #50	; 0x32
 8001d84:	2b3f      	cmp	r3, #63	; 0x3f
 8001d86:	d00d      	beq.n	8001da4 <MAX_Set_Rtc+0x50>
 8001d88:	2330      	movs	r3, #48	; 0x30
 8001d8a:	3b30      	subs	r3, #48	; 0x30
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	1c1a      	adds	r2, r3, #0
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	18d3      	adds	r3, r2, r3
 8001d94:	18db      	adds	r3, r3, r3
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2235      	movs	r2, #53	; 0x35
 8001d9a:	189b      	adds	r3, r3, r2
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	3b30      	subs	r3, #48	; 0x30
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	e000      	b.n	8001da6 <MAX_Set_Rtc+0x52>
 8001da4:	2200      	movs	r2, #0
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	705a      	strb	r2, [r3, #1]
  time.Seconds = BUILD_SEC;
 8001daa:	2332      	movs	r3, #50	; 0x32
 8001dac:	2b3f      	cmp	r3, #63	; 0x3f
 8001dae:	d00d      	beq.n	8001dcc <MAX_Set_Rtc+0x78>
 8001db0:	2330      	movs	r3, #48	; 0x30
 8001db2:	3b30      	subs	r3, #48	; 0x30
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	1c1a      	adds	r2, r3, #0
 8001db8:	0092      	lsls	r2, r2, #2
 8001dba:	18d3      	adds	r3, r2, r3
 8001dbc:	18db      	adds	r3, r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2234      	movs	r2, #52	; 0x34
 8001dc2:	189b      	adds	r3, r3, r2
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	3b30      	subs	r3, #48	; 0x30
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	e000      	b.n	8001dce <MAX_Set_Rtc+0x7a>
 8001dcc:	2200      	movs	r2, #0
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	709a      	strb	r2, [r3, #2]
  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001dd2:	1d39      	adds	r1, r7, #4
 8001dd4:	4bae      	ldr	r3, [pc, #696]	; (8002090 <MAX_Set_Rtc+0x33c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f002 f96b 	bl	80040b4 <HAL_RTC_SetTime>

  // same with the date
  RTC_DateTypeDef date;
  date.Year = BUILD_YEAR_SHORT;
 8001dde:	234a      	movs	r3, #74	; 0x4a
 8001de0:	2b3f      	cmp	r3, #63	; 0x3f
 8001de2:	d00d      	beq.n	8001e00 <MAX_Set_Rtc+0xac>
 8001de4:	2332      	movs	r3, #50	; 0x32
 8001de6:	3b30      	subs	r3, #48	; 0x30
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	1c1a      	adds	r2, r3, #0
 8001dec:	0092      	lsls	r2, r2, #2
 8001dee:	18d3      	adds	r3, r2, r3
 8001df0:	18db      	adds	r3, r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2232      	movs	r2, #50	; 0x32
 8001df6:	189b      	adds	r3, r3, r2
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	3b30      	subs	r3, #48	; 0x30
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	e000      	b.n	8001e02 <MAX_Set_Rtc+0xae>
 8001e00:	2200      	movs	r2, #0
 8001e02:	003b      	movs	r3, r7
 8001e04:	70da      	strb	r2, [r3, #3]
  date.Month = BUILD_MONTH;
 8001e06:	234a      	movs	r3, #74	; 0x4a
 8001e08:	2b3f      	cmp	r3, #63	; 0x3f
 8001e0a:	d100      	bne.n	8001e0e <MAX_Set_Rtc+0xba>
 8001e0c:	e063      	b.n	8001ed6 <MAX_Set_Rtc+0x182>
 8001e0e:	234a      	movs	r3, #74	; 0x4a
 8001e10:	2b4a      	cmp	r3, #74	; 0x4a
 8001e12:	d106      	bne.n	8001e22 <MAX_Set_Rtc+0xce>
 8001e14:	2361      	movs	r3, #97	; 0x61
 8001e16:	2b61      	cmp	r3, #97	; 0x61
 8001e18:	d103      	bne.n	8001e22 <MAX_Set_Rtc+0xce>
 8001e1a:	236e      	movs	r3, #110	; 0x6e
 8001e1c:	2b6e      	cmp	r3, #110	; 0x6e
 8001e1e:	d100      	bne.n	8001e22 <MAX_Set_Rtc+0xce>
 8001e20:	e057      	b.n	8001ed2 <MAX_Set_Rtc+0x17e>
 8001e22:	234a      	movs	r3, #74	; 0x4a
 8001e24:	2b46      	cmp	r3, #70	; 0x46
 8001e26:	d100      	bne.n	8001e2a <MAX_Set_Rtc+0xd6>
 8001e28:	e051      	b.n	8001ece <MAX_Set_Rtc+0x17a>
 8001e2a:	234a      	movs	r3, #74	; 0x4a
 8001e2c:	2b4d      	cmp	r3, #77	; 0x4d
 8001e2e:	d105      	bne.n	8001e3c <MAX_Set_Rtc+0xe8>
 8001e30:	2361      	movs	r3, #97	; 0x61
 8001e32:	2b61      	cmp	r3, #97	; 0x61
 8001e34:	d102      	bne.n	8001e3c <MAX_Set_Rtc+0xe8>
 8001e36:	236e      	movs	r3, #110	; 0x6e
 8001e38:	2b72      	cmp	r3, #114	; 0x72
 8001e3a:	d046      	beq.n	8001eca <MAX_Set_Rtc+0x176>
 8001e3c:	234a      	movs	r3, #74	; 0x4a
 8001e3e:	2b41      	cmp	r3, #65	; 0x41
 8001e40:	d102      	bne.n	8001e48 <MAX_Set_Rtc+0xf4>
 8001e42:	2361      	movs	r3, #97	; 0x61
 8001e44:	2b70      	cmp	r3, #112	; 0x70
 8001e46:	d03e      	beq.n	8001ec6 <MAX_Set_Rtc+0x172>
 8001e48:	234a      	movs	r3, #74	; 0x4a
 8001e4a:	2b4d      	cmp	r3, #77	; 0x4d
 8001e4c:	d105      	bne.n	8001e5a <MAX_Set_Rtc+0x106>
 8001e4e:	2361      	movs	r3, #97	; 0x61
 8001e50:	2b61      	cmp	r3, #97	; 0x61
 8001e52:	d102      	bne.n	8001e5a <MAX_Set_Rtc+0x106>
 8001e54:	236e      	movs	r3, #110	; 0x6e
 8001e56:	2b79      	cmp	r3, #121	; 0x79
 8001e58:	d033      	beq.n	8001ec2 <MAX_Set_Rtc+0x16e>
 8001e5a:	234a      	movs	r3, #74	; 0x4a
 8001e5c:	2b4a      	cmp	r3, #74	; 0x4a
 8001e5e:	d105      	bne.n	8001e6c <MAX_Set_Rtc+0x118>
 8001e60:	2361      	movs	r3, #97	; 0x61
 8001e62:	2b75      	cmp	r3, #117	; 0x75
 8001e64:	d102      	bne.n	8001e6c <MAX_Set_Rtc+0x118>
 8001e66:	236e      	movs	r3, #110	; 0x6e
 8001e68:	2b6e      	cmp	r3, #110	; 0x6e
 8001e6a:	d028      	beq.n	8001ebe <MAX_Set_Rtc+0x16a>
 8001e6c:	234a      	movs	r3, #74	; 0x4a
 8001e6e:	2b4a      	cmp	r3, #74	; 0x4a
 8001e70:	d105      	bne.n	8001e7e <MAX_Set_Rtc+0x12a>
 8001e72:	2361      	movs	r3, #97	; 0x61
 8001e74:	2b75      	cmp	r3, #117	; 0x75
 8001e76:	d102      	bne.n	8001e7e <MAX_Set_Rtc+0x12a>
 8001e78:	236e      	movs	r3, #110	; 0x6e
 8001e7a:	2b6c      	cmp	r3, #108	; 0x6c
 8001e7c:	d01d      	beq.n	8001eba <MAX_Set_Rtc+0x166>
 8001e7e:	234a      	movs	r3, #74	; 0x4a
 8001e80:	2b41      	cmp	r3, #65	; 0x41
 8001e82:	d102      	bne.n	8001e8a <MAX_Set_Rtc+0x136>
 8001e84:	2361      	movs	r3, #97	; 0x61
 8001e86:	2b75      	cmp	r3, #117	; 0x75
 8001e88:	d015      	beq.n	8001eb6 <MAX_Set_Rtc+0x162>
 8001e8a:	234a      	movs	r3, #74	; 0x4a
 8001e8c:	2b53      	cmp	r3, #83	; 0x53
 8001e8e:	d010      	beq.n	8001eb2 <MAX_Set_Rtc+0x15e>
 8001e90:	234a      	movs	r3, #74	; 0x4a
 8001e92:	2b4f      	cmp	r3, #79	; 0x4f
 8001e94:	d00b      	beq.n	8001eae <MAX_Set_Rtc+0x15a>
 8001e96:	234a      	movs	r3, #74	; 0x4a
 8001e98:	2b4e      	cmp	r3, #78	; 0x4e
 8001e9a:	d006      	beq.n	8001eaa <MAX_Set_Rtc+0x156>
 8001e9c:	234a      	movs	r3, #74	; 0x4a
 8001e9e:	2b44      	cmp	r3, #68	; 0x44
 8001ea0:	d101      	bne.n	8001ea6 <MAX_Set_Rtc+0x152>
 8001ea2:	230c      	movs	r3, #12
 8001ea4:	e018      	b.n	8001ed8 <MAX_Set_Rtc+0x184>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	e016      	b.n	8001ed8 <MAX_Set_Rtc+0x184>
 8001eaa:	230b      	movs	r3, #11
 8001eac:	e014      	b.n	8001ed8 <MAX_Set_Rtc+0x184>
 8001eae:	230a      	movs	r3, #10
 8001eb0:	e012      	b.n	8001ed8 <MAX_Set_Rtc+0x184>
 8001eb2:	2309      	movs	r3, #9
 8001eb4:	e010      	b.n	8001ed8 <MAX_Set_Rtc+0x184>
 8001eb6:	2308      	movs	r3, #8
 8001eb8:	e00e      	b.n	8001ed8 <MAX_Set_Rtc+0x184>
 8001eba:	2307      	movs	r3, #7
 8001ebc:	e00c      	b.n	8001ed8 <MAX_Set_Rtc+0x184>
 8001ebe:	2306      	movs	r3, #6
 8001ec0:	e00a      	b.n	8001ed8 <MAX_Set_Rtc+0x184>
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	e008      	b.n	8001ed8 <MAX_Set_Rtc+0x184>
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	e006      	b.n	8001ed8 <MAX_Set_Rtc+0x184>
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e004      	b.n	8001ed8 <MAX_Set_Rtc+0x184>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e002      	b.n	8001ed8 <MAX_Set_Rtc+0x184>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <MAX_Set_Rtc+0x184>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	003a      	movs	r2, r7
 8001eda:	7053      	strb	r3, [r2, #1]
  date.Date = BUILD_DAY;
 8001edc:	234a      	movs	r3, #74	; 0x4a
 8001ede:	2b3f      	cmp	r3, #63	; 0x3f
 8001ee0:	d012      	beq.n	8001f08 <MAX_Set_Rtc+0x1b4>
 8001ee2:	2332      	movs	r3, #50	; 0x32
 8001ee4:	2b2f      	cmp	r3, #47	; 0x2f
 8001ee6:	d908      	bls.n	8001efa <MAX_Set_Rtc+0x1a6>
 8001ee8:	2332      	movs	r3, #50	; 0x32
 8001eea:	3b30      	subs	r3, #48	; 0x30
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	1c1a      	adds	r2, r3, #0
 8001ef0:	0092      	lsls	r2, r2, #2
 8001ef2:	18d3      	adds	r3, r2, r3
 8001ef4:	18db      	adds	r3, r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	e000      	b.n	8001efc <MAX_Set_Rtc+0x1a8>
 8001efa:	2300      	movs	r3, #0
 8001efc:	2230      	movs	r2, #48	; 0x30
 8001efe:	189b      	adds	r3, r3, r2
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	3b30      	subs	r3, #48	; 0x30
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	e000      	b.n	8001f0a <MAX_Set_Rtc+0x1b6>
 8001f08:	2200      	movs	r2, #0
 8001f0a:	003b      	movs	r3, r7
 8001f0c:	709a      	strb	r2, [r3, #2]
  // the weekday is calculated (meh)
  uint16_t year = BUILD_YEAR;
 8001f0e:	234a      	movs	r3, #74	; 0x4a
 8001f10:	2b3f      	cmp	r3, #63	; 0x3f
 8001f12:	d01f      	beq.n	8001f54 <MAX_Set_Rtc+0x200>
 8001f14:	2332      	movs	r3, #50	; 0x32
 8001f16:	3b30      	subs	r3, #48	; 0x30
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	22fa      	movs	r2, #250	; 0xfa
 8001f1c:	0092      	lsls	r2, r2, #2
 8001f1e:	4353      	muls	r3, r2
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	2330      	movs	r3, #48	; 0x30
 8001f24:	3b30      	subs	r3, #48	; 0x30
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2164      	movs	r1, #100	; 0x64
 8001f2a:	434b      	muls	r3, r1
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	18d3      	adds	r3, r2, r3
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	2332      	movs	r3, #50	; 0x32
 8001f34:	3b30      	subs	r3, #48	; 0x30
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	1c19      	adds	r1, r3, #0
 8001f3a:	0089      	lsls	r1, r1, #2
 8001f3c:	18cb      	adds	r3, r1, r3
 8001f3e:	18db      	adds	r3, r3, r3
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	18d3      	adds	r3, r2, r3
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	2332      	movs	r3, #50	; 0x32
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	18d3      	adds	r3, r2, r3
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	3b30      	subs	r3, #48	; 0x30
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	e000      	b.n	8001f56 <MAX_Set_Rtc+0x202>
 8001f54:	2200      	movs	r2, #0
 8001f56:	231e      	movs	r3, #30
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	801a      	strh	r2, [r3, #0]
  uint16_t month = BUILD_MONTH;
 8001f5c:	234a      	movs	r3, #74	; 0x4a
 8001f5e:	2b3f      	cmp	r3, #63	; 0x3f
 8001f60:	d100      	bne.n	8001f64 <MAX_Set_Rtc+0x210>
 8001f62:	e063      	b.n	800202c <MAX_Set_Rtc+0x2d8>
 8001f64:	234a      	movs	r3, #74	; 0x4a
 8001f66:	2b4a      	cmp	r3, #74	; 0x4a
 8001f68:	d106      	bne.n	8001f78 <MAX_Set_Rtc+0x224>
 8001f6a:	2361      	movs	r3, #97	; 0x61
 8001f6c:	2b61      	cmp	r3, #97	; 0x61
 8001f6e:	d103      	bne.n	8001f78 <MAX_Set_Rtc+0x224>
 8001f70:	236e      	movs	r3, #110	; 0x6e
 8001f72:	2b6e      	cmp	r3, #110	; 0x6e
 8001f74:	d100      	bne.n	8001f78 <MAX_Set_Rtc+0x224>
 8001f76:	e057      	b.n	8002028 <MAX_Set_Rtc+0x2d4>
 8001f78:	234a      	movs	r3, #74	; 0x4a
 8001f7a:	2b46      	cmp	r3, #70	; 0x46
 8001f7c:	d100      	bne.n	8001f80 <MAX_Set_Rtc+0x22c>
 8001f7e:	e051      	b.n	8002024 <MAX_Set_Rtc+0x2d0>
 8001f80:	234a      	movs	r3, #74	; 0x4a
 8001f82:	2b4d      	cmp	r3, #77	; 0x4d
 8001f84:	d105      	bne.n	8001f92 <MAX_Set_Rtc+0x23e>
 8001f86:	2361      	movs	r3, #97	; 0x61
 8001f88:	2b61      	cmp	r3, #97	; 0x61
 8001f8a:	d102      	bne.n	8001f92 <MAX_Set_Rtc+0x23e>
 8001f8c:	236e      	movs	r3, #110	; 0x6e
 8001f8e:	2b72      	cmp	r3, #114	; 0x72
 8001f90:	d046      	beq.n	8002020 <MAX_Set_Rtc+0x2cc>
 8001f92:	234a      	movs	r3, #74	; 0x4a
 8001f94:	2b41      	cmp	r3, #65	; 0x41
 8001f96:	d102      	bne.n	8001f9e <MAX_Set_Rtc+0x24a>
 8001f98:	2361      	movs	r3, #97	; 0x61
 8001f9a:	2b70      	cmp	r3, #112	; 0x70
 8001f9c:	d03e      	beq.n	800201c <MAX_Set_Rtc+0x2c8>
 8001f9e:	234a      	movs	r3, #74	; 0x4a
 8001fa0:	2b4d      	cmp	r3, #77	; 0x4d
 8001fa2:	d105      	bne.n	8001fb0 <MAX_Set_Rtc+0x25c>
 8001fa4:	2361      	movs	r3, #97	; 0x61
 8001fa6:	2b61      	cmp	r3, #97	; 0x61
 8001fa8:	d102      	bne.n	8001fb0 <MAX_Set_Rtc+0x25c>
 8001faa:	236e      	movs	r3, #110	; 0x6e
 8001fac:	2b79      	cmp	r3, #121	; 0x79
 8001fae:	d033      	beq.n	8002018 <MAX_Set_Rtc+0x2c4>
 8001fb0:	234a      	movs	r3, #74	; 0x4a
 8001fb2:	2b4a      	cmp	r3, #74	; 0x4a
 8001fb4:	d105      	bne.n	8001fc2 <MAX_Set_Rtc+0x26e>
 8001fb6:	2361      	movs	r3, #97	; 0x61
 8001fb8:	2b75      	cmp	r3, #117	; 0x75
 8001fba:	d102      	bne.n	8001fc2 <MAX_Set_Rtc+0x26e>
 8001fbc:	236e      	movs	r3, #110	; 0x6e
 8001fbe:	2b6e      	cmp	r3, #110	; 0x6e
 8001fc0:	d028      	beq.n	8002014 <MAX_Set_Rtc+0x2c0>
 8001fc2:	234a      	movs	r3, #74	; 0x4a
 8001fc4:	2b4a      	cmp	r3, #74	; 0x4a
 8001fc6:	d105      	bne.n	8001fd4 <MAX_Set_Rtc+0x280>
 8001fc8:	2361      	movs	r3, #97	; 0x61
 8001fca:	2b75      	cmp	r3, #117	; 0x75
 8001fcc:	d102      	bne.n	8001fd4 <MAX_Set_Rtc+0x280>
 8001fce:	236e      	movs	r3, #110	; 0x6e
 8001fd0:	2b6c      	cmp	r3, #108	; 0x6c
 8001fd2:	d01d      	beq.n	8002010 <MAX_Set_Rtc+0x2bc>
 8001fd4:	234a      	movs	r3, #74	; 0x4a
 8001fd6:	2b41      	cmp	r3, #65	; 0x41
 8001fd8:	d102      	bne.n	8001fe0 <MAX_Set_Rtc+0x28c>
 8001fda:	2361      	movs	r3, #97	; 0x61
 8001fdc:	2b75      	cmp	r3, #117	; 0x75
 8001fde:	d015      	beq.n	800200c <MAX_Set_Rtc+0x2b8>
 8001fe0:	234a      	movs	r3, #74	; 0x4a
 8001fe2:	2b53      	cmp	r3, #83	; 0x53
 8001fe4:	d010      	beq.n	8002008 <MAX_Set_Rtc+0x2b4>
 8001fe6:	234a      	movs	r3, #74	; 0x4a
 8001fe8:	2b4f      	cmp	r3, #79	; 0x4f
 8001fea:	d00b      	beq.n	8002004 <MAX_Set_Rtc+0x2b0>
 8001fec:	234a      	movs	r3, #74	; 0x4a
 8001fee:	2b4e      	cmp	r3, #78	; 0x4e
 8001ff0:	d006      	beq.n	8002000 <MAX_Set_Rtc+0x2ac>
 8001ff2:	234a      	movs	r3, #74	; 0x4a
 8001ff4:	2b44      	cmp	r3, #68	; 0x44
 8001ff6:	d101      	bne.n	8001ffc <MAX_Set_Rtc+0x2a8>
 8001ff8:	230c      	movs	r3, #12
 8001ffa:	e018      	b.n	800202e <MAX_Set_Rtc+0x2da>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e016      	b.n	800202e <MAX_Set_Rtc+0x2da>
 8002000:	230b      	movs	r3, #11
 8002002:	e014      	b.n	800202e <MAX_Set_Rtc+0x2da>
 8002004:	230a      	movs	r3, #10
 8002006:	e012      	b.n	800202e <MAX_Set_Rtc+0x2da>
 8002008:	2309      	movs	r3, #9
 800200a:	e010      	b.n	800202e <MAX_Set_Rtc+0x2da>
 800200c:	2308      	movs	r3, #8
 800200e:	e00e      	b.n	800202e <MAX_Set_Rtc+0x2da>
 8002010:	2307      	movs	r3, #7
 8002012:	e00c      	b.n	800202e <MAX_Set_Rtc+0x2da>
 8002014:	2306      	movs	r3, #6
 8002016:	e00a      	b.n	800202e <MAX_Set_Rtc+0x2da>
 8002018:	2305      	movs	r3, #5
 800201a:	e008      	b.n	800202e <MAX_Set_Rtc+0x2da>
 800201c:	2304      	movs	r3, #4
 800201e:	e006      	b.n	800202e <MAX_Set_Rtc+0x2da>
 8002020:	2303      	movs	r3, #3
 8002022:	e004      	b.n	800202e <MAX_Set_Rtc+0x2da>
 8002024:	2302      	movs	r3, #2
 8002026:	e002      	b.n	800202e <MAX_Set_Rtc+0x2da>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <MAX_Set_Rtc+0x2da>
 800202c:	2300      	movs	r3, #0
 800202e:	221a      	movs	r2, #26
 8002030:	18ba      	adds	r2, r7, r2
 8002032:	8013      	strh	r3, [r2, #0]
  uint16_t day = BUILD_DAY;
 8002034:	234a      	movs	r3, #74	; 0x4a
 8002036:	2b3f      	cmp	r3, #63	; 0x3f
 8002038:	d013      	beq.n	8002062 <MAX_Set_Rtc+0x30e>
 800203a:	2332      	movs	r3, #50	; 0x32
 800203c:	2b2f      	cmp	r3, #47	; 0x2f
 800203e:	d908      	bls.n	8002052 <MAX_Set_Rtc+0x2fe>
 8002040:	2332      	movs	r3, #50	; 0x32
 8002042:	3b30      	subs	r3, #48	; 0x30
 8002044:	b29b      	uxth	r3, r3
 8002046:	1c1a      	adds	r2, r3, #0
 8002048:	0092      	lsls	r2, r2, #2
 800204a:	18d3      	adds	r3, r2, r3
 800204c:	18db      	adds	r3, r3, r3
 800204e:	b29b      	uxth	r3, r3
 8002050:	e000      	b.n	8002054 <MAX_Set_Rtc+0x300>
 8002052:	2300      	movs	r3, #0
 8002054:	2230      	movs	r2, #48	; 0x30
 8002056:	b292      	uxth	r2, r2
 8002058:	189b      	adds	r3, r3, r2
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b30      	subs	r3, #48	; 0x30
 800205e:	b29a      	uxth	r2, r3
 8002060:	e000      	b.n	8002064 <MAX_Set_Rtc+0x310>
 8002062:	2200      	movs	r2, #0
 8002064:	211c      	movs	r1, #28
 8002066:	187b      	adds	r3, r7, r1
 8002068:	801a      	strh	r2, [r3, #0]
  if (month < 3) {
 800206a:	231a      	movs	r3, #26
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d80f      	bhi.n	8002094 <MAX_Set_Rtc+0x340>
    day = day + year;
 8002074:	187b      	adds	r3, r7, r1
 8002076:	1879      	adds	r1, r7, r1
 8002078:	201e      	movs	r0, #30
 800207a:	183a      	adds	r2, r7, r0
 800207c:	8809      	ldrh	r1, [r1, #0]
 800207e:	8812      	ldrh	r2, [r2, #0]
 8002080:	188a      	adds	r2, r1, r2
 8002082:	801a      	strh	r2, [r3, #0]
    year--;
 8002084:	183b      	adds	r3, r7, r0
 8002086:	881a      	ldrh	r2, [r3, #0]
 8002088:	183b      	adds	r3, r7, r0
 800208a:	3a01      	subs	r2, #1
 800208c:	801a      	strh	r2, [r3, #0]
 800208e:	e00c      	b.n	80020aa <MAX_Set_Rtc+0x356>
 8002090:	200000bc 	.word	0x200000bc
  } else {
    day = day + year - 2;
 8002094:	211c      	movs	r1, #28
 8002096:	187a      	adds	r2, r7, r1
 8002098:	231e      	movs	r3, #30
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	8812      	ldrh	r2, [r2, #0]
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	18d3      	adds	r3, r2, r3
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	187b      	adds	r3, r7, r1
 80020a6:	3a02      	subs	r2, #2
 80020a8:	801a      	strh	r2, [r3, #0]
  }
  date.WeekDay = ((uint16_t)(23 * month/9.0) + day + 4 + (uint16_t)(year/4) - (uint16_t)(year/100) + (uint16_t)(year/400)) % 7;
 80020aa:	231a      	movs	r3, #26
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	881a      	ldrh	r2, [r3, #0]
 80020b0:	0013      	movs	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	189b      	adds	r3, r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	0018      	movs	r0, r3
 80020bc:	f7ff f97c 	bl	80013b8 <__aeabi_i2d>
 80020c0:	2200      	movs	r2, #0
 80020c2:	4b21      	ldr	r3, [pc, #132]	; (8002148 <MAX_Set_Rtc+0x3f4>)
 80020c4:	f7fe fac8 	bl	8000658 <__aeabi_ddiv>
 80020c8:	0002      	movs	r2, r0
 80020ca:	000b      	movs	r3, r1
 80020cc:	0010      	movs	r0, r2
 80020ce:	0019      	movs	r1, r3
 80020d0:	f7fe f9d8 	bl	8000484 <__aeabi_d2uiz>
 80020d4:	0003      	movs	r3, r0
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	001a      	movs	r2, r3
 80020da:	231c      	movs	r3, #28
 80020dc:	18fb      	adds	r3, r7, r3
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	18d3      	adds	r3, r2, r3
 80020e2:	3304      	adds	r3, #4
 80020e4:	251e      	movs	r5, #30
 80020e6:	197a      	adds	r2, r7, r5
 80020e8:	8812      	ldrh	r2, [r2, #0]
 80020ea:	0892      	lsrs	r2, r2, #2
 80020ec:	b292      	uxth	r2, r2
 80020ee:	189c      	adds	r4, r3, r2
 80020f0:	197b      	adds	r3, r7, r5
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	2164      	movs	r1, #100	; 0x64
 80020f6:	0018      	movs	r0, r3
 80020f8:	f7fe f806 	bl	8000108 <__udivsi3>
 80020fc:	0003      	movs	r3, r0
 80020fe:	b29b      	uxth	r3, r3
 8002100:	1ae4      	subs	r4, r4, r3
 8002102:	197b      	adds	r3, r7, r5
 8002104:	881b      	ldrh	r3, [r3, #0]
 8002106:	22c8      	movs	r2, #200	; 0xc8
 8002108:	0051      	lsls	r1, r2, #1
 800210a:	0018      	movs	r0, r3
 800210c:	f7fd fffc 	bl	8000108 <__udivsi3>
 8002110:	0003      	movs	r3, r0
 8002112:	b29b      	uxth	r3, r3
 8002114:	18e3      	adds	r3, r4, r3
 8002116:	2107      	movs	r1, #7
 8002118:	0018      	movs	r0, r3
 800211a:	f7fe f965 	bl	80003e8 <__aeabi_idivmod>
 800211e:	000b      	movs	r3, r1
 8002120:	b2da      	uxtb	r2, r3
 8002122:	003b      	movs	r3, r7
 8002124:	701a      	strb	r2, [r3, #0]
  // correct for sunday
  // 1 = monday, 7 = sunday
  if (date.WeekDay == 0) {
 8002126:	003b      	movs	r3, r7
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <MAX_Set_Rtc+0x3e0>
    date.WeekDay = 7;
 800212e:	003b      	movs	r3, r7
 8002130:	2207      	movs	r2, #7
 8002132:	701a      	strb	r2, [r3, #0]
  }
  HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002134:	0039      	movs	r1, r7
 8002136:	4b05      	ldr	r3, [pc, #20]	; (800214c <MAX_Set_Rtc+0x3f8>)
 8002138:	2200      	movs	r2, #0
 800213a:	0018      	movs	r0, r3
 800213c:	f002 f8da 	bl	80042f4 <HAL_RTC_SetDate>
}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b008      	add	sp, #32
 8002146:	bdb0      	pop	{r4, r5, r7, pc}
 8002148:	40220000 	.word	0x40220000
 800214c:	200000bc 	.word	0x200000bc

08002150 <MAX_Init3746A>:

void MAX_Init3746A(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
  uint8_t data[2];

  data[0] = 0xfe;
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	22fe      	movs	r2, #254	; 0xfe
 800215a:	701a      	strb	r2, [r3, #0]
  data[1] = 0xc5;
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	22c5      	movs	r2, #197	; 0xc5
 8002160:	705a      	strb	r2, [r3, #1]
  MAX_I2CSend(data);
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	0018      	movs	r0, r3
 8002166:	f000 f869 	bl	800223c <MAX_I2CSend>
  data[0] = 0xfd;
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	22fd      	movs	r2, #253	; 0xfd
 800216e:	701a      	strb	r2, [r3, #0]
  data[1] = 0x00;
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	2200      	movs	r2, #0
 8002174:	705a      	strb	r2, [r3, #1]
  MAX_I2CSend(data); // page 0
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	0018      	movs	r0, r3
 800217a:	f000 f85f 	bl	800223c <MAX_I2CSend>
  for (int i = 1; i < 73; i++)
 800217e:	2301      	movs	r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e00d      	b.n	80021a0 <MAX_Init3746A+0x50>
  {
    data[0] = i;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	1d3b      	adds	r3, r7, #4
 800218a:	701a      	strb	r2, [r3, #0]
    data[1] = 0x00;
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	2200      	movs	r2, #0
 8002190:	705a      	strb	r2, [r3, #1]
    MAX_I2CSend(data); // PWM
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	0018      	movs	r0, r3
 8002196:	f000 f851 	bl	800223c <MAX_I2CSend>
  for (int i = 1; i < 73; i++)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3301      	adds	r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b48      	cmp	r3, #72	; 0x48
 80021a4:	ddee      	ble.n	8002184 <MAX_Init3746A+0x34>
  }

  data[0] = 0xfe;
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	22fe      	movs	r2, #254	; 0xfe
 80021aa:	701a      	strb	r2, [r3, #0]
  data[1] = 0xc5;
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	22c5      	movs	r2, #197	; 0xc5
 80021b0:	705a      	strb	r2, [r3, #1]
  MAX_I2CSend(data);
 80021b2:	1d3b      	adds	r3, r7, #4
 80021b4:	0018      	movs	r0, r3
 80021b6:	f000 f841 	bl	800223c <MAX_I2CSend>
  data[0] = 0xfd;
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	22fd      	movs	r2, #253	; 0xfd
 80021be:	701a      	strb	r2, [r3, #0]
  data[1] = 0x01;
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	2201      	movs	r2, #1
 80021c4:	705a      	strb	r2, [r3, #1]
  MAX_I2CSend(data); // page 1
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	0018      	movs	r0, r3
 80021ca:	f000 f837 	bl	800223c <MAX_I2CSend>
  for (int i = 1; i < 73; i++)
 80021ce:	2301      	movs	r3, #1
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	e00d      	b.n	80021f0 <MAX_Init3746A+0xa0>
  {
    data[0] = i;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	1d3b      	adds	r3, r7, #4
 80021da:	701a      	strb	r2, [r3, #0]
    data[1] = 0xff;
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	22ff      	movs	r2, #255	; 0xff
 80021e0:	705a      	strb	r2, [r3, #1]
    MAX_I2CSend(data); // scaling
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	0018      	movs	r0, r3
 80021e6:	f000 f829 	bl	800223c <MAX_I2CSend>
  for (int i = 1; i < 73; i++)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	3301      	adds	r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b48      	cmp	r3, #72	; 0x48
 80021f4:	ddee      	ble.n	80021d4 <MAX_Init3746A+0x84>
  }

  data[0] = 0x52;
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2252      	movs	r2, #82	; 0x52
 80021fa:	701a      	strb	r2, [r3, #0]
  data[1] = 0x70;
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	2270      	movs	r2, #112	; 0x70
 8002200:	705a      	strb	r2, [r3, #1]
  MAX_I2CSend(data);
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	0018      	movs	r0, r3
 8002206:	f000 f819 	bl	800223c <MAX_I2CSend>
  data[0] = 0x51;
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	2251      	movs	r2, #81	; 0x51
 800220e:	701a      	strb	r2, [r3, #0]
  data[1] = 0xff;
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	22ff      	movs	r2, #255	; 0xff
 8002214:	705a      	strb	r2, [r3, #1]
  MAX_I2CSend(data); // gcc
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	0018      	movs	r0, r3
 800221a:	f000 f80f 	bl	800223c <MAX_I2CSend>
  data[0] = 0x50;
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	2250      	movs	r2, #80	; 0x50
 8002222:	701a      	strb	r2, [r3, #0]
  data[1] = 0x01;
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	2201      	movs	r2, #1
 8002228:	705a      	strb	r2, [r3, #1]
  MAX_I2CSend(data);
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	0018      	movs	r0, r3
 800222e:	f000 f805 	bl	800223c <MAX_I2CSend>
}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	46bd      	mov	sp, r7
 8002236:	b004      	add	sp, #16
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <MAX_I2CSend>:

void MAX_I2CSend(uint8_t * data)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af02      	add	r7, sp, #8
 8002242:	6078      	str	r0, [r7, #4]
  HAL_I2C_Master_Transmit(&hi2c1, Addr_GND_GND, data, 2, 0xFFFF);
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	4805      	ldr	r0, [pc, #20]	; (800225c <MAX_I2CSend+0x20>)
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <MAX_I2CSend+0x24>)
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2302      	movs	r3, #2
 800224e:	21c0      	movs	r1, #192	; 0xc0
 8002250:	f000 fc6c 	bl	8002b2c <HAL_I2C_Master_Transmit>
}
 8002254:	46c0      	nop			; (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b002      	add	sp, #8
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000070 	.word	0x20000070
 8002260:	0000ffff 	.word	0x0000ffff

08002264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002268:	b672      	cpsid	i
}
 800226a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800226c:	e7fe      	b.n	800226c <Error_Handler+0x8>
	...

08002270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <HAL_MspInit+0x24>)
 8002276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_MspInit+0x24>)
 800227a:	2101      	movs	r1, #1
 800227c:	430a      	orrs	r2, r1
 800227e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <HAL_MspInit+0x24>)
 8002282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <HAL_MspInit+0x24>)
 8002286:	2180      	movs	r1, #128	; 0x80
 8002288:	0549      	lsls	r1, r1, #21
 800228a:	430a      	orrs	r2, r1
 800228c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000

08002298 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b089      	sub	sp, #36	; 0x24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	240c      	movs	r4, #12
 80022a2:	193b      	adds	r3, r7, r4
 80022a4:	0018      	movs	r0, r3
 80022a6:	2314      	movs	r3, #20
 80022a8:	001a      	movs	r2, r3
 80022aa:	2100      	movs	r1, #0
 80022ac:	f002 fe4e 	bl	8004f4c <memset>
  if(hi2c->Instance==I2C1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a18      	ldr	r2, [pc, #96]	; (8002318 <HAL_I2C_MspInit+0x80>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d12a      	bne.n	8002310 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_I2C_MspInit+0x84>)
 80022bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <HAL_I2C_MspInit+0x84>)
 80022c0:	2101      	movs	r1, #1
 80022c2:	430a      	orrs	r2, r1
 80022c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_I2C_MspInit+0x84>)
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	2201      	movs	r2, #1
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022d2:	193b      	adds	r3, r7, r4
 80022d4:	22c0      	movs	r2, #192	; 0xc0
 80022d6:	00d2      	lsls	r2, r2, #3
 80022d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022da:	0021      	movs	r1, r4
 80022dc:	187b      	adds	r3, r7, r1
 80022de:	2212      	movs	r2, #18
 80022e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	187b      	adds	r3, r7, r1
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e8:	187b      	adds	r3, r7, r1
 80022ea:	2203      	movs	r2, #3
 80022ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80022ee:	187b      	adds	r3, r7, r1
 80022f0:	2201      	movs	r2, #1
 80022f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f4:	187a      	adds	r2, r7, r1
 80022f6:	23a0      	movs	r3, #160	; 0xa0
 80022f8:	05db      	lsls	r3, r3, #23
 80022fa:	0011      	movs	r1, r2
 80022fc:	0018      	movs	r0, r3
 80022fe:	f000 f9d7 	bl	80026b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_I2C_MspInit+0x84>)
 8002304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002306:	4b05      	ldr	r3, [pc, #20]	; (800231c <HAL_I2C_MspInit+0x84>)
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	0389      	lsls	r1, r1, #14
 800230c:	430a      	orrs	r2, r1
 800230e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	b009      	add	sp, #36	; 0x24
 8002316:	bd90      	pop	{r4, r7, pc}
 8002318:	40005400 	.word	0x40005400
 800231c:	40021000 	.word	0x40021000

08002320 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a06      	ldr	r2, [pc, #24]	; (8002348 <HAL_RTC_MspInit+0x28>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d106      	bne.n	8002340 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_RTC_MspInit+0x2c>)
 8002334:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_RTC_MspInit+0x2c>)
 8002338:	2180      	movs	r1, #128	; 0x80
 800233a:	02c9      	lsls	r1, r1, #11
 800233c:	430a      	orrs	r2, r1
 800233e:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b002      	add	sp, #8
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40002800 	.word	0x40002800
 800234c:	40021000 	.word	0x40021000

08002350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	240c      	movs	r4, #12
 800235a:	193b      	adds	r3, r7, r4
 800235c:	0018      	movs	r0, r3
 800235e:	2314      	movs	r3, #20
 8002360:	001a      	movs	r2, r3
 8002362:	2100      	movs	r1, #0
 8002364:	f002 fdf2 	bl	8004f4c <memset>
  if(huart->Instance==USART2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <HAL_UART_MspInit+0x80>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d129      	bne.n	80023c6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002372:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <HAL_UART_MspInit+0x84>)
 8002374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002376:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <HAL_UART_MspInit+0x84>)
 8002378:	2180      	movs	r1, #128	; 0x80
 800237a:	0289      	lsls	r1, r1, #10
 800237c:	430a      	orrs	r2, r1
 800237e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <HAL_UART_MspInit+0x84>)
 8002382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002384:	4b13      	ldr	r3, [pc, #76]	; (80023d4 <HAL_UART_MspInit+0x84>)
 8002386:	2101      	movs	r1, #1
 8002388:	430a      	orrs	r2, r1
 800238a:	62da      	str	r2, [r3, #44]	; 0x2c
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_UART_MspInit+0x84>)
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	2201      	movs	r2, #1
 8002392:	4013      	ands	r3, r2
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002398:	0021      	movs	r1, r4
 800239a:	187b      	adds	r3, r7, r1
 800239c:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <HAL_UART_MspInit+0x88>)
 800239e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a0:	187b      	adds	r3, r7, r1
 80023a2:	2202      	movs	r2, #2
 80023a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	187b      	adds	r3, r7, r1
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ac:	187b      	adds	r3, r7, r1
 80023ae:	2203      	movs	r2, #3
 80023b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80023b2:	187b      	adds	r3, r7, r1
 80023b4:	2204      	movs	r2, #4
 80023b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	187a      	adds	r2, r7, r1
 80023ba:	23a0      	movs	r3, #160	; 0xa0
 80023bc:	05db      	lsls	r3, r3, #23
 80023be:	0011      	movs	r1, r2
 80023c0:	0018      	movs	r0, r3
 80023c2:	f000 f975 	bl	80026b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b009      	add	sp, #36	; 0x24
 80023cc:	bd90      	pop	{r4, r7, pc}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	40004400 	.word	0x40004400
 80023d4:	40021000 	.word	0x40021000
 80023d8:	00008004 	.word	0x00008004

080023dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <NMI_Handler+0x4>

080023e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e6:	e7fe      	b.n	80023e6 <HardFault_Handler+0x4>

080023e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023ec:	46c0      	nop			; (mov r8, r8)
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002400:	f000 f886 	bl	8002510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002404:	46c0      	nop			; (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002414:	480d      	ldr	r0, [pc, #52]	; (800244c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002416:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002418:	480d      	ldr	r0, [pc, #52]	; (8002450 <LoopForever+0x6>)
  ldr r1, =_edata
 800241a:	490e      	ldr	r1, [pc, #56]	; (8002454 <LoopForever+0xa>)
  ldr r2, =_sidata
 800241c:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <LoopForever+0xe>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002420:	e002      	b.n	8002428 <LoopCopyDataInit>

08002422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002426:	3304      	adds	r3, #4

08002428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800242c:	d3f9      	bcc.n	8002422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242e:	4a0b      	ldr	r2, [pc, #44]	; (800245c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002430:	4c0b      	ldr	r4, [pc, #44]	; (8002460 <LoopForever+0x16>)
  movs r3, #0
 8002432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002434:	e001      	b.n	800243a <LoopFillZerobss>

08002436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002438:	3204      	adds	r2, #4

0800243a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800243c:	d3fb      	bcc.n	8002436 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800243e:	f7ff ffe4 	bl	800240a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002442:	f002 fd5f 	bl	8004f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002446:	f7ff f96d 	bl	8001724 <main>

0800244a <LoopForever>:

LoopForever:
    b LoopForever
 800244a:	e7fe      	b.n	800244a <LoopForever>
   ldr   r0, =_estack
 800244c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002454:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8002458:	08005030 	.word	0x08005030
  ldr r2, =_sbss
 800245c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8002460:	20000168 	.word	0x20000168

08002464 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <ADC1_COMP_IRQHandler>
	...

08002468 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_Init+0x3c>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_Init+0x3c>)
 800247a:	2140      	movs	r1, #64	; 0x40
 800247c:	430a      	orrs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002480:	2000      	movs	r0, #0
 8002482:	f000 f811 	bl	80024a8 <HAL_InitTick>
 8002486:	1e03      	subs	r3, r0, #0
 8002488:	d003      	beq.n	8002492 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800248a:	1dfb      	adds	r3, r7, #7
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	e001      	b.n	8002496 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002492:	f7ff feed 	bl	8002270 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002496:	1dfb      	adds	r3, r7, #7
 8002498:	781b      	ldrb	r3, [r3, #0]
}
 800249a:	0018      	movs	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	b002      	add	sp, #8
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	40022000 	.word	0x40022000

080024a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <HAL_InitTick+0x5c>)
 80024b2:	681c      	ldr	r4, [r3, #0]
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <HAL_InitTick+0x60>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	0019      	movs	r1, r3
 80024ba:	23fa      	movs	r3, #250	; 0xfa
 80024bc:	0098      	lsls	r0, r3, #2
 80024be:	f7fd fe23 	bl	8000108 <__udivsi3>
 80024c2:	0003      	movs	r3, r0
 80024c4:	0019      	movs	r1, r3
 80024c6:	0020      	movs	r0, r4
 80024c8:	f7fd fe1e 	bl	8000108 <__udivsi3>
 80024cc:	0003      	movs	r3, r0
 80024ce:	0018      	movs	r0, r3
 80024d0:	f000 f8e1 	bl	8002696 <HAL_SYSTICK_Config>
 80024d4:	1e03      	subs	r3, r0, #0
 80024d6:	d001      	beq.n	80024dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e00f      	b.n	80024fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d80b      	bhi.n	80024fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	2301      	movs	r3, #1
 80024e6:	425b      	negs	r3, r3
 80024e8:	2200      	movs	r2, #0
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 f8be 	bl	800266c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <HAL_InitTick+0x64>)
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e000      	b.n	80024fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	b003      	add	sp, #12
 8002502:	bd90      	pop	{r4, r7, pc}
 8002504:	20000048 	.word	0x20000048
 8002508:	20000050 	.word	0x20000050
 800250c:	2000004c 	.word	0x2000004c

08002510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_IncTick+0x1c>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	001a      	movs	r2, r3
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_IncTick+0x20>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	18d2      	adds	r2, r2, r3
 8002520:	4b03      	ldr	r3, [pc, #12]	; (8002530 <HAL_IncTick+0x20>)
 8002522:	601a      	str	r2, [r3, #0]
}
 8002524:	46c0      	nop			; (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	20000050 	.word	0x20000050
 8002530:	20000164 	.word	0x20000164

08002534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  return uwTick;
 8002538:	4b02      	ldr	r3, [pc, #8]	; (8002544 <HAL_GetTick+0x10>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	0018      	movs	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	20000164 	.word	0x20000164

08002548 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	0002      	movs	r2, r0
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	1dfb      	adds	r3, r7, #7
 8002554:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002556:	1dfb      	adds	r3, r7, #7
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b7f      	cmp	r3, #127	; 0x7f
 800255c:	d828      	bhi.n	80025b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800255e:	4a2f      	ldr	r2, [pc, #188]	; (800261c <__NVIC_SetPriority+0xd4>)
 8002560:	1dfb      	adds	r3, r7, #7
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	b25b      	sxtb	r3, r3
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	33c0      	adds	r3, #192	; 0xc0
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	589b      	ldr	r3, [r3, r2]
 800256e:	1dfa      	adds	r2, r7, #7
 8002570:	7812      	ldrb	r2, [r2, #0]
 8002572:	0011      	movs	r1, r2
 8002574:	2203      	movs	r2, #3
 8002576:	400a      	ands	r2, r1
 8002578:	00d2      	lsls	r2, r2, #3
 800257a:	21ff      	movs	r1, #255	; 0xff
 800257c:	4091      	lsls	r1, r2
 800257e:	000a      	movs	r2, r1
 8002580:	43d2      	mvns	r2, r2
 8002582:	401a      	ands	r2, r3
 8002584:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	019b      	lsls	r3, r3, #6
 800258a:	22ff      	movs	r2, #255	; 0xff
 800258c:	401a      	ands	r2, r3
 800258e:	1dfb      	adds	r3, r7, #7
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	0018      	movs	r0, r3
 8002594:	2303      	movs	r3, #3
 8002596:	4003      	ands	r3, r0
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800259c:	481f      	ldr	r0, [pc, #124]	; (800261c <__NVIC_SetPriority+0xd4>)
 800259e:	1dfb      	adds	r3, r7, #7
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b25b      	sxtb	r3, r3
 80025a4:	089b      	lsrs	r3, r3, #2
 80025a6:	430a      	orrs	r2, r1
 80025a8:	33c0      	adds	r3, #192	; 0xc0
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80025ae:	e031      	b.n	8002614 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025b0:	4a1b      	ldr	r2, [pc, #108]	; (8002620 <__NVIC_SetPriority+0xd8>)
 80025b2:	1dfb      	adds	r3, r7, #7
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	0019      	movs	r1, r3
 80025b8:	230f      	movs	r3, #15
 80025ba:	400b      	ands	r3, r1
 80025bc:	3b08      	subs	r3, #8
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3306      	adds	r3, #6
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	18d3      	adds	r3, r2, r3
 80025c6:	3304      	adds	r3, #4
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	1dfa      	adds	r2, r7, #7
 80025cc:	7812      	ldrb	r2, [r2, #0]
 80025ce:	0011      	movs	r1, r2
 80025d0:	2203      	movs	r2, #3
 80025d2:	400a      	ands	r2, r1
 80025d4:	00d2      	lsls	r2, r2, #3
 80025d6:	21ff      	movs	r1, #255	; 0xff
 80025d8:	4091      	lsls	r1, r2
 80025da:	000a      	movs	r2, r1
 80025dc:	43d2      	mvns	r2, r2
 80025de:	401a      	ands	r2, r3
 80025e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	019b      	lsls	r3, r3, #6
 80025e6:	22ff      	movs	r2, #255	; 0xff
 80025e8:	401a      	ands	r2, r3
 80025ea:	1dfb      	adds	r3, r7, #7
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	0018      	movs	r0, r3
 80025f0:	2303      	movs	r3, #3
 80025f2:	4003      	ands	r3, r0
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025f8:	4809      	ldr	r0, [pc, #36]	; (8002620 <__NVIC_SetPriority+0xd8>)
 80025fa:	1dfb      	adds	r3, r7, #7
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	001c      	movs	r4, r3
 8002600:	230f      	movs	r3, #15
 8002602:	4023      	ands	r3, r4
 8002604:	3b08      	subs	r3, #8
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	430a      	orrs	r2, r1
 800260a:	3306      	adds	r3, #6
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	18c3      	adds	r3, r0, r3
 8002610:	3304      	adds	r3, #4
 8002612:	601a      	str	r2, [r3, #0]
}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	b003      	add	sp, #12
 800261a:	bd90      	pop	{r4, r7, pc}
 800261c:	e000e100 	.word	0xe000e100
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	1e5a      	subs	r2, r3, #1
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	045b      	lsls	r3, r3, #17
 8002634:	429a      	cmp	r2, r3
 8002636:	d301      	bcc.n	800263c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002638:	2301      	movs	r3, #1
 800263a:	e010      	b.n	800265e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263c:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <SysTick_Config+0x44>)
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	3a01      	subs	r2, #1
 8002642:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002644:	2301      	movs	r3, #1
 8002646:	425b      	negs	r3, r3
 8002648:	2103      	movs	r1, #3
 800264a:	0018      	movs	r0, r3
 800264c:	f7ff ff7c 	bl	8002548 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <SysTick_Config+0x44>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002656:	4b04      	ldr	r3, [pc, #16]	; (8002668 <SysTick_Config+0x44>)
 8002658:	2207      	movs	r2, #7
 800265a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800265c:	2300      	movs	r3, #0
}
 800265e:	0018      	movs	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	b002      	add	sp, #8
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	e000e010 	.word	0xe000e010

0800266c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	210f      	movs	r1, #15
 8002678:	187b      	adds	r3, r7, r1
 800267a:	1c02      	adds	r2, r0, #0
 800267c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	187b      	adds	r3, r7, r1
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b25b      	sxtb	r3, r3
 8002686:	0011      	movs	r1, r2
 8002688:	0018      	movs	r0, r3
 800268a:	f7ff ff5d 	bl	8002548 <__NVIC_SetPriority>
}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	46bd      	mov	sp, r7
 8002692:	b004      	add	sp, #16
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f7ff ffbf 	bl	8002624 <SysTick_Config>
 80026a6:	0003      	movs	r3, r0
}
 80026a8:	0018      	movs	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b002      	add	sp, #8
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80026c6:	e149      	b.n	800295c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2101      	movs	r1, #1
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	4091      	lsls	r1, r2
 80026d2:	000a      	movs	r2, r1
 80026d4:	4013      	ands	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d100      	bne.n	80026e0 <HAL_GPIO_Init+0x30>
 80026de:	e13a      	b.n	8002956 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2203      	movs	r2, #3
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d005      	beq.n	80026f8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2203      	movs	r2, #3
 80026f2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d130      	bne.n	800275a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	409a      	lsls	r2, r3
 8002706:	0013      	movs	r3, r2
 8002708:	43da      	mvns	r2, r3
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	409a      	lsls	r2, r3
 800271a:	0013      	movs	r3, r2
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800272e:	2201      	movs	r2, #1
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	409a      	lsls	r2, r3
 8002734:	0013      	movs	r3, r2
 8002736:	43da      	mvns	r2, r3
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	2201      	movs	r2, #1
 8002746:	401a      	ands	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
 800274c:	0013      	movs	r3, r2
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2203      	movs	r2, #3
 8002760:	4013      	ands	r3, r2
 8002762:	2b03      	cmp	r3, #3
 8002764:	d017      	beq.n	8002796 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	2203      	movs	r2, #3
 8002772:	409a      	lsls	r2, r3
 8002774:	0013      	movs	r3, r2
 8002776:	43da      	mvns	r2, r3
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4013      	ands	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	409a      	lsls	r2, r3
 8002788:	0013      	movs	r3, r2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2203      	movs	r2, #3
 800279c:	4013      	ands	r3, r2
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d123      	bne.n	80027ea <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	08da      	lsrs	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3208      	adds	r2, #8
 80027aa:	0092      	lsls	r2, r2, #2
 80027ac:	58d3      	ldr	r3, [r2, r3]
 80027ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2207      	movs	r2, #7
 80027b4:	4013      	ands	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	409a      	lsls	r2, r3
 80027bc:	0013      	movs	r3, r2
 80027be:	43da      	mvns	r2, r3
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	2107      	movs	r1, #7
 80027ce:	400b      	ands	r3, r1
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	409a      	lsls	r2, r3
 80027d4:	0013      	movs	r3, r2
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	08da      	lsrs	r2, r3, #3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3208      	adds	r2, #8
 80027e4:	0092      	lsls	r2, r2, #2
 80027e6:	6939      	ldr	r1, [r7, #16]
 80027e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	2203      	movs	r2, #3
 80027f6:	409a      	lsls	r2, r3
 80027f8:	0013      	movs	r3, r2
 80027fa:	43da      	mvns	r2, r3
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4013      	ands	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2203      	movs	r2, #3
 8002808:	401a      	ands	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	409a      	lsls	r2, r3
 8002810:	0013      	movs	r3, r2
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	23c0      	movs	r3, #192	; 0xc0
 8002824:	029b      	lsls	r3, r3, #10
 8002826:	4013      	ands	r3, r2
 8002828:	d100      	bne.n	800282c <HAL_GPIO_Init+0x17c>
 800282a:	e094      	b.n	8002956 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282c:	4b51      	ldr	r3, [pc, #324]	; (8002974 <HAL_GPIO_Init+0x2c4>)
 800282e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002830:	4b50      	ldr	r3, [pc, #320]	; (8002974 <HAL_GPIO_Init+0x2c4>)
 8002832:	2101      	movs	r1, #1
 8002834:	430a      	orrs	r2, r1
 8002836:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002838:	4a4f      	ldr	r2, [pc, #316]	; (8002978 <HAL_GPIO_Init+0x2c8>)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	3302      	adds	r3, #2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	589b      	ldr	r3, [r3, r2]
 8002844:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2203      	movs	r2, #3
 800284a:	4013      	ands	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	220f      	movs	r2, #15
 8002850:	409a      	lsls	r2, r3
 8002852:	0013      	movs	r3, r2
 8002854:	43da      	mvns	r2, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	23a0      	movs	r3, #160	; 0xa0
 8002860:	05db      	lsls	r3, r3, #23
 8002862:	429a      	cmp	r2, r3
 8002864:	d013      	beq.n	800288e <HAL_GPIO_Init+0x1de>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a44      	ldr	r2, [pc, #272]	; (800297c <HAL_GPIO_Init+0x2cc>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00d      	beq.n	800288a <HAL_GPIO_Init+0x1da>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a43      	ldr	r2, [pc, #268]	; (8002980 <HAL_GPIO_Init+0x2d0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d007      	beq.n	8002886 <HAL_GPIO_Init+0x1d6>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a42      	ldr	r2, [pc, #264]	; (8002984 <HAL_GPIO_Init+0x2d4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d101      	bne.n	8002882 <HAL_GPIO_Init+0x1d2>
 800287e:	2305      	movs	r3, #5
 8002880:	e006      	b.n	8002890 <HAL_GPIO_Init+0x1e0>
 8002882:	2306      	movs	r3, #6
 8002884:	e004      	b.n	8002890 <HAL_GPIO_Init+0x1e0>
 8002886:	2302      	movs	r3, #2
 8002888:	e002      	b.n	8002890 <HAL_GPIO_Init+0x1e0>
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <HAL_GPIO_Init+0x1e0>
 800288e:	2300      	movs	r3, #0
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	2103      	movs	r1, #3
 8002894:	400a      	ands	r2, r1
 8002896:	0092      	lsls	r2, r2, #2
 8002898:	4093      	lsls	r3, r2
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028a0:	4935      	ldr	r1, [pc, #212]	; (8002978 <HAL_GPIO_Init+0x2c8>)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	089b      	lsrs	r3, r3, #2
 80028a6:	3302      	adds	r3, #2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028ae:	4b36      	ldr	r3, [pc, #216]	; (8002988 <HAL_GPIO_Init+0x2d8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	43da      	mvns	r2, r3
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	025b      	lsls	r3, r3, #9
 80028c6:	4013      	ands	r3, r2
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028d2:	4b2d      	ldr	r3, [pc, #180]	; (8002988 <HAL_GPIO_Init+0x2d8>)
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80028d8:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <HAL_GPIO_Init+0x2d8>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	43da      	mvns	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	029b      	lsls	r3, r3, #10
 80028f0:	4013      	ands	r3, r2
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028fc:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_GPIO_Init+0x2d8>)
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002902:	4b21      	ldr	r3, [pc, #132]	; (8002988 <HAL_GPIO_Init+0x2d8>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	43da      	mvns	r2, r3
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	2380      	movs	r3, #128	; 0x80
 8002918:	035b      	lsls	r3, r3, #13
 800291a:	4013      	ands	r3, r2
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002926:	4b18      	ldr	r3, [pc, #96]	; (8002988 <HAL_GPIO_Init+0x2d8>)
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800292c:	4b16      	ldr	r3, [pc, #88]	; (8002988 <HAL_GPIO_Init+0x2d8>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	43da      	mvns	r2, r3
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	039b      	lsls	r3, r3, #14
 8002944:	4013      	ands	r3, r2
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002950:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <HAL_GPIO_Init+0x2d8>)
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3301      	adds	r3, #1
 800295a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	40da      	lsrs	r2, r3
 8002964:	1e13      	subs	r3, r2, #0
 8002966:	d000      	beq.n	800296a <HAL_GPIO_Init+0x2ba>
 8002968:	e6ae      	b.n	80026c8 <HAL_GPIO_Init+0x18>
  }
}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b006      	add	sp, #24
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000
 8002978:	40010000 	.word	0x40010000
 800297c:	50000400 	.word	0x50000400
 8002980:	50000800 	.word	0x50000800
 8002984:	50001c00 	.word	0x50001c00
 8002988:	40010400 	.word	0x40010400

0800298c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	000a      	movs	r2, r1
 8002996:	1cbb      	adds	r3, r7, #2
 8002998:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	1cba      	adds	r2, r7, #2
 80029a0:	8812      	ldrh	r2, [r2, #0]
 80029a2:	4013      	ands	r3, r2
 80029a4:	d004      	beq.n	80029b0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80029a6:	230f      	movs	r3, #15
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	e003      	b.n	80029b8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029b0:	230f      	movs	r3, #15
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80029b8:	230f      	movs	r3, #15
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	781b      	ldrb	r3, [r3, #0]
}
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b004      	add	sp, #16
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	0008      	movs	r0, r1
 80029d0:	0011      	movs	r1, r2
 80029d2:	1cbb      	adds	r3, r7, #2
 80029d4:	1c02      	adds	r2, r0, #0
 80029d6:	801a      	strh	r2, [r3, #0]
 80029d8:	1c7b      	adds	r3, r7, #1
 80029da:	1c0a      	adds	r2, r1, #0
 80029dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029de:	1c7b      	adds	r3, r7, #1
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d004      	beq.n	80029f0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e6:	1cbb      	adds	r3, r7, #2
 80029e8:	881a      	ldrh	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80029ee:	e003      	b.n	80029f8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80029f0:	1cbb      	adds	r3, r7, #2
 80029f2:	881a      	ldrh	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b002      	add	sp, #8
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e082      	b.n	8002b18 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2241      	movs	r2, #65	; 0x41
 8002a16:	5c9b      	ldrb	r3, [r3, r2]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d107      	bne.n	8002a2e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2240      	movs	r2, #64	; 0x40
 8002a22:	2100      	movs	r1, #0
 8002a24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7ff fc35 	bl	8002298 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2241      	movs	r2, #65	; 0x41
 8002a32:	2124      	movs	r1, #36	; 0x24
 8002a34:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2101      	movs	r1, #1
 8002a42:	438a      	bics	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4934      	ldr	r1, [pc, #208]	; (8002b20 <HAL_I2C_Init+0x120>)
 8002a50:	400a      	ands	r2, r1
 8002a52:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4931      	ldr	r1, [pc, #196]	; (8002b24 <HAL_I2C_Init+0x124>)
 8002a60:	400a      	ands	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d108      	bne.n	8002a7e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	0209      	lsls	r1, r1, #8
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	e007      	b.n	8002a8e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2184      	movs	r1, #132	; 0x84
 8002a88:	0209      	lsls	r1, r1, #8
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d104      	bne.n	8002aa0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2280      	movs	r2, #128	; 0x80
 8002a9c:	0112      	lsls	r2, r2, #4
 8002a9e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	491f      	ldr	r1, [pc, #124]	; (8002b28 <HAL_I2C_Init+0x128>)
 8002aac:	430a      	orrs	r2, r1
 8002aae:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	491a      	ldr	r1, [pc, #104]	; (8002b24 <HAL_I2C_Init+0x124>)
 8002abc:	400a      	ands	r2, r1
 8002abe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69d9      	ldr	r1, [r3, #28]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1a      	ldr	r2, [r3, #32]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2101      	movs	r1, #1
 8002af6:	430a      	orrs	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2241      	movs	r2, #65	; 0x41
 8002b04:	2120      	movs	r1, #32
 8002b06:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2242      	movs	r2, #66	; 0x42
 8002b12:	2100      	movs	r1, #0
 8002b14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	0018      	movs	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	f0ffffff 	.word	0xf0ffffff
 8002b24:	ffff7fff 	.word	0xffff7fff
 8002b28:	02008000 	.word	0x02008000

08002b2c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002b2c:	b590      	push	{r4, r7, lr}
 8002b2e:	b089      	sub	sp, #36	; 0x24
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	0008      	movs	r0, r1
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	0019      	movs	r1, r3
 8002b3a:	230a      	movs	r3, #10
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	1c02      	adds	r2, r0, #0
 8002b40:	801a      	strh	r2, [r3, #0]
 8002b42:	2308      	movs	r3, #8
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	1c0a      	adds	r2, r1, #0
 8002b48:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2241      	movs	r2, #65	; 0x41
 8002b4e:	5c9b      	ldrb	r3, [r3, r2]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d000      	beq.n	8002b58 <HAL_I2C_Master_Transmit+0x2c>
 8002b56:	e0e7      	b.n	8002d28 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2240      	movs	r2, #64	; 0x40
 8002b5c:	5c9b      	ldrb	r3, [r3, r2]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_I2C_Master_Transmit+0x3a>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e0e1      	b.n	8002d2a <HAL_I2C_Master_Transmit+0x1fe>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2240      	movs	r2, #64	; 0x40
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b6e:	f7ff fce1 	bl	8002534 <HAL_GetTick>
 8002b72:	0003      	movs	r3, r0
 8002b74:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	0219      	lsls	r1, r3, #8
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2319      	movs	r3, #25
 8002b82:	2201      	movs	r2, #1
 8002b84:	f000 f8fc 	bl	8002d80 <I2C_WaitOnFlagUntilTimeout>
 8002b88:	1e03      	subs	r3, r0, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0cc      	b.n	8002d2a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2241      	movs	r2, #65	; 0x41
 8002b94:	2121      	movs	r1, #33	; 0x21
 8002b96:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2242      	movs	r2, #66	; 0x42
 8002b9c:	2110      	movs	r1, #16
 8002b9e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2208      	movs	r2, #8
 8002bb0:	18ba      	adds	r2, r7, r2
 8002bb2:	8812      	ldrh	r2, [r2, #0]
 8002bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2bff      	cmp	r3, #255	; 0xff
 8002bc4:	d911      	bls.n	8002bea <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	22ff      	movs	r2, #255	; 0xff
 8002bca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	045c      	lsls	r4, r3, #17
 8002bd6:	230a      	movs	r3, #10
 8002bd8:	18fb      	adds	r3, r7, r3
 8002bda:	8819      	ldrh	r1, [r3, #0]
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	4b55      	ldr	r3, [pc, #340]	; (8002d34 <HAL_I2C_Master_Transmit+0x208>)
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	0023      	movs	r3, r4
 8002be4:	f000 fa00 	bl	8002fe8 <I2C_TransferConfig>
 8002be8:	e075      	b.n	8002cd6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	049c      	lsls	r4, r3, #18
 8002bfe:	230a      	movs	r3, #10
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	8819      	ldrh	r1, [r3, #0]
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	4b4b      	ldr	r3, [pc, #300]	; (8002d34 <HAL_I2C_Master_Transmit+0x208>)
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	0023      	movs	r3, r4
 8002c0c:	f000 f9ec 	bl	8002fe8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002c10:	e061      	b.n	8002cd6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f000 f8f0 	bl	8002dfe <I2C_WaitOnTXISFlagUntilTimeout>
 8002c1e:	1e03      	subs	r3, r0, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e081      	b.n	8002d2a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	781a      	ldrb	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d03a      	beq.n	8002cd6 <HAL_I2C_Master_Transmit+0x1aa>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d136      	bne.n	8002cd6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	0013      	movs	r3, r2
 8002c72:	2200      	movs	r2, #0
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	f000 f883 	bl	8002d80 <I2C_WaitOnFlagUntilTimeout>
 8002c7a:	1e03      	subs	r3, r0, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e053      	b.n	8002d2a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2bff      	cmp	r3, #255	; 0xff
 8002c8a:	d911      	bls.n	8002cb0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	22ff      	movs	r2, #255	; 0xff
 8002c90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	045c      	lsls	r4, r3, #17
 8002c9c:	230a      	movs	r3, #10
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	8819      	ldrh	r1, [r3, #0]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	0023      	movs	r3, r4
 8002caa:	f000 f99d 	bl	8002fe8 <I2C_TransferConfig>
 8002cae:	e012      	b.n	8002cd6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	049c      	lsls	r4, r3, #18
 8002cc4:	230a      	movs	r3, #10
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	8819      	ldrh	r1, [r3, #0]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	0023      	movs	r3, r4
 8002cd2:	f000 f989 	bl	8002fe8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d198      	bne.n	8002c12 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 f8c8 	bl	8002e7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cec:	1e03      	subs	r3, r0, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e01a      	b.n	8002d2a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	490c      	ldr	r1, [pc, #48]	; (8002d38 <HAL_I2C_Master_Transmit+0x20c>)
 8002d08:	400a      	ands	r2, r1
 8002d0a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2241      	movs	r2, #65	; 0x41
 8002d10:	2120      	movs	r1, #32
 8002d12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2242      	movs	r2, #66	; 0x42
 8002d18:	2100      	movs	r1, #0
 8002d1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2240      	movs	r2, #64	; 0x40
 8002d20:	2100      	movs	r1, #0
 8002d22:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	e000      	b.n	8002d2a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002d28:	2302      	movs	r3, #2
  }
}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b007      	add	sp, #28
 8002d30:	bd90      	pop	{r4, r7, pc}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	80002000 	.word	0x80002000
 8002d38:	fe00e800 	.word	0xfe00e800

08002d3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d103      	bne.n	8002d5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2200      	movs	r2, #0
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	2201      	movs	r2, #1
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d007      	beq.n	8002d78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2101      	movs	r1, #1
 8002d74:	430a      	orrs	r2, r1
 8002d76:	619a      	str	r2, [r3, #24]
  }
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b002      	add	sp, #8
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	1dfb      	adds	r3, r7, #7
 8002d8e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d90:	e021      	b.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	d01e      	beq.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d98:	f7ff fbcc 	bl	8002534 <HAL_GetTick>
 8002d9c:	0002      	movs	r2, r0
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d302      	bcc.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d113      	bne.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	2220      	movs	r2, #32
 8002db4:	431a      	orrs	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2241      	movs	r2, #65	; 0x41
 8002dbe:	2120      	movs	r1, #32
 8002dc0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2242      	movs	r2, #66	; 0x42
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2240      	movs	r2, #64	; 0x40
 8002dce:	2100      	movs	r1, #0
 8002dd0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e00f      	b.n	8002df6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	4013      	ands	r3, r2
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	425a      	negs	r2, r3
 8002de6:	4153      	adcs	r3, r2
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	001a      	movs	r2, r3
 8002dec:	1dfb      	adds	r3, r7, #7
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d0ce      	beq.n	8002d92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b004      	add	sp, #16
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	60f8      	str	r0, [r7, #12]
 8002e06:	60b9      	str	r1, [r7, #8]
 8002e08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e0a:	e02b      	b.n	8002e64 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	68b9      	ldr	r1, [r7, #8]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	0018      	movs	r0, r3
 8002e14:	f000 f86e 	bl	8002ef4 <I2C_IsAcknowledgeFailed>
 8002e18:	1e03      	subs	r3, r0, #0
 8002e1a:	d001      	beq.n	8002e20 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e029      	b.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	3301      	adds	r3, #1
 8002e24:	d01e      	beq.n	8002e64 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e26:	f7ff fb85 	bl	8002534 <HAL_GetTick>
 8002e2a:	0002      	movs	r2, r0
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d113      	bne.n	8002e64 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e40:	2220      	movs	r2, #32
 8002e42:	431a      	orrs	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2241      	movs	r2, #65	; 0x41
 8002e4c:	2120      	movs	r1, #32
 8002e4e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2242      	movs	r2, #66	; 0x42
 8002e54:	2100      	movs	r1, #0
 8002e56:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2240      	movs	r2, #64	; 0x40
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e007      	b.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d1cc      	bne.n	8002e0c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b004      	add	sp, #16
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e88:	e028      	b.n	8002edc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	0018      	movs	r0, r3
 8002e92:	f000 f82f 	bl	8002ef4 <I2C_IsAcknowledgeFailed>
 8002e96:	1e03      	subs	r3, r0, #0
 8002e98:	d001      	beq.n	8002e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e026      	b.n	8002eec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9e:	f7ff fb49 	bl	8002534 <HAL_GetTick>
 8002ea2:	0002      	movs	r2, r0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d302      	bcc.n	8002eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d113      	bne.n	8002edc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb8:	2220      	movs	r2, #32
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2241      	movs	r2, #65	; 0x41
 8002ec4:	2120      	movs	r1, #32
 8002ec6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2242      	movs	r2, #66	; 0x42
 8002ecc:	2100      	movs	r1, #0
 8002ece:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2240      	movs	r2, #64	; 0x40
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e007      	b.n	8002eec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d1cf      	bne.n	8002e8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b004      	add	sp, #16
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2210      	movs	r2, #16
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b10      	cmp	r3, #16
 8002f0c:	d164      	bne.n	8002fd8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	049b      	lsls	r3, r3, #18
 8002f18:	401a      	ands	r2, r3
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	049b      	lsls	r3, r3, #18
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d02b      	beq.n	8002f7a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2180      	movs	r1, #128	; 0x80
 8002f2e:	01c9      	lsls	r1, r1, #7
 8002f30:	430a      	orrs	r2, r1
 8002f32:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f34:	e021      	b.n	8002f7a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	d01e      	beq.n	8002f7a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3c:	f7ff fafa 	bl	8002534 <HAL_GetTick>
 8002f40:	0002      	movs	r2, r0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d302      	bcc.n	8002f52 <I2C_IsAcknowledgeFailed+0x5e>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d113      	bne.n	8002f7a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	2220      	movs	r2, #32
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2241      	movs	r2, #65	; 0x41
 8002f62:	2120      	movs	r1, #32
 8002f64:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2242      	movs	r2, #66	; 0x42
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2240      	movs	r2, #64	; 0x40
 8002f72:	2100      	movs	r1, #0
 8002f74:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e02f      	b.n	8002fda <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	2220      	movs	r2, #32
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d1d6      	bne.n	8002f36 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2220      	movs	r2, #32
 8002f96:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7ff fece 	bl	8002d3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	490e      	ldr	r1, [pc, #56]	; (8002fe4 <I2C_IsAcknowledgeFailed+0xf0>)
 8002fac:	400a      	ands	r2, r1
 8002fae:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2241      	movs	r2, #65	; 0x41
 8002fc0:	2120      	movs	r1, #32
 8002fc2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2242      	movs	r2, #66	; 0x42
 8002fc8:	2100      	movs	r1, #0
 8002fca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2240      	movs	r2, #64	; 0x40
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b004      	add	sp, #16
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			; (mov r8, r8)
 8002fe4:	fe00e800 	.word	0xfe00e800

08002fe8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	0008      	movs	r0, r1
 8002ff2:	0011      	movs	r1, r2
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	240a      	movs	r4, #10
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	1c02      	adds	r2, r0, #0
 8002ffc:	801a      	strh	r2, [r3, #0]
 8002ffe:	2009      	movs	r0, #9
 8003000:	183b      	adds	r3, r7, r0
 8003002:	1c0a      	adds	r2, r1, #0
 8003004:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	6a3a      	ldr	r2, [r7, #32]
 800300e:	0d51      	lsrs	r1, r2, #21
 8003010:	2280      	movs	r2, #128	; 0x80
 8003012:	00d2      	lsls	r2, r2, #3
 8003014:	400a      	ands	r2, r1
 8003016:	490e      	ldr	r1, [pc, #56]	; (8003050 <I2C_TransferConfig+0x68>)
 8003018:	430a      	orrs	r2, r1
 800301a:	43d2      	mvns	r2, r2
 800301c:	401a      	ands	r2, r3
 800301e:	0011      	movs	r1, r2
 8003020:	193b      	adds	r3, r7, r4
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	059b      	lsls	r3, r3, #22
 8003026:	0d9a      	lsrs	r2, r3, #22
 8003028:	183b      	adds	r3, r7, r0
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	0418      	lsls	r0, r3, #16
 800302e:	23ff      	movs	r3, #255	; 0xff
 8003030:	041b      	lsls	r3, r3, #16
 8003032:	4003      	ands	r3, r0
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	431a      	orrs	r2, r3
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	431a      	orrs	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b005      	add	sp, #20
 800304c:	bd90      	pop	{r4, r7, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	03ff63ff 	.word	0x03ff63ff

08003054 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2241      	movs	r2, #65	; 0x41
 8003062:	5c9b      	ldrb	r3, [r3, r2]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b20      	cmp	r3, #32
 8003068:	d138      	bne.n	80030dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2240      	movs	r2, #64	; 0x40
 800306e:	5c9b      	ldrb	r3, [r3, r2]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003074:	2302      	movs	r3, #2
 8003076:	e032      	b.n	80030de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2240      	movs	r2, #64	; 0x40
 800307c:	2101      	movs	r1, #1
 800307e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2241      	movs	r2, #65	; 0x41
 8003084:	2124      	movs	r1, #36	; 0x24
 8003086:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2101      	movs	r1, #1
 8003094:	438a      	bics	r2, r1
 8003096:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4911      	ldr	r1, [pc, #68]	; (80030e8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80030a4:	400a      	ands	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2101      	movs	r1, #1
 80030c4:	430a      	orrs	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2241      	movs	r2, #65	; 0x41
 80030cc:	2120      	movs	r1, #32
 80030ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2240      	movs	r2, #64	; 0x40
 80030d4:	2100      	movs	r1, #0
 80030d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	e000      	b.n	80030de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030dc:	2302      	movs	r3, #2
  }
}
 80030de:	0018      	movs	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	b002      	add	sp, #8
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	ffffefff 	.word	0xffffefff

080030ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2241      	movs	r2, #65	; 0x41
 80030fa:	5c9b      	ldrb	r3, [r3, r2]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d139      	bne.n	8003176 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2240      	movs	r2, #64	; 0x40
 8003106:	5c9b      	ldrb	r3, [r3, r2]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800310c:	2302      	movs	r3, #2
 800310e:	e033      	b.n	8003178 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2240      	movs	r2, #64	; 0x40
 8003114:	2101      	movs	r1, #1
 8003116:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2241      	movs	r2, #65	; 0x41
 800311c:	2124      	movs	r1, #36	; 0x24
 800311e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2101      	movs	r1, #1
 800312c:	438a      	bics	r2, r1
 800312e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4a11      	ldr	r2, [pc, #68]	; (8003180 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800313c:	4013      	ands	r3, r2
 800313e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2101      	movs	r1, #1
 800315e:	430a      	orrs	r2, r1
 8003160:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2241      	movs	r2, #65	; 0x41
 8003166:	2120      	movs	r1, #32
 8003168:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2240      	movs	r2, #64	; 0x40
 800316e:	2100      	movs	r1, #0
 8003170:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	e000      	b.n	8003178 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003176:	2302      	movs	r3, #2
  }
}
 8003178:	0018      	movs	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	b004      	add	sp, #16
 800317e:	bd80      	pop	{r7, pc}
 8003180:	fffff0ff 	.word	0xfffff0ff

08003184 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <HAL_PWR_EnableBkUpAccess+0x18>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_PWR_EnableBkUpAccess+0x18>)
 800318e:	2180      	movs	r1, #128	; 0x80
 8003190:	0049      	lsls	r1, r1, #1
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]
}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40007000 	.word	0x40007000

080031a0 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2
  *           @arg PWR_WAKEUP_PIN3 for stm32l07xxx and stm32l08xxx devices only.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80031a8:	4b04      	ldr	r3, [pc, #16]	; (80031bc <HAL_PWR_EnableWakeUpPin+0x1c>)
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	4b03      	ldr	r3, [pc, #12]	; (80031bc <HAL_PWR_EnableWakeUpPin+0x1c>)
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	605a      	str	r2, [r3, #4]
}
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b002      	add	sp, #8
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40007000 	.word	0x40007000

080031c0 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80031c4:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 80031ca:	2102      	movs	r1, #2
 80031cc:	430a      	orrs	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80031d6:	2104      	movs	r1, #4
 80031d8:	430a      	orrs	r2, r1
 80031da:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80031dc:	bf30      	wfi
}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40007000 	.word	0x40007000
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ec:	b5b0      	push	{r4, r5, r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d102      	bne.n	8003200 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f000 fb6c 	bl	80038d8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003200:	4bc8      	ldr	r3, [pc, #800]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	220c      	movs	r2, #12
 8003206:	4013      	ands	r3, r2
 8003208:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800320a:	4bc6      	ldr	r3, [pc, #792]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	025b      	lsls	r3, r3, #9
 8003212:	4013      	ands	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2201      	movs	r2, #1
 800321c:	4013      	ands	r3, r2
 800321e:	d100      	bne.n	8003222 <HAL_RCC_OscConfig+0x36>
 8003220:	e07d      	b.n	800331e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d007      	beq.n	8003238 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2b0c      	cmp	r3, #12
 800322c:	d112      	bne.n	8003254 <HAL_RCC_OscConfig+0x68>
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	025b      	lsls	r3, r3, #9
 8003234:	429a      	cmp	r2, r3
 8003236:	d10d      	bne.n	8003254 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003238:	4bba      	ldr	r3, [pc, #744]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	2380      	movs	r3, #128	; 0x80
 800323e:	029b      	lsls	r3, r3, #10
 8003240:	4013      	ands	r3, r2
 8003242:	d100      	bne.n	8003246 <HAL_RCC_OscConfig+0x5a>
 8003244:	e06a      	b.n	800331c <HAL_RCC_OscConfig+0x130>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d166      	bne.n	800331c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	f000 fb42 	bl	80038d8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	025b      	lsls	r3, r3, #9
 800325c:	429a      	cmp	r2, r3
 800325e:	d107      	bne.n	8003270 <HAL_RCC_OscConfig+0x84>
 8003260:	4bb0      	ldr	r3, [pc, #704]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4baf      	ldr	r3, [pc, #700]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 8003266:	2180      	movs	r1, #128	; 0x80
 8003268:	0249      	lsls	r1, r1, #9
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	e027      	b.n	80032c0 <HAL_RCC_OscConfig+0xd4>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	23a0      	movs	r3, #160	; 0xa0
 8003276:	02db      	lsls	r3, r3, #11
 8003278:	429a      	cmp	r2, r3
 800327a:	d10e      	bne.n	800329a <HAL_RCC_OscConfig+0xae>
 800327c:	4ba9      	ldr	r3, [pc, #676]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4ba8      	ldr	r3, [pc, #672]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 8003282:	2180      	movs	r1, #128	; 0x80
 8003284:	02c9      	lsls	r1, r1, #11
 8003286:	430a      	orrs	r2, r1
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	4ba6      	ldr	r3, [pc, #664]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4ba5      	ldr	r3, [pc, #660]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 8003290:	2180      	movs	r1, #128	; 0x80
 8003292:	0249      	lsls	r1, r1, #9
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e012      	b.n	80032c0 <HAL_RCC_OscConfig+0xd4>
 800329a:	4ba2      	ldr	r3, [pc, #648]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	4ba1      	ldr	r3, [pc, #644]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 80032a0:	49a1      	ldr	r1, [pc, #644]	; (8003528 <HAL_RCC_OscConfig+0x33c>)
 80032a2:	400a      	ands	r2, r1
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	4b9f      	ldr	r3, [pc, #636]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	025b      	lsls	r3, r3, #9
 80032ae:	4013      	ands	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4b9b      	ldr	r3, [pc, #620]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b9a      	ldr	r3, [pc, #616]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 80032ba:	499c      	ldr	r1, [pc, #624]	; (800352c <HAL_RCC_OscConfig+0x340>)
 80032bc:	400a      	ands	r2, r1
 80032be:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d014      	beq.n	80032f2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c8:	f7ff f934 	bl	8002534 <HAL_GetTick>
 80032cc:	0003      	movs	r3, r0
 80032ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d2:	f7ff f92f 	bl	8002534 <HAL_GetTick>
 80032d6:	0002      	movs	r2, r0
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b64      	cmp	r3, #100	; 0x64
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e2f9      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032e4:	4b8f      	ldr	r3, [pc, #572]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	029b      	lsls	r3, r3, #10
 80032ec:	4013      	ands	r3, r2
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0xe6>
 80032f0:	e015      	b.n	800331e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f2:	f7ff f91f 	bl	8002534 <HAL_GetTick>
 80032f6:	0003      	movs	r3, r0
 80032f8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032fc:	f7ff f91a 	bl	8002534 <HAL_GetTick>
 8003300:	0002      	movs	r2, r0
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e2e4      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800330e:	4b85      	ldr	r3, [pc, #532]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	2380      	movs	r3, #128	; 0x80
 8003314:	029b      	lsls	r3, r3, #10
 8003316:	4013      	ands	r3, r2
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x110>
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800331c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2202      	movs	r2, #2
 8003324:	4013      	ands	r3, r2
 8003326:	d100      	bne.n	800332a <HAL_RCC_OscConfig+0x13e>
 8003328:	e099      	b.n	800345e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	2220      	movs	r2, #32
 8003334:	4013      	ands	r3, r2
 8003336:	d009      	beq.n	800334c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003338:	4b7a      	ldr	r3, [pc, #488]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b79      	ldr	r3, [pc, #484]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 800333e:	2120      	movs	r1, #32
 8003340:	430a      	orrs	r2, r1
 8003342:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	2220      	movs	r2, #32
 8003348:	4393      	bics	r3, r2
 800334a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	2b04      	cmp	r3, #4
 8003350:	d005      	beq.n	800335e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	2b0c      	cmp	r3, #12
 8003356:	d13e      	bne.n	80033d6 <HAL_RCC_OscConfig+0x1ea>
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d13b      	bne.n	80033d6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800335e:	4b71      	ldr	r3, [pc, #452]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2204      	movs	r2, #4
 8003364:	4013      	ands	r3, r2
 8003366:	d004      	beq.n	8003372 <HAL_RCC_OscConfig+0x186>
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e2b2      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003372:	4b6c      	ldr	r3, [pc, #432]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	4a6e      	ldr	r2, [pc, #440]	; (8003530 <HAL_RCC_OscConfig+0x344>)
 8003378:	4013      	ands	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	021a      	lsls	r2, r3, #8
 8003382:	4b68      	ldr	r3, [pc, #416]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003388:	4b66      	ldr	r3, [pc, #408]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2209      	movs	r2, #9
 800338e:	4393      	bics	r3, r2
 8003390:	0019      	movs	r1, r3
 8003392:	4b64      	ldr	r3, [pc, #400]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 8003394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003396:	430a      	orrs	r2, r1
 8003398:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800339a:	f000 fbeb 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 800339e:	0001      	movs	r1, r0
 80033a0:	4b60      	ldr	r3, [pc, #384]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	220f      	movs	r2, #15
 80033a8:	4013      	ands	r3, r2
 80033aa:	4a62      	ldr	r2, [pc, #392]	; (8003534 <HAL_RCC_OscConfig+0x348>)
 80033ac:	5cd3      	ldrb	r3, [r2, r3]
 80033ae:	000a      	movs	r2, r1
 80033b0:	40da      	lsrs	r2, r3
 80033b2:	4b61      	ldr	r3, [pc, #388]	; (8003538 <HAL_RCC_OscConfig+0x34c>)
 80033b4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80033b6:	4b61      	ldr	r3, [pc, #388]	; (800353c <HAL_RCC_OscConfig+0x350>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2513      	movs	r5, #19
 80033bc:	197c      	adds	r4, r7, r5
 80033be:	0018      	movs	r0, r3
 80033c0:	f7ff f872 	bl	80024a8 <HAL_InitTick>
 80033c4:	0003      	movs	r3, r0
 80033c6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80033c8:	197b      	adds	r3, r7, r5
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d046      	beq.n	800345e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80033d0:	197b      	adds	r3, r7, r5
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	e280      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d027      	beq.n	800342c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80033dc:	4b51      	ldr	r3, [pc, #324]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2209      	movs	r2, #9
 80033e2:	4393      	bics	r3, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	4b4f      	ldr	r3, [pc, #316]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 80033e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ee:	f7ff f8a1 	bl	8002534 <HAL_GetTick>
 80033f2:	0003      	movs	r3, r0
 80033f4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033f8:	f7ff f89c 	bl	8002534 <HAL_GetTick>
 80033fc:	0002      	movs	r2, r0
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e266      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800340a:	4b46      	ldr	r3, [pc, #280]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2204      	movs	r2, #4
 8003410:	4013      	ands	r3, r2
 8003412:	d0f1      	beq.n	80033f8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003414:	4b43      	ldr	r3, [pc, #268]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	4a45      	ldr	r2, [pc, #276]	; (8003530 <HAL_RCC_OscConfig+0x344>)
 800341a:	4013      	ands	r3, r2
 800341c:	0019      	movs	r1, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	021a      	lsls	r2, r3, #8
 8003424:	4b3f      	ldr	r3, [pc, #252]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	e018      	b.n	800345e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800342c:	4b3d      	ldr	r3, [pc, #244]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	4b3c      	ldr	r3, [pc, #240]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 8003432:	2101      	movs	r1, #1
 8003434:	438a      	bics	r2, r1
 8003436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7ff f87c 	bl	8002534 <HAL_GetTick>
 800343c:	0003      	movs	r3, r0
 800343e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003442:	f7ff f877 	bl	8002534 <HAL_GetTick>
 8003446:	0002      	movs	r2, r0
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e241      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003454:	4b33      	ldr	r3, [pc, #204]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2204      	movs	r2, #4
 800345a:	4013      	ands	r3, r2
 800345c:	d1f1      	bne.n	8003442 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2210      	movs	r2, #16
 8003464:	4013      	ands	r3, r2
 8003466:	d100      	bne.n	800346a <HAL_RCC_OscConfig+0x27e>
 8003468:	e0a1      	b.n	80035ae <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d140      	bne.n	80034f2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003470:	4b2c      	ldr	r3, [pc, #176]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4013      	ands	r3, r2
 800347a:	d005      	beq.n	8003488 <HAL_RCC_OscConfig+0x29c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e227      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003488:	4b26      	ldr	r3, [pc, #152]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4a2c      	ldr	r2, [pc, #176]	; (8003540 <HAL_RCC_OscConfig+0x354>)
 800348e:	4013      	ands	r3, r2
 8003490:	0019      	movs	r1, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1a      	ldr	r2, [r3, #32]
 8003496:	4b23      	ldr	r3, [pc, #140]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800349c:	4b21      	ldr	r3, [pc, #132]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	0a19      	lsrs	r1, r3, #8
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	061a      	lsls	r2, r3, #24
 80034aa:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 80034ac:	430a      	orrs	r2, r1
 80034ae:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	0b5b      	lsrs	r3, r3, #13
 80034b6:	3301      	adds	r3, #1
 80034b8:	2280      	movs	r2, #128	; 0x80
 80034ba:	0212      	lsls	r2, r2, #8
 80034bc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80034be:	4b19      	ldr	r3, [pc, #100]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	091b      	lsrs	r3, r3, #4
 80034c4:	210f      	movs	r1, #15
 80034c6:	400b      	ands	r3, r1
 80034c8:	491a      	ldr	r1, [pc, #104]	; (8003534 <HAL_RCC_OscConfig+0x348>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80034ce:	4b1a      	ldr	r3, [pc, #104]	; (8003538 <HAL_RCC_OscConfig+0x34c>)
 80034d0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80034d2:	4b1a      	ldr	r3, [pc, #104]	; (800353c <HAL_RCC_OscConfig+0x350>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2513      	movs	r5, #19
 80034d8:	197c      	adds	r4, r7, r5
 80034da:	0018      	movs	r0, r3
 80034dc:	f7fe ffe4 	bl	80024a8 <HAL_InitTick>
 80034e0:	0003      	movs	r3, r0
 80034e2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80034e4:	197b      	adds	r3, r7, r5
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d060      	beq.n	80035ae <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80034ec:	197b      	adds	r3, r7, r5
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	e1f2      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d03f      	beq.n	800357a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_RCC_OscConfig+0x338>)
 8003500:	2180      	movs	r1, #128	; 0x80
 8003502:	0049      	lsls	r1, r1, #1
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7ff f814 	bl	8002534 <HAL_GetTick>
 800350c:	0003      	movs	r3, r0
 800350e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003510:	e018      	b.n	8003544 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003512:	f7ff f80f 	bl	8002534 <HAL_GetTick>
 8003516:	0002      	movs	r2, r0
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b02      	cmp	r3, #2
 800351e:	d911      	bls.n	8003544 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e1d9      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
 8003524:	40021000 	.word	0x40021000
 8003528:	fffeffff 	.word	0xfffeffff
 800352c:	fffbffff 	.word	0xfffbffff
 8003530:	ffffe0ff 	.word	0xffffe0ff
 8003534:	08004fb4 	.word	0x08004fb4
 8003538:	20000048 	.word	0x20000048
 800353c:	2000004c 	.word	0x2000004c
 8003540:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003544:	4bc9      	ldr	r3, [pc, #804]	; (800386c <HAL_RCC_OscConfig+0x680>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4013      	ands	r3, r2
 800354e:	d0e0      	beq.n	8003512 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003550:	4bc6      	ldr	r3, [pc, #792]	; (800386c <HAL_RCC_OscConfig+0x680>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4ac6      	ldr	r2, [pc, #792]	; (8003870 <HAL_RCC_OscConfig+0x684>)
 8003556:	4013      	ands	r3, r2
 8003558:	0019      	movs	r1, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1a      	ldr	r2, [r3, #32]
 800355e:	4bc3      	ldr	r3, [pc, #780]	; (800386c <HAL_RCC_OscConfig+0x680>)
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003564:	4bc1      	ldr	r3, [pc, #772]	; (800386c <HAL_RCC_OscConfig+0x680>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	021b      	lsls	r3, r3, #8
 800356a:	0a19      	lsrs	r1, r3, #8
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	061a      	lsls	r2, r3, #24
 8003572:	4bbe      	ldr	r3, [pc, #760]	; (800386c <HAL_RCC_OscConfig+0x680>)
 8003574:	430a      	orrs	r2, r1
 8003576:	605a      	str	r2, [r3, #4]
 8003578:	e019      	b.n	80035ae <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800357a:	4bbc      	ldr	r3, [pc, #752]	; (800386c <HAL_RCC_OscConfig+0x680>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4bbb      	ldr	r3, [pc, #748]	; (800386c <HAL_RCC_OscConfig+0x680>)
 8003580:	49bc      	ldr	r1, [pc, #752]	; (8003874 <HAL_RCC_OscConfig+0x688>)
 8003582:	400a      	ands	r2, r1
 8003584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003586:	f7fe ffd5 	bl	8002534 <HAL_GetTick>
 800358a:	0003      	movs	r3, r0
 800358c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003590:	f7fe ffd0 	bl	8002534 <HAL_GetTick>
 8003594:	0002      	movs	r2, r0
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e19a      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80035a2:	4bb2      	ldr	r3, [pc, #712]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	2380      	movs	r3, #128	; 0x80
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4013      	ands	r3, r2
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2208      	movs	r2, #8
 80035b4:	4013      	ands	r3, r2
 80035b6:	d036      	beq.n	8003626 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d019      	beq.n	80035f4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c0:	4baa      	ldr	r3, [pc, #680]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80035c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035c4:	4ba9      	ldr	r3, [pc, #676]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80035c6:	2101      	movs	r1, #1
 80035c8:	430a      	orrs	r2, r1
 80035ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035cc:	f7fe ffb2 	bl	8002534 <HAL_GetTick>
 80035d0:	0003      	movs	r3, r0
 80035d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d6:	f7fe ffad 	bl	8002534 <HAL_GetTick>
 80035da:	0002      	movs	r2, r0
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e177      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035e8:	4ba0      	ldr	r3, [pc, #640]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80035ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ec:	2202      	movs	r2, #2
 80035ee:	4013      	ands	r3, r2
 80035f0:	d0f1      	beq.n	80035d6 <HAL_RCC_OscConfig+0x3ea>
 80035f2:	e018      	b.n	8003626 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f4:	4b9d      	ldr	r3, [pc, #628]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80035f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035f8:	4b9c      	ldr	r3, [pc, #624]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80035fa:	2101      	movs	r1, #1
 80035fc:	438a      	bics	r2, r1
 80035fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003600:	f7fe ff98 	bl	8002534 <HAL_GetTick>
 8003604:	0003      	movs	r3, r0
 8003606:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800360a:	f7fe ff93 	bl	8002534 <HAL_GetTick>
 800360e:	0002      	movs	r2, r0
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e15d      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800361c:	4b93      	ldr	r3, [pc, #588]	; (800386c <HAL_RCC_OscConfig+0x680>)
 800361e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003620:	2202      	movs	r2, #2
 8003622:	4013      	ands	r3, r2
 8003624:	d1f1      	bne.n	800360a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2204      	movs	r2, #4
 800362c:	4013      	ands	r3, r2
 800362e:	d100      	bne.n	8003632 <HAL_RCC_OscConfig+0x446>
 8003630:	e0ae      	b.n	8003790 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003632:	2023      	movs	r0, #35	; 0x23
 8003634:	183b      	adds	r3, r7, r0
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363a:	4b8c      	ldr	r3, [pc, #560]	; (800386c <HAL_RCC_OscConfig+0x680>)
 800363c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	055b      	lsls	r3, r3, #21
 8003642:	4013      	ands	r3, r2
 8003644:	d109      	bne.n	800365a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003646:	4b89      	ldr	r3, [pc, #548]	; (800386c <HAL_RCC_OscConfig+0x680>)
 8003648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800364a:	4b88      	ldr	r3, [pc, #544]	; (800386c <HAL_RCC_OscConfig+0x680>)
 800364c:	2180      	movs	r1, #128	; 0x80
 800364e:	0549      	lsls	r1, r1, #21
 8003650:	430a      	orrs	r2, r1
 8003652:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003654:	183b      	adds	r3, r7, r0
 8003656:	2201      	movs	r2, #1
 8003658:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365a:	4b87      	ldr	r3, [pc, #540]	; (8003878 <HAL_RCC_OscConfig+0x68c>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4013      	ands	r3, r2
 8003664:	d11a      	bne.n	800369c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003666:	4b84      	ldr	r3, [pc, #528]	; (8003878 <HAL_RCC_OscConfig+0x68c>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	4b83      	ldr	r3, [pc, #524]	; (8003878 <HAL_RCC_OscConfig+0x68c>)
 800366c:	2180      	movs	r1, #128	; 0x80
 800366e:	0049      	lsls	r1, r1, #1
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003674:	f7fe ff5e 	bl	8002534 <HAL_GetTick>
 8003678:	0003      	movs	r3, r0
 800367a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367c:	e008      	b.n	8003690 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367e:	f7fe ff59 	bl	8002534 <HAL_GetTick>
 8003682:	0002      	movs	r2, r0
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b64      	cmp	r3, #100	; 0x64
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e123      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003690:	4b79      	ldr	r3, [pc, #484]	; (8003878 <HAL_RCC_OscConfig+0x68c>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4013      	ands	r3, r2
 800369a:	d0f0      	beq.n	800367e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	2380      	movs	r3, #128	; 0x80
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d107      	bne.n	80036b8 <HAL_RCC_OscConfig+0x4cc>
 80036a8:	4b70      	ldr	r3, [pc, #448]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80036aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036ac:	4b6f      	ldr	r3, [pc, #444]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80036ae:	2180      	movs	r1, #128	; 0x80
 80036b0:	0049      	lsls	r1, r1, #1
 80036b2:	430a      	orrs	r2, r1
 80036b4:	651a      	str	r2, [r3, #80]	; 0x50
 80036b6:	e031      	b.n	800371c <HAL_RCC_OscConfig+0x530>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10c      	bne.n	80036da <HAL_RCC_OscConfig+0x4ee>
 80036c0:	4b6a      	ldr	r3, [pc, #424]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80036c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036c4:	4b69      	ldr	r3, [pc, #420]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80036c6:	496b      	ldr	r1, [pc, #428]	; (8003874 <HAL_RCC_OscConfig+0x688>)
 80036c8:	400a      	ands	r2, r1
 80036ca:	651a      	str	r2, [r3, #80]	; 0x50
 80036cc:	4b67      	ldr	r3, [pc, #412]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80036ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036d0:	4b66      	ldr	r3, [pc, #408]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80036d2:	496a      	ldr	r1, [pc, #424]	; (800387c <HAL_RCC_OscConfig+0x690>)
 80036d4:	400a      	ands	r2, r1
 80036d6:	651a      	str	r2, [r3, #80]	; 0x50
 80036d8:	e020      	b.n	800371c <HAL_RCC_OscConfig+0x530>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	23a0      	movs	r3, #160	; 0xa0
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d10e      	bne.n	8003704 <HAL_RCC_OscConfig+0x518>
 80036e6:	4b61      	ldr	r3, [pc, #388]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80036e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036ea:	4b60      	ldr	r3, [pc, #384]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80036ec:	2180      	movs	r1, #128	; 0x80
 80036ee:	00c9      	lsls	r1, r1, #3
 80036f0:	430a      	orrs	r2, r1
 80036f2:	651a      	str	r2, [r3, #80]	; 0x50
 80036f4:	4b5d      	ldr	r3, [pc, #372]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80036f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036f8:	4b5c      	ldr	r3, [pc, #368]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80036fa:	2180      	movs	r1, #128	; 0x80
 80036fc:	0049      	lsls	r1, r1, #1
 80036fe:	430a      	orrs	r2, r1
 8003700:	651a      	str	r2, [r3, #80]	; 0x50
 8003702:	e00b      	b.n	800371c <HAL_RCC_OscConfig+0x530>
 8003704:	4b59      	ldr	r3, [pc, #356]	; (800386c <HAL_RCC_OscConfig+0x680>)
 8003706:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003708:	4b58      	ldr	r3, [pc, #352]	; (800386c <HAL_RCC_OscConfig+0x680>)
 800370a:	495a      	ldr	r1, [pc, #360]	; (8003874 <HAL_RCC_OscConfig+0x688>)
 800370c:	400a      	ands	r2, r1
 800370e:	651a      	str	r2, [r3, #80]	; 0x50
 8003710:	4b56      	ldr	r3, [pc, #344]	; (800386c <HAL_RCC_OscConfig+0x680>)
 8003712:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003714:	4b55      	ldr	r3, [pc, #340]	; (800386c <HAL_RCC_OscConfig+0x680>)
 8003716:	4959      	ldr	r1, [pc, #356]	; (800387c <HAL_RCC_OscConfig+0x690>)
 8003718:	400a      	ands	r2, r1
 800371a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d015      	beq.n	8003750 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003724:	f7fe ff06 	bl	8002534 <HAL_GetTick>
 8003728:	0003      	movs	r3, r0
 800372a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800372c:	e009      	b.n	8003742 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800372e:	f7fe ff01 	bl	8002534 <HAL_GetTick>
 8003732:	0002      	movs	r2, r0
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	4a51      	ldr	r2, [pc, #324]	; (8003880 <HAL_RCC_OscConfig+0x694>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e0ca      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003742:	4b4a      	ldr	r3, [pc, #296]	; (800386c <HAL_RCC_OscConfig+0x680>)
 8003744:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4013      	ands	r3, r2
 800374c:	d0ef      	beq.n	800372e <HAL_RCC_OscConfig+0x542>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003750:	f7fe fef0 	bl	8002534 <HAL_GetTick>
 8003754:	0003      	movs	r3, r0
 8003756:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003758:	e009      	b.n	800376e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7fe feeb 	bl	8002534 <HAL_GetTick>
 800375e:	0002      	movs	r2, r0
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	4a46      	ldr	r2, [pc, #280]	; (8003880 <HAL_RCC_OscConfig+0x694>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e0b4      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800376e:	4b3f      	ldr	r3, [pc, #252]	; (800386c <HAL_RCC_OscConfig+0x680>)
 8003770:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4013      	ands	r3, r2
 8003778:	d1ef      	bne.n	800375a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800377a:	2323      	movs	r3, #35	; 0x23
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d105      	bne.n	8003790 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003784:	4b39      	ldr	r3, [pc, #228]	; (800386c <HAL_RCC_OscConfig+0x680>)
 8003786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003788:	4b38      	ldr	r3, [pc, #224]	; (800386c <HAL_RCC_OscConfig+0x680>)
 800378a:	493e      	ldr	r1, [pc, #248]	; (8003884 <HAL_RCC_OscConfig+0x698>)
 800378c:	400a      	ands	r2, r1
 800378e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d100      	bne.n	800379a <HAL_RCC_OscConfig+0x5ae>
 8003798:	e09d      	b.n	80038d6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	2b0c      	cmp	r3, #12
 800379e:	d100      	bne.n	80037a2 <HAL_RCC_OscConfig+0x5b6>
 80037a0:	e076      	b.n	8003890 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d145      	bne.n	8003836 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037aa:	4b30      	ldr	r3, [pc, #192]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	4b2f      	ldr	r3, [pc, #188]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80037b0:	4935      	ldr	r1, [pc, #212]	; (8003888 <HAL_RCC_OscConfig+0x69c>)
 80037b2:	400a      	ands	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fe febd 	bl	8002534 <HAL_GetTick>
 80037ba:	0003      	movs	r3, r0
 80037bc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fe feb8 	bl	8002534 <HAL_GetTick>
 80037c4:	0002      	movs	r2, r0
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e082      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80037d2:	4b26      	ldr	r3, [pc, #152]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	2380      	movs	r3, #128	; 0x80
 80037d8:	049b      	lsls	r3, r3, #18
 80037da:	4013      	ands	r3, r2
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037de:	4b23      	ldr	r3, [pc, #140]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	4a2a      	ldr	r2, [pc, #168]	; (800388c <HAL_RCC_OscConfig+0x6a0>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	0019      	movs	r1, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	431a      	orrs	r2, r3
 80037f8:	4b1c      	ldr	r3, [pc, #112]	; (800386c <HAL_RCC_OscConfig+0x680>)
 80037fa:	430a      	orrs	r2, r1
 80037fc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037fe:	4b1b      	ldr	r3, [pc, #108]	; (800386c <HAL_RCC_OscConfig+0x680>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4b1a      	ldr	r3, [pc, #104]	; (800386c <HAL_RCC_OscConfig+0x680>)
 8003804:	2180      	movs	r1, #128	; 0x80
 8003806:	0449      	lsls	r1, r1, #17
 8003808:	430a      	orrs	r2, r1
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fe fe92 	bl	8002534 <HAL_GetTick>
 8003810:	0003      	movs	r3, r0
 8003812:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003816:	f7fe fe8d 	bl	8002534 <HAL_GetTick>
 800381a:	0002      	movs	r2, r0
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e057      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003828:	4b10      	ldr	r3, [pc, #64]	; (800386c <HAL_RCC_OscConfig+0x680>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	049b      	lsls	r3, r3, #18
 8003830:	4013      	ands	r3, r2
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0x62a>
 8003834:	e04f      	b.n	80038d6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003836:	4b0d      	ldr	r3, [pc, #52]	; (800386c <HAL_RCC_OscConfig+0x680>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4b0c      	ldr	r3, [pc, #48]	; (800386c <HAL_RCC_OscConfig+0x680>)
 800383c:	4912      	ldr	r1, [pc, #72]	; (8003888 <HAL_RCC_OscConfig+0x69c>)
 800383e:	400a      	ands	r2, r1
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003842:	f7fe fe77 	bl	8002534 <HAL_GetTick>
 8003846:	0003      	movs	r3, r0
 8003848:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384c:	f7fe fe72 	bl	8002534 <HAL_GetTick>
 8003850:	0002      	movs	r2, r0
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e03c      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800385e:	4b03      	ldr	r3, [pc, #12]	; (800386c <HAL_RCC_OscConfig+0x680>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	049b      	lsls	r3, r3, #18
 8003866:	4013      	ands	r3, r2
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x660>
 800386a:	e034      	b.n	80038d6 <HAL_RCC_OscConfig+0x6ea>
 800386c:	40021000 	.word	0x40021000
 8003870:	ffff1fff 	.word	0xffff1fff
 8003874:	fffffeff 	.word	0xfffffeff
 8003878:	40007000 	.word	0x40007000
 800387c:	fffffbff 	.word	0xfffffbff
 8003880:	00001388 	.word	0x00001388
 8003884:	efffffff 	.word	0xefffffff
 8003888:	feffffff 	.word	0xfeffffff
 800388c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e01d      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800389c:	4b10      	ldr	r3, [pc, #64]	; (80038e0 <HAL_RCC_OscConfig+0x6f4>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	025b      	lsls	r3, r3, #9
 80038a8:	401a      	ands	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d10f      	bne.n	80038d2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	23f0      	movs	r3, #240	; 0xf0
 80038b6:	039b      	lsls	r3, r3, #14
 80038b8:	401a      	ands	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d107      	bne.n	80038d2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	23c0      	movs	r3, #192	; 0xc0
 80038c6:	041b      	lsls	r3, r3, #16
 80038c8:	401a      	ands	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d001      	beq.n	80038d6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	0018      	movs	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	b00a      	add	sp, #40	; 0x28
 80038de:	bdb0      	pop	{r4, r5, r7, pc}
 80038e0:	40021000 	.word	0x40021000

080038e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e4:	b5b0      	push	{r4, r5, r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e128      	b.n	8003b4a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b96      	ldr	r3, [pc, #600]	; (8003b54 <HAL_RCC_ClockConfig+0x270>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2201      	movs	r2, #1
 80038fe:	4013      	ands	r3, r2
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d91e      	bls.n	8003944 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b93      	ldr	r3, [pc, #588]	; (8003b54 <HAL_RCC_ClockConfig+0x270>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2201      	movs	r2, #1
 800390c:	4393      	bics	r3, r2
 800390e:	0019      	movs	r1, r3
 8003910:	4b90      	ldr	r3, [pc, #576]	; (8003b54 <HAL_RCC_ClockConfig+0x270>)
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003918:	f7fe fe0c 	bl	8002534 <HAL_GetTick>
 800391c:	0003      	movs	r3, r0
 800391e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003920:	e009      	b.n	8003936 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003922:	f7fe fe07 	bl	8002534 <HAL_GetTick>
 8003926:	0002      	movs	r2, r0
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	4a8a      	ldr	r2, [pc, #552]	; (8003b58 <HAL_RCC_ClockConfig+0x274>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e109      	b.n	8003b4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003936:	4b87      	ldr	r3, [pc, #540]	; (8003b54 <HAL_RCC_ClockConfig+0x270>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2201      	movs	r2, #1
 800393c:	4013      	ands	r3, r2
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d1ee      	bne.n	8003922 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2202      	movs	r2, #2
 800394a:	4013      	ands	r3, r2
 800394c:	d009      	beq.n	8003962 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800394e:	4b83      	ldr	r3, [pc, #524]	; (8003b5c <HAL_RCC_ClockConfig+0x278>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	22f0      	movs	r2, #240	; 0xf0
 8003954:	4393      	bics	r3, r2
 8003956:	0019      	movs	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	4b7f      	ldr	r3, [pc, #508]	; (8003b5c <HAL_RCC_ClockConfig+0x278>)
 800395e:	430a      	orrs	r2, r1
 8003960:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2201      	movs	r2, #1
 8003968:	4013      	ands	r3, r2
 800396a:	d100      	bne.n	800396e <HAL_RCC_ClockConfig+0x8a>
 800396c:	e089      	b.n	8003a82 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d107      	bne.n	8003986 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003976:	4b79      	ldr	r3, [pc, #484]	; (8003b5c <HAL_RCC_ClockConfig+0x278>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	029b      	lsls	r3, r3, #10
 800397e:	4013      	ands	r3, r2
 8003980:	d120      	bne.n	80039c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e0e1      	b.n	8003b4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b03      	cmp	r3, #3
 800398c:	d107      	bne.n	800399e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800398e:	4b73      	ldr	r3, [pc, #460]	; (8003b5c <HAL_RCC_ClockConfig+0x278>)
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	049b      	lsls	r3, r3, #18
 8003996:	4013      	ands	r3, r2
 8003998:	d114      	bne.n	80039c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e0d5      	b.n	8003b4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d106      	bne.n	80039b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039a6:	4b6d      	ldr	r3, [pc, #436]	; (8003b5c <HAL_RCC_ClockConfig+0x278>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2204      	movs	r2, #4
 80039ac:	4013      	ands	r3, r2
 80039ae:	d109      	bne.n	80039c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0ca      	b.n	8003b4a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80039b4:	4b69      	ldr	r3, [pc, #420]	; (8003b5c <HAL_RCC_ClockConfig+0x278>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4013      	ands	r3, r2
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0c2      	b.n	8003b4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c4:	4b65      	ldr	r3, [pc, #404]	; (8003b5c <HAL_RCC_ClockConfig+0x278>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	2203      	movs	r2, #3
 80039ca:	4393      	bics	r3, r2
 80039cc:	0019      	movs	r1, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	4b62      	ldr	r3, [pc, #392]	; (8003b5c <HAL_RCC_ClockConfig+0x278>)
 80039d4:	430a      	orrs	r2, r1
 80039d6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d8:	f7fe fdac 	bl	8002534 <HAL_GetTick>
 80039dc:	0003      	movs	r3, r0
 80039de:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d111      	bne.n	8003a0c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80039e8:	e009      	b.n	80039fe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ea:	f7fe fda3 	bl	8002534 <HAL_GetTick>
 80039ee:	0002      	movs	r2, r0
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	4a58      	ldr	r2, [pc, #352]	; (8003b58 <HAL_RCC_ClockConfig+0x274>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e0a5      	b.n	8003b4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80039fe:	4b57      	ldr	r3, [pc, #348]	; (8003b5c <HAL_RCC_ClockConfig+0x278>)
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	220c      	movs	r2, #12
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d1ef      	bne.n	80039ea <HAL_RCC_ClockConfig+0x106>
 8003a0a:	e03a      	b.n	8003a82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b03      	cmp	r3, #3
 8003a12:	d111      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a14:	e009      	b.n	8003a2a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a16:	f7fe fd8d 	bl	8002534 <HAL_GetTick>
 8003a1a:	0002      	movs	r2, r0
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	4a4d      	ldr	r2, [pc, #308]	; (8003b58 <HAL_RCC_ClockConfig+0x274>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e08f      	b.n	8003b4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a2a:	4b4c      	ldr	r3, [pc, #304]	; (8003b5c <HAL_RCC_ClockConfig+0x278>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	220c      	movs	r2, #12
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d1ef      	bne.n	8003a16 <HAL_RCC_ClockConfig+0x132>
 8003a36:	e024      	b.n	8003a82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d11b      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a40:	e009      	b.n	8003a56 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a42:	f7fe fd77 	bl	8002534 <HAL_GetTick>
 8003a46:	0002      	movs	r2, r0
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	4a42      	ldr	r2, [pc, #264]	; (8003b58 <HAL_RCC_ClockConfig+0x274>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e079      	b.n	8003b4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a56:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <HAL_RCC_ClockConfig+0x278>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	220c      	movs	r2, #12
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d1ef      	bne.n	8003a42 <HAL_RCC_ClockConfig+0x15e>
 8003a62:	e00e      	b.n	8003a82 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a64:	f7fe fd66 	bl	8002534 <HAL_GetTick>
 8003a68:	0002      	movs	r2, r0
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	4a3a      	ldr	r2, [pc, #232]	; (8003b58 <HAL_RCC_ClockConfig+0x274>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e068      	b.n	8003b4a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a78:	4b38      	ldr	r3, [pc, #224]	; (8003b5c <HAL_RCC_ClockConfig+0x278>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	220c      	movs	r2, #12
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a82:	4b34      	ldr	r3, [pc, #208]	; (8003b54 <HAL_RCC_ClockConfig+0x270>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2201      	movs	r2, #1
 8003a88:	4013      	ands	r3, r2
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d21e      	bcs.n	8003ace <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a90:	4b30      	ldr	r3, [pc, #192]	; (8003b54 <HAL_RCC_ClockConfig+0x270>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2201      	movs	r2, #1
 8003a96:	4393      	bics	r3, r2
 8003a98:	0019      	movs	r1, r3
 8003a9a:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <HAL_RCC_ClockConfig+0x270>)
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003aa2:	f7fe fd47 	bl	8002534 <HAL_GetTick>
 8003aa6:	0003      	movs	r3, r0
 8003aa8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	e009      	b.n	8003ac0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aac:	f7fe fd42 	bl	8002534 <HAL_GetTick>
 8003ab0:	0002      	movs	r2, r0
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	4a28      	ldr	r2, [pc, #160]	; (8003b58 <HAL_RCC_ClockConfig+0x274>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e044      	b.n	8003b4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ac0:	4b24      	ldr	r3, [pc, #144]	; (8003b54 <HAL_RCC_ClockConfig+0x270>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d1ee      	bne.n	8003aac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	d009      	beq.n	8003aec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ad8:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <HAL_RCC_ClockConfig+0x278>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	4a20      	ldr	r2, [pc, #128]	; (8003b60 <HAL_RCC_ClockConfig+0x27c>)
 8003ade:	4013      	ands	r3, r2
 8003ae0:	0019      	movs	r1, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <HAL_RCC_ClockConfig+0x278>)
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2208      	movs	r2, #8
 8003af2:	4013      	ands	r3, r2
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003af6:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <HAL_RCC_ClockConfig+0x278>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	4a1a      	ldr	r2, [pc, #104]	; (8003b64 <HAL_RCC_ClockConfig+0x280>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	0019      	movs	r1, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	00da      	lsls	r2, r3, #3
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <HAL_RCC_ClockConfig+0x278>)
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b0c:	f000 f832 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 8003b10:	0001      	movs	r1, r0
 8003b12:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <HAL_RCC_ClockConfig+0x278>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	220f      	movs	r2, #15
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <HAL_RCC_ClockConfig+0x284>)
 8003b1e:	5cd3      	ldrb	r3, [r2, r3]
 8003b20:	000a      	movs	r2, r1
 8003b22:	40da      	lsrs	r2, r3
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <HAL_RCC_ClockConfig+0x288>)
 8003b26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b28:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <HAL_RCC_ClockConfig+0x28c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	250b      	movs	r5, #11
 8003b2e:	197c      	adds	r4, r7, r5
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7fe fcb9 	bl	80024a8 <HAL_InitTick>
 8003b36:	0003      	movs	r3, r0
 8003b38:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003b3a:	197b      	adds	r3, r7, r5
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003b42:	197b      	adds	r3, r7, r5
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	e000      	b.n	8003b4a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b004      	add	sp, #16
 8003b50:	bdb0      	pop	{r4, r5, r7, pc}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	40022000 	.word	0x40022000
 8003b58:	00001388 	.word	0x00001388
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	fffff8ff 	.word	0xfffff8ff
 8003b64:	ffffc7ff 	.word	0xffffc7ff
 8003b68:	08004fb4 	.word	0x08004fb4
 8003b6c:	20000048 	.word	0x20000048
 8003b70:	2000004c 	.word	0x2000004c

08003b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b74:	b5b0      	push	{r4, r5, r7, lr}
 8003b76:	b08e      	sub	sp, #56	; 0x38
 8003b78:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003b7a:	4b4c      	ldr	r3, [pc, #304]	; (8003cac <HAL_RCC_GetSysClockFreq+0x138>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b82:	230c      	movs	r3, #12
 8003b84:	4013      	ands	r3, r2
 8003b86:	2b0c      	cmp	r3, #12
 8003b88:	d014      	beq.n	8003bb4 <HAL_RCC_GetSysClockFreq+0x40>
 8003b8a:	d900      	bls.n	8003b8e <HAL_RCC_GetSysClockFreq+0x1a>
 8003b8c:	e07b      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x112>
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d002      	beq.n	8003b98 <HAL_RCC_GetSysClockFreq+0x24>
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d00b      	beq.n	8003bae <HAL_RCC_GetSysClockFreq+0x3a>
 8003b96:	e076      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003b98:	4b44      	ldr	r3, [pc, #272]	; (8003cac <HAL_RCC_GetSysClockFreq+0x138>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d002      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003ba2:	4b43      	ldr	r3, [pc, #268]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003ba4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003ba6:	e07c      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003ba8:	4b42      	ldr	r3, [pc, #264]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x140>)
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003bac:	e079      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bae:	4b42      	ldr	r3, [pc, #264]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x144>)
 8003bb0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003bb2:	e076      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb6:	0c9a      	lsrs	r2, r3, #18
 8003bb8:	230f      	movs	r3, #15
 8003bba:	401a      	ands	r2, r3
 8003bbc:	4b3f      	ldr	r3, [pc, #252]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x148>)
 8003bbe:	5c9b      	ldrb	r3, [r3, r2]
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc4:	0d9a      	lsrs	r2, r3, #22
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	4013      	ands	r3, r2
 8003bca:	3301      	adds	r3, #1
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bce:	4b37      	ldr	r3, [pc, #220]	; (8003cac <HAL_RCC_GetSysClockFreq+0x138>)
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	025b      	lsls	r3, r3, #9
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d01a      	beq.n	8003c10 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	4a35      	ldr	r2, [pc, #212]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x144>)
 8003be4:	2300      	movs	r3, #0
 8003be6:	69b8      	ldr	r0, [r7, #24]
 8003be8:	69f9      	ldr	r1, [r7, #28]
 8003bea:	f7fc fc23 	bl	8000434 <__aeabi_lmul>
 8003bee:	0002      	movs	r2, r0
 8003bf0:	000b      	movs	r3, r1
 8003bf2:	0010      	movs	r0, r2
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f7fc fbf7 	bl	80003f4 <__aeabi_uldivmod>
 8003c06:	0002      	movs	r2, r0
 8003c08:	000b      	movs	r3, r1
 8003c0a:	0013      	movs	r3, r2
 8003c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c0e:	e037      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003c10:	4b26      	ldr	r3, [pc, #152]	; (8003cac <HAL_RCC_GetSysClockFreq+0x138>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2210      	movs	r2, #16
 8003c16:	4013      	ands	r3, r2
 8003c18:	d01a      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	4a23      	ldr	r2, [pc, #140]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003c24:	2300      	movs	r3, #0
 8003c26:	68b8      	ldr	r0, [r7, #8]
 8003c28:	68f9      	ldr	r1, [r7, #12]
 8003c2a:	f7fc fc03 	bl	8000434 <__aeabi_lmul>
 8003c2e:	0002      	movs	r2, r0
 8003c30:	000b      	movs	r3, r1
 8003c32:	0010      	movs	r0, r2
 8003c34:	0019      	movs	r1, r3
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f7fc fbd7 	bl	80003f4 <__aeabi_uldivmod>
 8003c46:	0002      	movs	r2, r0
 8003c48:	000b      	movs	r3, r1
 8003c4a:	0013      	movs	r3, r2
 8003c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c4e:	e017      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c52:	0018      	movs	r0, r3
 8003c54:	2300      	movs	r3, #0
 8003c56:	0019      	movs	r1, r3
 8003c58:	4a16      	ldr	r2, [pc, #88]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0x140>)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f7fc fbea 	bl	8000434 <__aeabi_lmul>
 8003c60:	0002      	movs	r2, r0
 8003c62:	000b      	movs	r3, r1
 8003c64:	0010      	movs	r0, r2
 8003c66:	0019      	movs	r1, r3
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	001c      	movs	r4, r3
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	001d      	movs	r5, r3
 8003c70:	0022      	movs	r2, r4
 8003c72:	002b      	movs	r3, r5
 8003c74:	f7fc fbbe 	bl	80003f4 <__aeabi_uldivmod>
 8003c78:	0002      	movs	r2, r0
 8003c7a:	000b      	movs	r3, r1
 8003c7c:	0013      	movs	r3, r2
 8003c7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003c84:	e00d      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003c86:	4b09      	ldr	r3, [pc, #36]	; (8003cac <HAL_RCC_GetSysClockFreq+0x138>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	0b5b      	lsrs	r3, r3, #13
 8003c8c:	2207      	movs	r2, #7
 8003c8e:	4013      	ands	r3, r2
 8003c90:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	3301      	adds	r3, #1
 8003c96:	2280      	movs	r2, #128	; 0x80
 8003c98:	0212      	lsls	r2, r2, #8
 8003c9a:	409a      	lsls	r2, r3
 8003c9c:	0013      	movs	r3, r2
 8003c9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ca0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b00e      	add	sp, #56	; 0x38
 8003caa:	bdb0      	pop	{r4, r5, r7, pc}
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	003d0900 	.word	0x003d0900
 8003cb4:	00f42400 	.word	0x00f42400
 8003cb8:	007a1200 	.word	0x007a1200
 8003cbc:	08004fcc 	.word	0x08004fcc

08003cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc4:	4b02      	ldr	r3, [pc, #8]	; (8003cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
}
 8003cc8:	0018      	movs	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	20000048 	.word	0x20000048

08003cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cd8:	f7ff fff2 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003cdc:	0001      	movs	r1, r0
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	2207      	movs	r2, #7
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cea:	5cd3      	ldrb	r3, [r2, r3]
 8003cec:	40d9      	lsrs	r1, r3
 8003cee:	000b      	movs	r3, r1
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	08004fc4 	.word	0x08004fc4

08003d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d04:	f7ff ffdc 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003d08:	0001      	movs	r1, r0
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	0adb      	lsrs	r3, r3, #11
 8003d10:	2207      	movs	r2, #7
 8003d12:	4013      	ands	r3, r2
 8003d14:	4a04      	ldr	r2, [pc, #16]	; (8003d28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d16:	5cd3      	ldrb	r3, [r2, r3]
 8003d18:	40d9      	lsrs	r1, r3
 8003d1a:	000b      	movs	r3, r1
}
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	40021000 	.word	0x40021000
 8003d28:	08004fc4 	.word	0x08004fc4

08003d2c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003d34:	2017      	movs	r0, #23
 8003d36:	183b      	adds	r3, r7, r0
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2220      	movs	r2, #32
 8003d42:	4013      	ands	r3, r2
 8003d44:	d100      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003d46:	e0c2      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d48:	4b81      	ldr	r3, [pc, #516]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d4c:	2380      	movs	r3, #128	; 0x80
 8003d4e:	055b      	lsls	r3, r3, #21
 8003d50:	4013      	ands	r3, r2
 8003d52:	d109      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d54:	4b7e      	ldr	r3, [pc, #504]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d58:	4b7d      	ldr	r3, [pc, #500]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003d5a:	2180      	movs	r1, #128	; 0x80
 8003d5c:	0549      	lsls	r1, r1, #21
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003d62:	183b      	adds	r3, r7, r0
 8003d64:	2201      	movs	r2, #1
 8003d66:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d68:	4b7a      	ldr	r3, [pc, #488]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	4013      	ands	r3, r2
 8003d72:	d11a      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d74:	4b77      	ldr	r3, [pc, #476]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4b76      	ldr	r3, [pc, #472]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003d7a:	2180      	movs	r1, #128	; 0x80
 8003d7c:	0049      	lsls	r1, r1, #1
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d82:	f7fe fbd7 	bl	8002534 <HAL_GetTick>
 8003d86:	0003      	movs	r3, r0
 8003d88:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d8a:	e008      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d8c:	f7fe fbd2 	bl	8002534 <HAL_GetTick>
 8003d90:	0002      	movs	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	; 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e0d4      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9e:	4b6d      	ldr	r3, [pc, #436]	; (8003f54 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	4013      	ands	r3, r2
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003daa:	4b69      	ldr	r3, [pc, #420]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	23c0      	movs	r3, #192	; 0xc0
 8003db0:	039b      	lsls	r3, r3, #14
 8003db2:	4013      	ands	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	23c0      	movs	r3, #192	; 0xc0
 8003dbc:	039b      	lsls	r3, r3, #14
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d013      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	23c0      	movs	r3, #192	; 0xc0
 8003dcc:	029b      	lsls	r3, r3, #10
 8003dce:	401a      	ands	r2, r3
 8003dd0:	23c0      	movs	r3, #192	; 0xc0
 8003dd2:	029b      	lsls	r3, r3, #10
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d10a      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003dd8:	4b5d      	ldr	r3, [pc, #372]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	029b      	lsls	r3, r3, #10
 8003de0:	401a      	ands	r2, r3
 8003de2:	2380      	movs	r3, #128	; 0x80
 8003de4:	029b      	lsls	r3, r3, #10
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d101      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e0ac      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003dee:	4b58      	ldr	r3, [pc, #352]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003df0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003df2:	23c0      	movs	r3, #192	; 0xc0
 8003df4:	029b      	lsls	r3, r3, #10
 8003df6:	4013      	ands	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d03b      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	23c0      	movs	r3, #192	; 0xc0
 8003e06:	029b      	lsls	r3, r3, #10
 8003e08:	4013      	ands	r3, r2
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d033      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2220      	movs	r2, #32
 8003e16:	4013      	ands	r3, r2
 8003e18:	d02e      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003e1a:	4b4d      	ldr	r3, [pc, #308]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e1e:	4a4e      	ldr	r2, [pc, #312]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e24:	4b4a      	ldr	r3, [pc, #296]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e28:	4b49      	ldr	r3, [pc, #292]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e2a:	2180      	movs	r1, #128	; 0x80
 8003e2c:	0309      	lsls	r1, r1, #12
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e32:	4b47      	ldr	r3, [pc, #284]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e36:	4b46      	ldr	r3, [pc, #280]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e38:	4948      	ldr	r1, [pc, #288]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003e3a:	400a      	ands	r2, r1
 8003e3c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003e3e:	4b44      	ldr	r3, [pc, #272]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	2380      	movs	r3, #128	; 0x80
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d014      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4e:	f7fe fb71 	bl	8002534 <HAL_GetTick>
 8003e52:	0003      	movs	r3, r0
 8003e54:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e56:	e009      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e58:	f7fe fb6c 	bl	8002534 <HAL_GetTick>
 8003e5c:	0002      	movs	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	4a3f      	ldr	r2, [pc, #252]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e06d      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e6c:	4b38      	ldr	r3, [pc, #224]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4013      	ands	r3, r2
 8003e76:	d0ef      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	23c0      	movs	r3, #192	; 0xc0
 8003e7e:	029b      	lsls	r3, r3, #10
 8003e80:	401a      	ands	r2, r3
 8003e82:	23c0      	movs	r3, #192	; 0xc0
 8003e84:	029b      	lsls	r3, r3, #10
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003e8a:	4b31      	ldr	r3, [pc, #196]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a35      	ldr	r2, [pc, #212]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	0019      	movs	r1, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	23c0      	movs	r3, #192	; 0xc0
 8003e9a:	039b      	lsls	r3, r3, #14
 8003e9c:	401a      	ands	r2, r3
 8003e9e:	4b2c      	ldr	r3, [pc, #176]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	4b2a      	ldr	r3, [pc, #168]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003ea6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	23c0      	movs	r3, #192	; 0xc0
 8003eae:	029b      	lsls	r3, r3, #10
 8003eb0:	401a      	ands	r2, r3
 8003eb2:	4b27      	ldr	r3, [pc, #156]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003eb8:	2317      	movs	r3, #23
 8003eba:	18fb      	adds	r3, r7, r3
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d105      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec2:	4b23      	ldr	r3, [pc, #140]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec6:	4b22      	ldr	r3, [pc, #136]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003ec8:	4927      	ldr	r1, [pc, #156]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003eca:	400a      	ands	r2, r1
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d009      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ed8:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003edc:	220c      	movs	r2, #12
 8003ede:	4393      	bics	r3, r2
 8003ee0:	0019      	movs	r1, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d009      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ef6:	4b16      	ldr	r3, [pc, #88]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efa:	4a1c      	ldr	r2, [pc, #112]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	0019      	movs	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003f06:	430a      	orrs	r2, r1
 8003f08:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2208      	movs	r2, #8
 8003f10:	4013      	ands	r3, r2
 8003f12:	d009      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f14:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f18:	4a15      	ldr	r2, [pc, #84]	; (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	0019      	movs	r1, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003f24:	430a      	orrs	r2, r1
 8003f26:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2280      	movs	r2, #128	; 0x80
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d009      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003f32:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f36:	4a0f      	ldr	r2, [pc, #60]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	0019      	movs	r1, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	4b03      	ldr	r3, [pc, #12]	; (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8003f42:	430a      	orrs	r2, r1
 8003f44:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	0018      	movs	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	b006      	add	sp, #24
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40021000 	.word	0x40021000
 8003f54:	40007000 	.word	0x40007000
 8003f58:	fffcffff 	.word	0xfffcffff
 8003f5c:	fff7ffff 	.word	0xfff7ffff
 8003f60:	00001388 	.word	0x00001388
 8003f64:	ffcfffff 	.word	0xffcfffff
 8003f68:	efffffff 	.word	0xefffffff
 8003f6c:	fffff3ff 	.word	0xfffff3ff
 8003f70:	ffffcfff 	.word	0xffffcfff
 8003f74:	fff3ffff 	.word	0xfff3ffff

08003f78 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e08e      	b.n	80040a8 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2221      	movs	r2, #33	; 0x21
 8003f8e:	5c9b      	ldrb	r3, [r3, r2]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d107      	bne.n	8003fa6 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f7fe f9bd 	bl	8002320 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2221      	movs	r2, #33	; 0x21
 8003faa:	2102      	movs	r1, #2
 8003fac:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	22ca      	movs	r2, #202	; 0xca
 8003fb4:	625a      	str	r2, [r3, #36]	; 0x24
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2253      	movs	r2, #83	; 0x53
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f000 faba 	bl	800453a <RTC_EnterInitMode>
 8003fc6:	1e03      	subs	r3, r0, #0
 8003fc8:	d009      	beq.n	8003fde <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	22ff      	movs	r2, #255	; 0xff
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2221      	movs	r2, #33	; 0x21
 8003fd6:	2104      	movs	r1, #4
 8003fd8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e064      	b.n	80040a8 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4931      	ldr	r1, [pc, #196]	; (80040b0 <HAL_RTC_Init+0x138>)
 8003fea:	400a      	ands	r2, r1
 8003fec:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6899      	ldr	r1, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	68d2      	ldr	r2, [r2, #12]
 8004014:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6919      	ldr	r1, [r3, #16]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	041a      	lsls	r2, r3, #16
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2180      	movs	r1, #128	; 0x80
 8004036:	438a      	bics	r2, r1
 8004038:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2103      	movs	r1, #3
 8004046:	438a      	bics	r2, r1
 8004048:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69da      	ldr	r2, [r3, #28]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2220      	movs	r2, #32
 800406a:	4013      	ands	r3, r2
 800406c:	d113      	bne.n	8004096 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	0018      	movs	r0, r3
 8004072:	f000 fa3b 	bl	80044ec <HAL_RTC_WaitForSynchro>
 8004076:	1e03      	subs	r3, r0, #0
 8004078:	d00d      	beq.n	8004096 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	22ff      	movs	r2, #255	; 0xff
 8004080:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2221      	movs	r2, #33	; 0x21
 8004086:	2104      	movs	r1, #4
 8004088:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	2100      	movs	r1, #0
 8004090:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e008      	b.n	80040a8 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	22ff      	movs	r2, #255	; 0xff
 800409c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2221      	movs	r2, #33	; 0x21
 80040a2:	2101      	movs	r1, #1
 80040a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040a6:	2300      	movs	r3, #0
  }
}
 80040a8:	0018      	movs	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b002      	add	sp, #8
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	ff8fffbf 	.word	0xff8fffbf

080040b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040b4:	b590      	push	{r4, r7, lr}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	5c9b      	ldrb	r3, [r3, r2]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_RTC_SetTime+0x1a>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e0ad      	b.n	800422a <HAL_RTC_SetTime+0x176>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2220      	movs	r2, #32
 80040d2:	2101      	movs	r1, #1
 80040d4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2221      	movs	r2, #33	; 0x21
 80040da:	2102      	movs	r1, #2
 80040dc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d125      	bne.n	8004130 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2240      	movs	r2, #64	; 0x40
 80040ec:	4013      	ands	r3, r2
 80040ee:	d102      	bne.n	80040f6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2200      	movs	r2, #0
 80040f4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	0018      	movs	r0, r3
 80040fc:	f000 fa47 	bl	800458e <RTC_ByteToBcd2>
 8004100:	0003      	movs	r3, r0
 8004102:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	785b      	ldrb	r3, [r3, #1]
 8004108:	0018      	movs	r0, r3
 800410a:	f000 fa40 	bl	800458e <RTC_ByteToBcd2>
 800410e:	0003      	movs	r3, r0
 8004110:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004112:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	789b      	ldrb	r3, [r3, #2]
 8004118:	0018      	movs	r0, r3
 800411a:	f000 fa38 	bl	800458e <RTC_ByteToBcd2>
 800411e:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004120:	0022      	movs	r2, r4
 8004122:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	78db      	ldrb	r3, [r3, #3]
 8004128:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	e017      	b.n	8004160 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2240      	movs	r2, #64	; 0x40
 8004138:	4013      	ands	r3, r2
 800413a:	d102      	bne.n	8004142 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2200      	movs	r2, #0
 8004140:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	785b      	ldrb	r3, [r3, #1]
 800414c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800414e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004154:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	78db      	ldrb	r3, [r3, #3]
 800415a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	22ca      	movs	r2, #202	; 0xca
 8004166:	625a      	str	r2, [r3, #36]	; 0x24
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2253      	movs	r2, #83	; 0x53
 800416e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	0018      	movs	r0, r3
 8004174:	f000 f9e1 	bl	800453a <RTC_EnterInitMode>
 8004178:	1e03      	subs	r3, r0, #0
 800417a:	d00d      	beq.n	8004198 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	22ff      	movs	r2, #255	; 0xff
 8004182:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2221      	movs	r2, #33	; 0x21
 8004188:	2104      	movs	r1, #4
 800418a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2220      	movs	r2, #32
 8004190:	2100      	movs	r1, #0
 8004192:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e048      	b.n	800422a <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	4925      	ldr	r1, [pc, #148]	; (8004234 <HAL_RTC_SetTime+0x180>)
 80041a0:	400a      	ands	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4922      	ldr	r1, [pc, #136]	; (8004238 <HAL_RTC_SetTime+0x184>)
 80041b0:	400a      	ands	r2, r1
 80041b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6899      	ldr	r1, [r3, #8]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2180      	movs	r1, #128	; 0x80
 80041d8:	438a      	bics	r2, r1
 80041da:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2220      	movs	r2, #32
 80041e4:	4013      	ands	r3, r2
 80041e6:	d113      	bne.n	8004210 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	0018      	movs	r0, r3
 80041ec:	f000 f97e 	bl	80044ec <HAL_RTC_WaitForSynchro>
 80041f0:	1e03      	subs	r3, r0, #0
 80041f2:	d00d      	beq.n	8004210 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	22ff      	movs	r2, #255	; 0xff
 80041fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2221      	movs	r2, #33	; 0x21
 8004200:	2104      	movs	r1, #4
 8004202:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	2100      	movs	r1, #0
 800420a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e00c      	b.n	800422a <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	22ff      	movs	r2, #255	; 0xff
 8004216:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2221      	movs	r2, #33	; 0x21
 800421c:	2101      	movs	r1, #1
 800421e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2220      	movs	r2, #32
 8004224:	2100      	movs	r1, #0
 8004226:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004228:	2300      	movs	r3, #0
  }
}
 800422a:	0018      	movs	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	b007      	add	sp, #28
 8004230:	bd90      	pop	{r4, r7, pc}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	007f7f7f 	.word	0x007f7f7f
 8004238:	fffbffff 	.word	0xfffbffff

0800423c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	045b      	lsls	r3, r3, #17
 800425a:	0c5a      	lsrs	r2, r3, #17
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a22      	ldr	r2, [pc, #136]	; (80042f0 <HAL_RTC_GetTime+0xb4>)
 8004268:	4013      	ands	r3, r2
 800426a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	0c1b      	lsrs	r3, r3, #16
 8004270:	b2db      	uxtb	r3, r3
 8004272:	223f      	movs	r2, #63	; 0x3f
 8004274:	4013      	ands	r3, r2
 8004276:	b2da      	uxtb	r2, r3
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	0a1b      	lsrs	r3, r3, #8
 8004280:	b2db      	uxtb	r3, r3
 8004282:	227f      	movs	r2, #127	; 0x7f
 8004284:	4013      	ands	r3, r2
 8004286:	b2da      	uxtb	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	227f      	movs	r2, #127	; 0x7f
 8004292:	4013      	ands	r3, r2
 8004294:	b2da      	uxtb	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	0c1b      	lsrs	r3, r3, #16
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2240      	movs	r2, #64	; 0x40
 80042a2:	4013      	ands	r3, r2
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d11a      	bne.n	80042e6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	0018      	movs	r0, r3
 80042b6:	f000 f992 	bl	80045de <RTC_Bcd2ToByte>
 80042ba:	0003      	movs	r3, r0
 80042bc:	001a      	movs	r2, r3
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	785b      	ldrb	r3, [r3, #1]
 80042c6:	0018      	movs	r0, r3
 80042c8:	f000 f989 	bl	80045de <RTC_Bcd2ToByte>
 80042cc:	0003      	movs	r3, r0
 80042ce:	001a      	movs	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	789b      	ldrb	r3, [r3, #2]
 80042d8:	0018      	movs	r0, r3
 80042da:	f000 f980 	bl	80045de <RTC_Bcd2ToByte>
 80042de:	0003      	movs	r3, r0
 80042e0:	001a      	movs	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	0018      	movs	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b006      	add	sp, #24
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	007f7f7f 	.word	0x007f7f7f

080042f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80042f4:	b590      	push	{r4, r7, lr}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	5c9b      	ldrb	r3, [r3, r2]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_RTC_SetDate+0x1a>
 800430a:	2302      	movs	r3, #2
 800430c:	e099      	b.n	8004442 <HAL_RTC_SetDate+0x14e>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2220      	movs	r2, #32
 8004312:	2101      	movs	r1, #1
 8004314:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2221      	movs	r2, #33	; 0x21
 800431a:	2102      	movs	r1, #2
 800431c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10e      	bne.n	8004342 <HAL_RTC_SetDate+0x4e>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	785b      	ldrb	r3, [r3, #1]
 8004328:	001a      	movs	r2, r3
 800432a:	2310      	movs	r3, #16
 800432c:	4013      	ands	r3, r2
 800432e:	d008      	beq.n	8004342 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	785b      	ldrb	r3, [r3, #1]
 8004334:	2210      	movs	r2, #16
 8004336:	4393      	bics	r3, r2
 8004338:	b2db      	uxtb	r3, r3
 800433a:	330a      	adds	r3, #10
 800433c:	b2da      	uxtb	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d11c      	bne.n	8004382 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	78db      	ldrb	r3, [r3, #3]
 800434c:	0018      	movs	r0, r3
 800434e:	f000 f91e 	bl	800458e <RTC_ByteToBcd2>
 8004352:	0003      	movs	r3, r0
 8004354:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	0018      	movs	r0, r3
 800435c:	f000 f917 	bl	800458e <RTC_ByteToBcd2>
 8004360:	0003      	movs	r3, r0
 8004362:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004364:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	789b      	ldrb	r3, [r3, #2]
 800436a:	0018      	movs	r0, r3
 800436c:	f000 f90f 	bl	800458e <RTC_ByteToBcd2>
 8004370:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004372:	0022      	movs	r2, r4
 8004374:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e00e      	b.n	80043a0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	78db      	ldrb	r3, [r3, #3]
 8004386:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	785b      	ldrb	r3, [r3, #1]
 800438c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800438e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004394:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800439c:	4313      	orrs	r3, r2
 800439e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	22ca      	movs	r2, #202	; 0xca
 80043a6:	625a      	str	r2, [r3, #36]	; 0x24
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2253      	movs	r2, #83	; 0x53
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	0018      	movs	r0, r3
 80043b4:	f000 f8c1 	bl	800453a <RTC_EnterInitMode>
 80043b8:	1e03      	subs	r3, r0, #0
 80043ba:	d00d      	beq.n	80043d8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	22ff      	movs	r2, #255	; 0xff
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2221      	movs	r2, #33	; 0x21
 80043c8:	2104      	movs	r1, #4
 80043ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	2100      	movs	r1, #0
 80043d2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e034      	b.n	8004442 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	491b      	ldr	r1, [pc, #108]	; (800444c <HAL_RTC_SetDate+0x158>)
 80043e0:	400a      	ands	r2, r1
 80043e2:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2180      	movs	r1, #128	; 0x80
 80043f0:	438a      	bics	r2, r1
 80043f2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2220      	movs	r2, #32
 80043fc:	4013      	ands	r3, r2
 80043fe:	d113      	bne.n	8004428 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	0018      	movs	r0, r3
 8004404:	f000 f872 	bl	80044ec <HAL_RTC_WaitForSynchro>
 8004408:	1e03      	subs	r3, r0, #0
 800440a:	d00d      	beq.n	8004428 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	22ff      	movs	r2, #255	; 0xff
 8004412:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2221      	movs	r2, #33	; 0x21
 8004418:	2104      	movs	r1, #4
 800441a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	2100      	movs	r1, #0
 8004422:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e00c      	b.n	8004442 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	22ff      	movs	r2, #255	; 0xff
 800442e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2221      	movs	r2, #33	; 0x21
 8004434:	2101      	movs	r1, #1
 8004436:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	2100      	movs	r1, #0
 800443e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004440:	2300      	movs	r3, #0
  }
}
 8004442:	0018      	movs	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	b007      	add	sp, #28
 8004448:	bd90      	pop	{r4, r7, pc}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	00ffff3f 	.word	0x00ffff3f

08004450 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	4a21      	ldr	r2, [pc, #132]	; (80044e8 <HAL_RTC_GetDate+0x98>)
 8004464:	4013      	ands	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	0c1b      	lsrs	r3, r3, #16
 800446c:	b2da      	uxtb	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	0a1b      	lsrs	r3, r3, #8
 8004476:	b2db      	uxtb	r3, r3
 8004478:	221f      	movs	r2, #31
 800447a:	4013      	ands	r3, r2
 800447c:	b2da      	uxtb	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	223f      	movs	r2, #63	; 0x3f
 8004488:	4013      	ands	r3, r2
 800448a:	b2da      	uxtb	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	0b5b      	lsrs	r3, r3, #13
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2207      	movs	r2, #7
 8004498:	4013      	ands	r3, r2
 800449a:	b2da      	uxtb	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d11a      	bne.n	80044dc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	78db      	ldrb	r3, [r3, #3]
 80044aa:	0018      	movs	r0, r3
 80044ac:	f000 f897 	bl	80045de <RTC_Bcd2ToByte>
 80044b0:	0003      	movs	r3, r0
 80044b2:	001a      	movs	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	785b      	ldrb	r3, [r3, #1]
 80044bc:	0018      	movs	r0, r3
 80044be:	f000 f88e 	bl	80045de <RTC_Bcd2ToByte>
 80044c2:	0003      	movs	r3, r0
 80044c4:	001a      	movs	r2, r3
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	789b      	ldrb	r3, [r3, #2]
 80044ce:	0018      	movs	r0, r3
 80044d0:	f000 f885 	bl	80045de <RTC_Bcd2ToByte>
 80044d4:	0003      	movs	r3, r0
 80044d6:	001a      	movs	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b006      	add	sp, #24
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			; (mov r8, r8)
 80044e8:	00ffff3f 	.word	0x00ffff3f

080044ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	21a0      	movs	r1, #160	; 0xa0
 8004500:	438a      	bics	r2, r1
 8004502:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004504:	f7fe f816 	bl	8002534 <HAL_GetTick>
 8004508:	0003      	movs	r3, r0
 800450a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800450c:	e00a      	b.n	8004524 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800450e:	f7fe f811 	bl	8002534 <HAL_GetTick>
 8004512:	0002      	movs	r2, r0
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	1ad2      	subs	r2, r2, r3
 8004518:	23fa      	movs	r3, #250	; 0xfa
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	429a      	cmp	r2, r3
 800451e:	d901      	bls.n	8004524 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e006      	b.n	8004532 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	4013      	ands	r3, r2
 800452e:	d0ee      	beq.n	800450e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	0018      	movs	r0, r3
 8004534:	46bd      	mov	sp, r7
 8004536:	b004      	add	sp, #16
 8004538:	bd80      	pop	{r7, pc}

0800453a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	2240      	movs	r2, #64	; 0x40
 800454a:	4013      	ands	r3, r2
 800454c:	d11a      	bne.n	8004584 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2201      	movs	r2, #1
 8004554:	4252      	negs	r2, r2
 8004556:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004558:	f7fd ffec 	bl	8002534 <HAL_GetTick>
 800455c:	0003      	movs	r3, r0
 800455e:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004560:	e00a      	b.n	8004578 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004562:	f7fd ffe7 	bl	8002534 <HAL_GetTick>
 8004566:	0002      	movs	r2, r0
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	1ad2      	subs	r2, r2, r3
 800456c:	23fa      	movs	r3, #250	; 0xfa
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	429a      	cmp	r2, r3
 8004572:	d901      	bls.n	8004578 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e006      	b.n	8004586 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	2240      	movs	r2, #64	; 0x40
 8004580:	4013      	ands	r3, r2
 8004582:	d0ee      	beq.n	8004562 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	0018      	movs	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	b004      	add	sp, #16
 800458c:	bd80      	pop	{r7, pc}

0800458e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	0002      	movs	r2, r0
 8004596:	1dfb      	adds	r3, r7, #7
 8004598:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800459e:	230b      	movs	r3, #11
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	1dfa      	adds	r2, r7, #7
 80045a4:	7812      	ldrb	r2, [r2, #0]
 80045a6:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80045a8:	e008      	b.n	80045bc <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3301      	adds	r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80045b0:	220b      	movs	r2, #11
 80045b2:	18bb      	adds	r3, r7, r2
 80045b4:	18ba      	adds	r2, r7, r2
 80045b6:	7812      	ldrb	r2, [r2, #0]
 80045b8:	3a0a      	subs	r2, #10
 80045ba:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80045bc:	210b      	movs	r1, #11
 80045be:	187b      	adds	r3, r7, r1
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b09      	cmp	r3, #9
 80045c4:	d8f1      	bhi.n	80045aa <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	b2da      	uxtb	r2, r3
 80045ce:	187b      	adds	r3, r7, r1
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	b2db      	uxtb	r3, r3
}
 80045d6:	0018      	movs	r0, r3
 80045d8:	46bd      	mov	sp, r7
 80045da:	b004      	add	sp, #16
 80045dc:	bd80      	pop	{r7, pc}

080045de <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b084      	sub	sp, #16
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	0002      	movs	r2, r0
 80045e6:	1dfb      	adds	r3, r7, #7
 80045e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80045ea:	1dfb      	adds	r3, r7, #7
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	001a      	movs	r2, r3
 80045f4:	0013      	movs	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	189b      	adds	r3, r3, r2
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	b2da      	uxtb	r2, r3
 8004602:	1dfb      	adds	r3, r7, #7
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	210f      	movs	r1, #15
 8004608:	400b      	ands	r3, r1
 800460a:	b2db      	uxtb	r3, r3
 800460c:	18d3      	adds	r3, r2, r3
 800460e:	b2db      	uxtb	r3, r3
}
 8004610:	0018      	movs	r0, r3
 8004612:	46bd      	mov	sp, r7
 8004614:	b004      	add	sp, #16
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e044      	b.n	80046b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800462e:	2b00      	cmp	r3, #0
 8004630:	d107      	bne.n	8004642 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2274      	movs	r2, #116	; 0x74
 8004636:	2100      	movs	r1, #0
 8004638:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	0018      	movs	r0, r3
 800463e:	f7fd fe87 	bl	8002350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2224      	movs	r2, #36	; 0x24
 8004646:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2101      	movs	r1, #1
 8004654:	438a      	bics	r2, r1
 8004656:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	0018      	movs	r0, r3
 800465c:	f000 f830 	bl	80046c0 <UART_SetConfig>
 8004660:	0003      	movs	r3, r0
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e024      	b.n	80046b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	0018      	movs	r0, r3
 8004676:	f000 fa85 	bl	8004b84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	490d      	ldr	r1, [pc, #52]	; (80046bc <HAL_UART_Init+0xa4>)
 8004686:	400a      	ands	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	212a      	movs	r1, #42	; 0x2a
 8004696:	438a      	bics	r2, r1
 8004698:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2101      	movs	r1, #1
 80046a6:	430a      	orrs	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	0018      	movs	r0, r3
 80046ae:	f000 fb1d 	bl	8004cec <UART_CheckIdleState>
 80046b2:	0003      	movs	r3, r0
}
 80046b4:	0018      	movs	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	b002      	add	sp, #8
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	ffffb7ff 	.word	0xffffb7ff

080046c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c0:	b5b0      	push	{r4, r5, r7, lr}
 80046c2:	b08e      	sub	sp, #56	; 0x38
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046c8:	231a      	movs	r3, #26
 80046ca:	2218      	movs	r2, #24
 80046cc:	4694      	mov	ip, r2
 80046ce:	44bc      	add	ip, r7
 80046d0:	4463      	add	r3, ip
 80046d2:	2200      	movs	r2, #0
 80046d4:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	431a      	orrs	r2, r3
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	431a      	orrs	r2, r3
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4abc      	ldr	r2, [pc, #752]	; (80049e8 <UART_SetConfig+0x328>)
 80046f6:	4013      	ands	r3, r2
 80046f8:	0019      	movs	r1, r3
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004700:	430a      	orrs	r2, r1
 8004702:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4ab8      	ldr	r2, [pc, #736]	; (80049ec <UART_SetConfig+0x32c>)
 800470c:	4013      	ands	r3, r2
 800470e:	0019      	movs	r1, r3
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4ab2      	ldr	r2, [pc, #712]	; (80049f0 <UART_SetConfig+0x330>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d004      	beq.n	8004736 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004732:	4313      	orrs	r3, r2
 8004734:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	4aad      	ldr	r2, [pc, #692]	; (80049f4 <UART_SetConfig+0x334>)
 800473e:	4013      	ands	r3, r2
 8004740:	0019      	movs	r1, r3
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004748:	430a      	orrs	r2, r1
 800474a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4aa9      	ldr	r2, [pc, #676]	; (80049f8 <UART_SetConfig+0x338>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d136      	bne.n	80047c4 <UART_SetConfig+0x104>
 8004756:	4ba9      	ldr	r3, [pc, #676]	; (80049fc <UART_SetConfig+0x33c>)
 8004758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475a:	220c      	movs	r2, #12
 800475c:	4013      	ands	r3, r2
 800475e:	2b0c      	cmp	r3, #12
 8004760:	d020      	beq.n	80047a4 <UART_SetConfig+0xe4>
 8004762:	d827      	bhi.n	80047b4 <UART_SetConfig+0xf4>
 8004764:	2b08      	cmp	r3, #8
 8004766:	d00d      	beq.n	8004784 <UART_SetConfig+0xc4>
 8004768:	d824      	bhi.n	80047b4 <UART_SetConfig+0xf4>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <UART_SetConfig+0xb4>
 800476e:	2b04      	cmp	r3, #4
 8004770:	d010      	beq.n	8004794 <UART_SetConfig+0xd4>
 8004772:	e01f      	b.n	80047b4 <UART_SetConfig+0xf4>
 8004774:	231b      	movs	r3, #27
 8004776:	2218      	movs	r2, #24
 8004778:	4694      	mov	ip, r2
 800477a:	44bc      	add	ip, r7
 800477c:	4463      	add	r3, ip
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	e06f      	b.n	8004864 <UART_SetConfig+0x1a4>
 8004784:	231b      	movs	r3, #27
 8004786:	2218      	movs	r2, #24
 8004788:	4694      	mov	ip, r2
 800478a:	44bc      	add	ip, r7
 800478c:	4463      	add	r3, ip
 800478e:	2202      	movs	r2, #2
 8004790:	701a      	strb	r2, [r3, #0]
 8004792:	e067      	b.n	8004864 <UART_SetConfig+0x1a4>
 8004794:	231b      	movs	r3, #27
 8004796:	2218      	movs	r2, #24
 8004798:	4694      	mov	ip, r2
 800479a:	44bc      	add	ip, r7
 800479c:	4463      	add	r3, ip
 800479e:	2204      	movs	r2, #4
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	e05f      	b.n	8004864 <UART_SetConfig+0x1a4>
 80047a4:	231b      	movs	r3, #27
 80047a6:	2218      	movs	r2, #24
 80047a8:	4694      	mov	ip, r2
 80047aa:	44bc      	add	ip, r7
 80047ac:	4463      	add	r3, ip
 80047ae:	2208      	movs	r2, #8
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	e057      	b.n	8004864 <UART_SetConfig+0x1a4>
 80047b4:	231b      	movs	r3, #27
 80047b6:	2218      	movs	r2, #24
 80047b8:	4694      	mov	ip, r2
 80047ba:	44bc      	add	ip, r7
 80047bc:	4463      	add	r3, ip
 80047be:	2210      	movs	r2, #16
 80047c0:	701a      	strb	r2, [r3, #0]
 80047c2:	e04f      	b.n	8004864 <UART_SetConfig+0x1a4>
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a89      	ldr	r2, [pc, #548]	; (80049f0 <UART_SetConfig+0x330>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d143      	bne.n	8004856 <UART_SetConfig+0x196>
 80047ce:	4b8b      	ldr	r3, [pc, #556]	; (80049fc <UART_SetConfig+0x33c>)
 80047d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047d2:	23c0      	movs	r3, #192	; 0xc0
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	4013      	ands	r3, r2
 80047d8:	22c0      	movs	r2, #192	; 0xc0
 80047da:	0112      	lsls	r2, r2, #4
 80047dc:	4293      	cmp	r3, r2
 80047de:	d02a      	beq.n	8004836 <UART_SetConfig+0x176>
 80047e0:	22c0      	movs	r2, #192	; 0xc0
 80047e2:	0112      	lsls	r2, r2, #4
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d82e      	bhi.n	8004846 <UART_SetConfig+0x186>
 80047e8:	2280      	movs	r2, #128	; 0x80
 80047ea:	0112      	lsls	r2, r2, #4
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d012      	beq.n	8004816 <UART_SetConfig+0x156>
 80047f0:	2280      	movs	r2, #128	; 0x80
 80047f2:	0112      	lsls	r2, r2, #4
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d826      	bhi.n	8004846 <UART_SetConfig+0x186>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d004      	beq.n	8004806 <UART_SetConfig+0x146>
 80047fc:	2280      	movs	r2, #128	; 0x80
 80047fe:	00d2      	lsls	r2, r2, #3
 8004800:	4293      	cmp	r3, r2
 8004802:	d010      	beq.n	8004826 <UART_SetConfig+0x166>
 8004804:	e01f      	b.n	8004846 <UART_SetConfig+0x186>
 8004806:	231b      	movs	r3, #27
 8004808:	2218      	movs	r2, #24
 800480a:	4694      	mov	ip, r2
 800480c:	44bc      	add	ip, r7
 800480e:	4463      	add	r3, ip
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	e026      	b.n	8004864 <UART_SetConfig+0x1a4>
 8004816:	231b      	movs	r3, #27
 8004818:	2218      	movs	r2, #24
 800481a:	4694      	mov	ip, r2
 800481c:	44bc      	add	ip, r7
 800481e:	4463      	add	r3, ip
 8004820:	2202      	movs	r2, #2
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	e01e      	b.n	8004864 <UART_SetConfig+0x1a4>
 8004826:	231b      	movs	r3, #27
 8004828:	2218      	movs	r2, #24
 800482a:	4694      	mov	ip, r2
 800482c:	44bc      	add	ip, r7
 800482e:	4463      	add	r3, ip
 8004830:	2204      	movs	r2, #4
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	e016      	b.n	8004864 <UART_SetConfig+0x1a4>
 8004836:	231b      	movs	r3, #27
 8004838:	2218      	movs	r2, #24
 800483a:	4694      	mov	ip, r2
 800483c:	44bc      	add	ip, r7
 800483e:	4463      	add	r3, ip
 8004840:	2208      	movs	r2, #8
 8004842:	701a      	strb	r2, [r3, #0]
 8004844:	e00e      	b.n	8004864 <UART_SetConfig+0x1a4>
 8004846:	231b      	movs	r3, #27
 8004848:	2218      	movs	r2, #24
 800484a:	4694      	mov	ip, r2
 800484c:	44bc      	add	ip, r7
 800484e:	4463      	add	r3, ip
 8004850:	2210      	movs	r2, #16
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	e006      	b.n	8004864 <UART_SetConfig+0x1a4>
 8004856:	231b      	movs	r3, #27
 8004858:	2218      	movs	r2, #24
 800485a:	4694      	mov	ip, r2
 800485c:	44bc      	add	ip, r7
 800485e:	4463      	add	r3, ip
 8004860:	2210      	movs	r2, #16
 8004862:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a61      	ldr	r2, [pc, #388]	; (80049f0 <UART_SetConfig+0x330>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d000      	beq.n	8004870 <UART_SetConfig+0x1b0>
 800486e:	e088      	b.n	8004982 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004870:	231b      	movs	r3, #27
 8004872:	2218      	movs	r2, #24
 8004874:	4694      	mov	ip, r2
 8004876:	44bc      	add	ip, r7
 8004878:	4463      	add	r3, ip
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b08      	cmp	r3, #8
 800487e:	d01d      	beq.n	80048bc <UART_SetConfig+0x1fc>
 8004880:	dc20      	bgt.n	80048c4 <UART_SetConfig+0x204>
 8004882:	2b04      	cmp	r3, #4
 8004884:	d015      	beq.n	80048b2 <UART_SetConfig+0x1f2>
 8004886:	dc1d      	bgt.n	80048c4 <UART_SetConfig+0x204>
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <UART_SetConfig+0x1d2>
 800488c:	2b02      	cmp	r3, #2
 800488e:	d005      	beq.n	800489c <UART_SetConfig+0x1dc>
 8004890:	e018      	b.n	80048c4 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004892:	f7ff fa1f 	bl	8003cd4 <HAL_RCC_GetPCLK1Freq>
 8004896:	0003      	movs	r3, r0
 8004898:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800489a:	e01d      	b.n	80048d8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800489c:	4b57      	ldr	r3, [pc, #348]	; (80049fc <UART_SetConfig+0x33c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2210      	movs	r2, #16
 80048a2:	4013      	ands	r3, r2
 80048a4:	d002      	beq.n	80048ac <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80048a6:	4b56      	ldr	r3, [pc, #344]	; (8004a00 <UART_SetConfig+0x340>)
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048aa:	e015      	b.n	80048d8 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 80048ac:	4b55      	ldr	r3, [pc, #340]	; (8004a04 <UART_SetConfig+0x344>)
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048b0:	e012      	b.n	80048d8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b2:	f7ff f95f 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 80048b6:	0003      	movs	r3, r0
 80048b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048ba:	e00d      	b.n	80048d8 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048bc:	2380      	movs	r3, #128	; 0x80
 80048be:	021b      	lsls	r3, r3, #8
 80048c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048c2:	e009      	b.n	80048d8 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80048c8:	231a      	movs	r3, #26
 80048ca:	2218      	movs	r2, #24
 80048cc:	4694      	mov	ip, r2
 80048ce:	44bc      	add	ip, r7
 80048d0:	4463      	add	r3, ip
 80048d2:	2201      	movs	r2, #1
 80048d4:	701a      	strb	r2, [r3, #0]
        break;
 80048d6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d100      	bne.n	80048e0 <UART_SetConfig+0x220>
 80048de:	e139      	b.n	8004b54 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	0013      	movs	r3, r2
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	189b      	adds	r3, r3, r2
 80048ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d305      	bcc.n	80048fc <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d907      	bls.n	800490c <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 80048fc:	231a      	movs	r3, #26
 80048fe:	2218      	movs	r2, #24
 8004900:	4694      	mov	ip, r2
 8004902:	44bc      	add	ip, r7
 8004904:	4463      	add	r3, ip
 8004906:	2201      	movs	r2, #1
 8004908:	701a      	strb	r2, [r3, #0]
 800490a:	e123      	b.n	8004b54 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800490c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	6939      	ldr	r1, [r7, #16]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	000b      	movs	r3, r1
 800491a:	0e1b      	lsrs	r3, r3, #24
 800491c:	0010      	movs	r0, r2
 800491e:	0205      	lsls	r5, r0, #8
 8004920:	431d      	orrs	r5, r3
 8004922:	000b      	movs	r3, r1
 8004924:	021c      	lsls	r4, r3, #8
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	085b      	lsrs	r3, r3, #1
 800492c:	60bb      	str	r3, [r7, #8]
 800492e:	2300      	movs	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	68b8      	ldr	r0, [r7, #8]
 8004934:	68f9      	ldr	r1, [r7, #12]
 8004936:	1900      	adds	r0, r0, r4
 8004938:	4169      	adcs	r1, r5
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	2300      	movs	r3, #0
 8004942:	607b      	str	r3, [r7, #4]
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f7fb fd54 	bl	80003f4 <__aeabi_uldivmod>
 800494c:	0002      	movs	r2, r0
 800494e:	000b      	movs	r3, r1
 8004950:	0013      	movs	r3, r2
 8004952:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004956:	23c0      	movs	r3, #192	; 0xc0
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	429a      	cmp	r2, r3
 800495c:	d309      	bcc.n	8004972 <UART_SetConfig+0x2b2>
 800495e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004960:	2380      	movs	r3, #128	; 0x80
 8004962:	035b      	lsls	r3, r3, #13
 8004964:	429a      	cmp	r2, r3
 8004966:	d204      	bcs.n	8004972 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800496e:	60da      	str	r2, [r3, #12]
 8004970:	e0f0      	b.n	8004b54 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004972:	231a      	movs	r3, #26
 8004974:	2218      	movs	r2, #24
 8004976:	4694      	mov	ip, r2
 8004978:	44bc      	add	ip, r7
 800497a:	4463      	add	r3, ip
 800497c:	2201      	movs	r2, #1
 800497e:	701a      	strb	r2, [r3, #0]
 8004980:	e0e8      	b.n	8004b54 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	69da      	ldr	r2, [r3, #28]
 8004986:	2380      	movs	r3, #128	; 0x80
 8004988:	021b      	lsls	r3, r3, #8
 800498a:	429a      	cmp	r2, r3
 800498c:	d000      	beq.n	8004990 <UART_SetConfig+0x2d0>
 800498e:	e087      	b.n	8004aa0 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8004990:	231b      	movs	r3, #27
 8004992:	2218      	movs	r2, #24
 8004994:	4694      	mov	ip, r2
 8004996:	44bc      	add	ip, r7
 8004998:	4463      	add	r3, ip
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b08      	cmp	r3, #8
 800499e:	d835      	bhi.n	8004a0c <UART_SetConfig+0x34c>
 80049a0:	009a      	lsls	r2, r3, #2
 80049a2:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <UART_SetConfig+0x348>)
 80049a4:	18d3      	adds	r3, r2, r3
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049aa:	f7ff f993 	bl	8003cd4 <HAL_RCC_GetPCLK1Freq>
 80049ae:	0003      	movs	r3, r0
 80049b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049b2:	e035      	b.n	8004a20 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b4:	f7ff f9a4 	bl	8003d00 <HAL_RCC_GetPCLK2Freq>
 80049b8:	0003      	movs	r3, r0
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049bc:	e030      	b.n	8004a20 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049be:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <UART_SetConfig+0x33c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2210      	movs	r2, #16
 80049c4:	4013      	ands	r3, r2
 80049c6:	d002      	beq.n	80049ce <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80049c8:	4b0d      	ldr	r3, [pc, #52]	; (8004a00 <UART_SetConfig+0x340>)
 80049ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049cc:	e028      	b.n	8004a20 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 80049ce:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <UART_SetConfig+0x344>)
 80049d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049d2:	e025      	b.n	8004a20 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049d4:	f7ff f8ce 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 80049d8:	0003      	movs	r3, r0
 80049da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049dc:	e020      	b.n	8004a20 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049de:	2380      	movs	r3, #128	; 0x80
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80049e4:	e01c      	b.n	8004a20 <UART_SetConfig+0x360>
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	efff69f3 	.word	0xefff69f3
 80049ec:	ffffcfff 	.word	0xffffcfff
 80049f0:	40004800 	.word	0x40004800
 80049f4:	fffff4ff 	.word	0xfffff4ff
 80049f8:	40004400 	.word	0x40004400
 80049fc:	40021000 	.word	0x40021000
 8004a00:	003d0900 	.word	0x003d0900
 8004a04:	00f42400 	.word	0x00f42400
 8004a08:	08004fd8 	.word	0x08004fd8
      default:
        pclk = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a10:	231a      	movs	r3, #26
 8004a12:	2218      	movs	r2, #24
 8004a14:	4694      	mov	ip, r2
 8004a16:	44bc      	add	ip, r7
 8004a18:	4463      	add	r3, ip
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	701a      	strb	r2, [r3, #0]
        break;
 8004a1e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d100      	bne.n	8004a28 <UART_SetConfig+0x368>
 8004a26:	e095      	b.n	8004b54 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2a:	005a      	lsls	r2, r3, #1
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	085b      	lsrs	r3, r3, #1
 8004a32:	18d2      	adds	r2, r2, r3
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	0019      	movs	r1, r3
 8004a3a:	0010      	movs	r0, r2
 8004a3c:	f7fb fb64 	bl	8000108 <__udivsi3>
 8004a40:	0003      	movs	r3, r0
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	2b0f      	cmp	r3, #15
 8004a4a:	d921      	bls.n	8004a90 <UART_SetConfig+0x3d0>
 8004a4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a4e:	2380      	movs	r3, #128	; 0x80
 8004a50:	025b      	lsls	r3, r3, #9
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d21c      	bcs.n	8004a90 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	200e      	movs	r0, #14
 8004a5c:	2418      	movs	r4, #24
 8004a5e:	193b      	adds	r3, r7, r4
 8004a60:	181b      	adds	r3, r3, r0
 8004a62:	210f      	movs	r1, #15
 8004a64:	438a      	bics	r2, r1
 8004a66:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2207      	movs	r2, #7
 8004a70:	4013      	ands	r3, r2
 8004a72:	b299      	uxth	r1, r3
 8004a74:	193b      	adds	r3, r7, r4
 8004a76:	181b      	adds	r3, r3, r0
 8004a78:	193a      	adds	r2, r7, r4
 8004a7a:	1812      	adds	r2, r2, r0
 8004a7c:	8812      	ldrh	r2, [r2, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	193a      	adds	r2, r7, r4
 8004a88:	1812      	adds	r2, r2, r0
 8004a8a:	8812      	ldrh	r2, [r2, #0]
 8004a8c:	60da      	str	r2, [r3, #12]
 8004a8e:	e061      	b.n	8004b54 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004a90:	231a      	movs	r3, #26
 8004a92:	2218      	movs	r2, #24
 8004a94:	4694      	mov	ip, r2
 8004a96:	44bc      	add	ip, r7
 8004a98:	4463      	add	r3, ip
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	701a      	strb	r2, [r3, #0]
 8004a9e:	e059      	b.n	8004b54 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aa0:	231b      	movs	r3, #27
 8004aa2:	2218      	movs	r2, #24
 8004aa4:	4694      	mov	ip, r2
 8004aa6:	44bc      	add	ip, r7
 8004aa8:	4463      	add	r3, ip
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d822      	bhi.n	8004af6 <UART_SetConfig+0x436>
 8004ab0:	009a      	lsls	r2, r3, #2
 8004ab2:	4b30      	ldr	r3, [pc, #192]	; (8004b74 <UART_SetConfig+0x4b4>)
 8004ab4:	18d3      	adds	r3, r2, r3
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aba:	f7ff f90b 	bl	8003cd4 <HAL_RCC_GetPCLK1Freq>
 8004abe:	0003      	movs	r3, r0
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ac2:	e022      	b.n	8004b0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ac4:	f7ff f91c 	bl	8003d00 <HAL_RCC_GetPCLK2Freq>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004acc:	e01d      	b.n	8004b0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ace:	4b2a      	ldr	r3, [pc, #168]	; (8004b78 <UART_SetConfig+0x4b8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2210      	movs	r2, #16
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d002      	beq.n	8004ade <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004ad8:	4b28      	ldr	r3, [pc, #160]	; (8004b7c <UART_SetConfig+0x4bc>)
 8004ada:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004adc:	e015      	b.n	8004b0a <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8004ade:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <UART_SetConfig+0x4c0>)
 8004ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ae2:	e012      	b.n	8004b0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ae4:	f7ff f846 	bl	8003b74 <HAL_RCC_GetSysClockFreq>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004aec:	e00d      	b.n	8004b0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aee:	2380      	movs	r3, #128	; 0x80
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004af4:	e009      	b.n	8004b0a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004afa:	231a      	movs	r3, #26
 8004afc:	2218      	movs	r2, #24
 8004afe:	4694      	mov	ip, r2
 8004b00:	44bc      	add	ip, r7
 8004b02:	4463      	add	r3, ip
 8004b04:	2201      	movs	r2, #1
 8004b06:	701a      	strb	r2, [r3, #0]
        break;
 8004b08:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d021      	beq.n	8004b54 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	085a      	lsrs	r2, r3, #1
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	18d2      	adds	r2, r2, r3
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	0019      	movs	r1, r3
 8004b20:	0010      	movs	r0, r2
 8004b22:	f7fb faf1 	bl	8000108 <__udivsi3>
 8004b26:	0003      	movs	r3, r0
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2e:	2b0f      	cmp	r3, #15
 8004b30:	d909      	bls.n	8004b46 <UART_SetConfig+0x486>
 8004b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	025b      	lsls	r3, r3, #9
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d204      	bcs.n	8004b46 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b42:	60da      	str	r2, [r3, #12]
 8004b44:	e006      	b.n	8004b54 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004b46:	231a      	movs	r3, #26
 8004b48:	2218      	movs	r2, #24
 8004b4a:	4694      	mov	ip, r2
 8004b4c:	44bc      	add	ip, r7
 8004b4e:	4463      	add	r3, ip
 8004b50:	2201      	movs	r2, #1
 8004b52:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	2200      	movs	r2, #0
 8004b58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b60:	231a      	movs	r3, #26
 8004b62:	2218      	movs	r2, #24
 8004b64:	4694      	mov	ip, r2
 8004b66:	44bc      	add	ip, r7
 8004b68:	4463      	add	r3, ip
 8004b6a:	781b      	ldrb	r3, [r3, #0]
}
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b00e      	add	sp, #56	; 0x38
 8004b72:	bdb0      	pop	{r4, r5, r7, pc}
 8004b74:	08004ffc 	.word	0x08004ffc
 8004b78:	40021000 	.word	0x40021000
 8004b7c:	003d0900 	.word	0x003d0900
 8004b80:	00f42400 	.word	0x00f42400

08004b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	2201      	movs	r2, #1
 8004b92:	4013      	ands	r3, r2
 8004b94:	d00b      	beq.n	8004bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4a4a      	ldr	r2, [pc, #296]	; (8004cc8 <UART_AdvFeatureConfig+0x144>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	0019      	movs	r1, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	d00b      	beq.n	8004bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	4a43      	ldr	r2, [pc, #268]	; (8004ccc <UART_AdvFeatureConfig+0x148>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	0019      	movs	r1, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d00b      	beq.n	8004bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	4a3b      	ldr	r2, [pc, #236]	; (8004cd0 <UART_AdvFeatureConfig+0x14c>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	0019      	movs	r1, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	2208      	movs	r2, #8
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d00b      	beq.n	8004c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	4a34      	ldr	r2, [pc, #208]	; (8004cd4 <UART_AdvFeatureConfig+0x150>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	0019      	movs	r1, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	2210      	movs	r2, #16
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d00b      	beq.n	8004c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	4a2c      	ldr	r2, [pc, #176]	; (8004cd8 <UART_AdvFeatureConfig+0x154>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	0019      	movs	r1, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d00b      	beq.n	8004c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <UART_AdvFeatureConfig+0x158>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	0019      	movs	r1, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5c:	2240      	movs	r2, #64	; 0x40
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d01d      	beq.n	8004c9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	4a1d      	ldr	r2, [pc, #116]	; (8004ce0 <UART_AdvFeatureConfig+0x15c>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	0019      	movs	r1, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c7e:	2380      	movs	r3, #128	; 0x80
 8004c80:	035b      	lsls	r3, r3, #13
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d10b      	bne.n	8004c9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4a15      	ldr	r2, [pc, #84]	; (8004ce4 <UART_AdvFeatureConfig+0x160>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	0019      	movs	r1, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	2280      	movs	r2, #128	; 0x80
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d00b      	beq.n	8004cc0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	4a0e      	ldr	r2, [pc, #56]	; (8004ce8 <UART_AdvFeatureConfig+0x164>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	0019      	movs	r1, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	605a      	str	r2, [r3, #4]
  }
}
 8004cc0:	46c0      	nop			; (mov r8, r8)
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b002      	add	sp, #8
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	fffdffff 	.word	0xfffdffff
 8004ccc:	fffeffff 	.word	0xfffeffff
 8004cd0:	fffbffff 	.word	0xfffbffff
 8004cd4:	ffff7fff 	.word	0xffff7fff
 8004cd8:	ffffefff 	.word	0xffffefff
 8004cdc:	ffffdfff 	.word	0xffffdfff
 8004ce0:	ffefffff 	.word	0xffefffff
 8004ce4:	ff9fffff 	.word	0xff9fffff
 8004ce8:	fff7ffff 	.word	0xfff7ffff

08004cec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2280      	movs	r2, #128	; 0x80
 8004cf8:	2100      	movs	r1, #0
 8004cfa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cfc:	f7fd fc1a 	bl	8002534 <HAL_GetTick>
 8004d00:	0003      	movs	r3, r0
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2208      	movs	r2, #8
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d10c      	bne.n	8004d2c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2280      	movs	r2, #128	; 0x80
 8004d16:	0391      	lsls	r1, r2, #14
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	4a17      	ldr	r2, [pc, #92]	; (8004d78 <UART_CheckIdleState+0x8c>)
 8004d1c:	9200      	str	r2, [sp, #0]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f000 f82c 	bl	8004d7c <UART_WaitOnFlagUntilTimeout>
 8004d24:	1e03      	subs	r3, r0, #0
 8004d26:	d001      	beq.n	8004d2c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e021      	b.n	8004d70 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2204      	movs	r2, #4
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d10c      	bne.n	8004d54 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2280      	movs	r2, #128	; 0x80
 8004d3e:	03d1      	lsls	r1, r2, #15
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	4a0d      	ldr	r2, [pc, #52]	; (8004d78 <UART_CheckIdleState+0x8c>)
 8004d44:	9200      	str	r2, [sp, #0]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f000 f818 	bl	8004d7c <UART_WaitOnFlagUntilTimeout>
 8004d4c:	1e03      	subs	r3, r0, #0
 8004d4e:	d001      	beq.n	8004d54 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e00d      	b.n	8004d70 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2220      	movs	r2, #32
 8004d58:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2274      	movs	r2, #116	; 0x74
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	0018      	movs	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b004      	add	sp, #16
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	01ffffff 	.word	0x01ffffff

08004d7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b094      	sub	sp, #80	; 0x50
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	1dfb      	adds	r3, r7, #7
 8004d8a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d8c:	e0a3      	b.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d90:	3301      	adds	r3, #1
 8004d92:	d100      	bne.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004d94:	e09f      	b.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d96:	f7fd fbcd 	bl	8002534 <HAL_GetTick>
 8004d9a:	0002      	movs	r2, r0
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d302      	bcc.n	8004dac <UART_WaitOnFlagUntilTimeout+0x30>
 8004da6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d13d      	bne.n	8004e28 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dac:	f3ef 8310 	mrs	r3, PRIMASK
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004db4:	647b      	str	r3, [r7, #68]	; 0x44
 8004db6:	2301      	movs	r3, #1
 8004db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbc:	f383 8810 	msr	PRIMASK, r3
}
 8004dc0:	46c0      	nop			; (mov r8, r8)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	494c      	ldr	r1, [pc, #304]	; (8004f00 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004dce:	400a      	ands	r2, r1
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	f383 8810 	msr	PRIMASK, r3
}
 8004ddc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dde:	f3ef 8310 	mrs	r3, PRIMASK
 8004de2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de6:	643b      	str	r3, [r7, #64]	; 0x40
 8004de8:	2301      	movs	r3, #1
 8004dea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dee:	f383 8810 	msr	PRIMASK, r3
}
 8004df2:	46c0      	nop			; (mov r8, r8)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2101      	movs	r1, #1
 8004e00:	438a      	bics	r2, r1
 8004e02:	609a      	str	r2, [r3, #8]
 8004e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0a:	f383 8810 	msr	PRIMASK, r3
}
 8004e0e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2274      	movs	r2, #116	; 0x74
 8004e20:	2100      	movs	r1, #0
 8004e22:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e067      	b.n	8004ef8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2204      	movs	r2, #4
 8004e30:	4013      	ands	r3, r2
 8004e32:	d050      	beq.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	69da      	ldr	r2, [r3, #28]
 8004e3a:	2380      	movs	r3, #128	; 0x80
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	401a      	ands	r2, r3
 8004e40:	2380      	movs	r3, #128	; 0x80
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d146      	bne.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2280      	movs	r2, #128	; 0x80
 8004e4e:	0112      	lsls	r2, r2, #4
 8004e50:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e52:	f3ef 8310 	mrs	r3, PRIMASK
 8004e56:	613b      	str	r3, [r7, #16]
  return(result);
 8004e58:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f383 8810 	msr	PRIMASK, r3
}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4923      	ldr	r1, [pc, #140]	; (8004f00 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004e74:	400a      	ands	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e7a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	f383 8810 	msr	PRIMASK, r3
}
 8004e82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e84:	f3ef 8310 	mrs	r3, PRIMASK
 8004e88:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e8a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e8e:	2301      	movs	r3, #1
 8004e90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	f383 8810 	msr	PRIMASK, r3
}
 8004e98:	46c0      	nop			; (mov r8, r8)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	438a      	bics	r2, r1
 8004ea8:	609a      	str	r2, [r3, #8]
 8004eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	f383 8810 	msr	PRIMASK, r3
}
 8004eb4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2280      	movs	r2, #128	; 0x80
 8004ec6:	2120      	movs	r1, #32
 8004ec8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2274      	movs	r2, #116	; 0x74
 8004ece:	2100      	movs	r1, #0
 8004ed0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e010      	b.n	8004ef8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	425a      	negs	r2, r3
 8004ee6:	4153      	adcs	r3, r2
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	001a      	movs	r2, r3
 8004eec:	1dfb      	adds	r3, r7, #7
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d100      	bne.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004ef4:	e74b      	b.n	8004d8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	0018      	movs	r0, r3
 8004efa:	46bd      	mov	sp, r7
 8004efc:	b014      	add	sp, #80	; 0x50
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	fffffe5f 	.word	0xfffffe5f

08004f04 <__libc_init_array>:
 8004f04:	b570      	push	{r4, r5, r6, lr}
 8004f06:	2600      	movs	r6, #0
 8004f08:	4d0c      	ldr	r5, [pc, #48]	; (8004f3c <__libc_init_array+0x38>)
 8004f0a:	4c0d      	ldr	r4, [pc, #52]	; (8004f40 <__libc_init_array+0x3c>)
 8004f0c:	1b64      	subs	r4, r4, r5
 8004f0e:	10a4      	asrs	r4, r4, #2
 8004f10:	42a6      	cmp	r6, r4
 8004f12:	d109      	bne.n	8004f28 <__libc_init_array+0x24>
 8004f14:	2600      	movs	r6, #0
 8004f16:	f000 f821 	bl	8004f5c <_init>
 8004f1a:	4d0a      	ldr	r5, [pc, #40]	; (8004f44 <__libc_init_array+0x40>)
 8004f1c:	4c0a      	ldr	r4, [pc, #40]	; (8004f48 <__libc_init_array+0x44>)
 8004f1e:	1b64      	subs	r4, r4, r5
 8004f20:	10a4      	asrs	r4, r4, #2
 8004f22:	42a6      	cmp	r6, r4
 8004f24:	d105      	bne.n	8004f32 <__libc_init_array+0x2e>
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
 8004f28:	00b3      	lsls	r3, r6, #2
 8004f2a:	58eb      	ldr	r3, [r5, r3]
 8004f2c:	4798      	blx	r3
 8004f2e:	3601      	adds	r6, #1
 8004f30:	e7ee      	b.n	8004f10 <__libc_init_array+0xc>
 8004f32:	00b3      	lsls	r3, r6, #2
 8004f34:	58eb      	ldr	r3, [r5, r3]
 8004f36:	4798      	blx	r3
 8004f38:	3601      	adds	r6, #1
 8004f3a:	e7f2      	b.n	8004f22 <__libc_init_array+0x1e>
 8004f3c:	08005028 	.word	0x08005028
 8004f40:	08005028 	.word	0x08005028
 8004f44:	08005028 	.word	0x08005028
 8004f48:	0800502c 	.word	0x0800502c

08004f4c <memset>:
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	1882      	adds	r2, r0, r2
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d100      	bne.n	8004f56 <memset+0xa>
 8004f54:	4770      	bx	lr
 8004f56:	7019      	strb	r1, [r3, #0]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	e7f9      	b.n	8004f50 <memset+0x4>

08004f5c <_init>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f62:	bc08      	pop	{r3}
 8004f64:	469e      	mov	lr, r3
 8004f66:	4770      	bx	lr

08004f68 <_fini>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	46c0      	nop			; (mov r8, r8)
 8004f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6e:	bc08      	pop	{r3}
 8004f70:	469e      	mov	lr, r3
 8004f72:	4770      	bx	lr
