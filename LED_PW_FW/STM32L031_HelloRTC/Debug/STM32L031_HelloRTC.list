
STM32L031_HelloRTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003110  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080031d0  080031d0  000131d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800323c  0800323c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800323c  0800323c  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003244  08003244  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003244  08003244  00013244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003248  08003248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800324c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08003258  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08003258  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a5e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001794  00000000  00000000  00029a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0002b228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000730  00000000  00000000  0002b9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010e55  00000000  00000000  0002c120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4b5  00000000  00000000  0003cf75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000691a2  00000000  00000000  0004742a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b05cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ae0  00000000  00000000  000b0620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080031b8 	.word	0x080031b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080031b8 	.word	0x080031b8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f82e 	bl	8000484 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_lmul>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	0415      	lsls	r5, r2, #16
 8000438:	0c2d      	lsrs	r5, r5, #16
 800043a:	000f      	movs	r7, r1
 800043c:	0001      	movs	r1, r0
 800043e:	002e      	movs	r6, r5
 8000440:	46c6      	mov	lr, r8
 8000442:	4684      	mov	ip, r0
 8000444:	0400      	lsls	r0, r0, #16
 8000446:	0c14      	lsrs	r4, r2, #16
 8000448:	0c00      	lsrs	r0, r0, #16
 800044a:	0c09      	lsrs	r1, r1, #16
 800044c:	4346      	muls	r6, r0
 800044e:	434d      	muls	r5, r1
 8000450:	4360      	muls	r0, r4
 8000452:	4361      	muls	r1, r4
 8000454:	1940      	adds	r0, r0, r5
 8000456:	0c34      	lsrs	r4, r6, #16
 8000458:	1824      	adds	r4, r4, r0
 800045a:	b500      	push	{lr}
 800045c:	42a5      	cmp	r5, r4
 800045e:	d903      	bls.n	8000468 <__aeabi_lmul+0x34>
 8000460:	2080      	movs	r0, #128	; 0x80
 8000462:	0240      	lsls	r0, r0, #9
 8000464:	4680      	mov	r8, r0
 8000466:	4441      	add	r1, r8
 8000468:	0c25      	lsrs	r5, r4, #16
 800046a:	186d      	adds	r5, r5, r1
 800046c:	4661      	mov	r1, ip
 800046e:	4359      	muls	r1, r3
 8000470:	437a      	muls	r2, r7
 8000472:	0430      	lsls	r0, r6, #16
 8000474:	1949      	adds	r1, r1, r5
 8000476:	0424      	lsls	r4, r4, #16
 8000478:	0c00      	lsrs	r0, r0, #16
 800047a:	1820      	adds	r0, r4, r0
 800047c:	1889      	adds	r1, r1, r2
 800047e:	bc80      	pop	{r7}
 8000480:	46b8      	mov	r8, r7
 8000482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000484 <__udivmoddi4>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	4657      	mov	r7, sl
 8000488:	464e      	mov	r6, r9
 800048a:	4645      	mov	r5, r8
 800048c:	46de      	mov	lr, fp
 800048e:	b5e0      	push	{r5, r6, r7, lr}
 8000490:	0004      	movs	r4, r0
 8000492:	000d      	movs	r5, r1
 8000494:	4692      	mov	sl, r2
 8000496:	4699      	mov	r9, r3
 8000498:	b083      	sub	sp, #12
 800049a:	428b      	cmp	r3, r1
 800049c:	d830      	bhi.n	8000500 <__udivmoddi4+0x7c>
 800049e:	d02d      	beq.n	80004fc <__udivmoddi4+0x78>
 80004a0:	4649      	mov	r1, r9
 80004a2:	4650      	mov	r0, sl
 80004a4:	f000 f8ba 	bl	800061c <__clzdi2>
 80004a8:	0029      	movs	r1, r5
 80004aa:	0006      	movs	r6, r0
 80004ac:	0020      	movs	r0, r4
 80004ae:	f000 f8b5 	bl	800061c <__clzdi2>
 80004b2:	1a33      	subs	r3, r6, r0
 80004b4:	4698      	mov	r8, r3
 80004b6:	3b20      	subs	r3, #32
 80004b8:	469b      	mov	fp, r3
 80004ba:	d433      	bmi.n	8000524 <__udivmoddi4+0xa0>
 80004bc:	465a      	mov	r2, fp
 80004be:	4653      	mov	r3, sl
 80004c0:	4093      	lsls	r3, r2
 80004c2:	4642      	mov	r2, r8
 80004c4:	001f      	movs	r7, r3
 80004c6:	4653      	mov	r3, sl
 80004c8:	4093      	lsls	r3, r2
 80004ca:	001e      	movs	r6, r3
 80004cc:	42af      	cmp	r7, r5
 80004ce:	d83a      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80004d0:	42af      	cmp	r7, r5
 80004d2:	d100      	bne.n	80004d6 <__udivmoddi4+0x52>
 80004d4:	e078      	b.n	80005c8 <__udivmoddi4+0x144>
 80004d6:	465b      	mov	r3, fp
 80004d8:	1ba4      	subs	r4, r4, r6
 80004da:	41bd      	sbcs	r5, r7
 80004dc:	2b00      	cmp	r3, #0
 80004de:	da00      	bge.n	80004e2 <__udivmoddi4+0x5e>
 80004e0:	e075      	b.n	80005ce <__udivmoddi4+0x14a>
 80004e2:	2200      	movs	r2, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	9200      	str	r2, [sp, #0]
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2301      	movs	r3, #1
 80004ec:	465a      	mov	r2, fp
 80004ee:	4093      	lsls	r3, r2
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	2301      	movs	r3, #1
 80004f4:	4642      	mov	r2, r8
 80004f6:	4093      	lsls	r3, r2
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	e028      	b.n	800054e <__udivmoddi4+0xca>
 80004fc:	4282      	cmp	r2, r0
 80004fe:	d9cf      	bls.n	80004a0 <__udivmoddi4+0x1c>
 8000500:	2200      	movs	r2, #0
 8000502:	2300      	movs	r3, #0
 8000504:	9200      	str	r2, [sp, #0]
 8000506:	9301      	str	r3, [sp, #4]
 8000508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <__udivmoddi4+0x8e>
 800050e:	601c      	str	r4, [r3, #0]
 8000510:	605d      	str	r5, [r3, #4]
 8000512:	9800      	ldr	r0, [sp, #0]
 8000514:	9901      	ldr	r1, [sp, #4]
 8000516:	b003      	add	sp, #12
 8000518:	bcf0      	pop	{r4, r5, r6, r7}
 800051a:	46bb      	mov	fp, r7
 800051c:	46b2      	mov	sl, r6
 800051e:	46a9      	mov	r9, r5
 8000520:	46a0      	mov	r8, r4
 8000522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000524:	4642      	mov	r2, r8
 8000526:	2320      	movs	r3, #32
 8000528:	1a9b      	subs	r3, r3, r2
 800052a:	4652      	mov	r2, sl
 800052c:	40da      	lsrs	r2, r3
 800052e:	4641      	mov	r1, r8
 8000530:	0013      	movs	r3, r2
 8000532:	464a      	mov	r2, r9
 8000534:	408a      	lsls	r2, r1
 8000536:	0017      	movs	r7, r2
 8000538:	4642      	mov	r2, r8
 800053a:	431f      	orrs	r7, r3
 800053c:	4653      	mov	r3, sl
 800053e:	4093      	lsls	r3, r2
 8000540:	001e      	movs	r6, r3
 8000542:	42af      	cmp	r7, r5
 8000544:	d9c4      	bls.n	80004d0 <__udivmoddi4+0x4c>
 8000546:	2200      	movs	r2, #0
 8000548:	2300      	movs	r3, #0
 800054a:	9200      	str	r2, [sp, #0]
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0d9      	beq.n	8000508 <__udivmoddi4+0x84>
 8000554:	07fb      	lsls	r3, r7, #31
 8000556:	0872      	lsrs	r2, r6, #1
 8000558:	431a      	orrs	r2, r3
 800055a:	4646      	mov	r6, r8
 800055c:	087b      	lsrs	r3, r7, #1
 800055e:	e00e      	b.n	800057e <__udivmoddi4+0xfa>
 8000560:	42ab      	cmp	r3, r5
 8000562:	d101      	bne.n	8000568 <__udivmoddi4+0xe4>
 8000564:	42a2      	cmp	r2, r4
 8000566:	d80c      	bhi.n	8000582 <__udivmoddi4+0xfe>
 8000568:	1aa4      	subs	r4, r4, r2
 800056a:	419d      	sbcs	r5, r3
 800056c:	2001      	movs	r0, #1
 800056e:	1924      	adds	r4, r4, r4
 8000570:	416d      	adcs	r5, r5
 8000572:	2100      	movs	r1, #0
 8000574:	3e01      	subs	r6, #1
 8000576:	1824      	adds	r4, r4, r0
 8000578:	414d      	adcs	r5, r1
 800057a:	2e00      	cmp	r6, #0
 800057c:	d006      	beq.n	800058c <__udivmoddi4+0x108>
 800057e:	42ab      	cmp	r3, r5
 8000580:	d9ee      	bls.n	8000560 <__udivmoddi4+0xdc>
 8000582:	3e01      	subs	r6, #1
 8000584:	1924      	adds	r4, r4, r4
 8000586:	416d      	adcs	r5, r5
 8000588:	2e00      	cmp	r6, #0
 800058a:	d1f8      	bne.n	800057e <__udivmoddi4+0xfa>
 800058c:	9800      	ldr	r0, [sp, #0]
 800058e:	9901      	ldr	r1, [sp, #4]
 8000590:	465b      	mov	r3, fp
 8000592:	1900      	adds	r0, r0, r4
 8000594:	4169      	adcs	r1, r5
 8000596:	2b00      	cmp	r3, #0
 8000598:	db24      	blt.n	80005e4 <__udivmoddi4+0x160>
 800059a:	002b      	movs	r3, r5
 800059c:	465a      	mov	r2, fp
 800059e:	4644      	mov	r4, r8
 80005a0:	40d3      	lsrs	r3, r2
 80005a2:	002a      	movs	r2, r5
 80005a4:	40e2      	lsrs	r2, r4
 80005a6:	001c      	movs	r4, r3
 80005a8:	465b      	mov	r3, fp
 80005aa:	0015      	movs	r5, r2
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	db2a      	blt.n	8000606 <__udivmoddi4+0x182>
 80005b0:	0026      	movs	r6, r4
 80005b2:	409e      	lsls	r6, r3
 80005b4:	0033      	movs	r3, r6
 80005b6:	0026      	movs	r6, r4
 80005b8:	4647      	mov	r7, r8
 80005ba:	40be      	lsls	r6, r7
 80005bc:	0032      	movs	r2, r6
 80005be:	1a80      	subs	r0, r0, r2
 80005c0:	4199      	sbcs	r1, r3
 80005c2:	9000      	str	r0, [sp, #0]
 80005c4:	9101      	str	r1, [sp, #4]
 80005c6:	e79f      	b.n	8000508 <__udivmoddi4+0x84>
 80005c8:	42a3      	cmp	r3, r4
 80005ca:	d8bc      	bhi.n	8000546 <__udivmoddi4+0xc2>
 80005cc:	e783      	b.n	80004d6 <__udivmoddi4+0x52>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	2100      	movs	r1, #0
 80005d4:	1a9b      	subs	r3, r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	9100      	str	r1, [sp, #0]
 80005da:	9201      	str	r2, [sp, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	40da      	lsrs	r2, r3
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	e786      	b.n	80004f2 <__udivmoddi4+0x6e>
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	002a      	movs	r2, r5
 80005ec:	4646      	mov	r6, r8
 80005ee:	409a      	lsls	r2, r3
 80005f0:	0023      	movs	r3, r4
 80005f2:	40f3      	lsrs	r3, r6
 80005f4:	4644      	mov	r4, r8
 80005f6:	4313      	orrs	r3, r2
 80005f8:	002a      	movs	r2, r5
 80005fa:	40e2      	lsrs	r2, r4
 80005fc:	001c      	movs	r4, r3
 80005fe:	465b      	mov	r3, fp
 8000600:	0015      	movs	r5, r2
 8000602:	2b00      	cmp	r3, #0
 8000604:	dad4      	bge.n	80005b0 <__udivmoddi4+0x12c>
 8000606:	4642      	mov	r2, r8
 8000608:	002f      	movs	r7, r5
 800060a:	2320      	movs	r3, #32
 800060c:	0026      	movs	r6, r4
 800060e:	4097      	lsls	r7, r2
 8000610:	1a9b      	subs	r3, r3, r2
 8000612:	40de      	lsrs	r6, r3
 8000614:	003b      	movs	r3, r7
 8000616:	4333      	orrs	r3, r6
 8000618:	e7cd      	b.n	80005b6 <__udivmoddi4+0x132>
 800061a:	46c0      	nop			; (mov r8, r8)

0800061c <__clzdi2>:
 800061c:	b510      	push	{r4, lr}
 800061e:	2900      	cmp	r1, #0
 8000620:	d103      	bne.n	800062a <__clzdi2+0xe>
 8000622:	f000 f807 	bl	8000634 <__clzsi2>
 8000626:	3020      	adds	r0, #32
 8000628:	e002      	b.n	8000630 <__clzdi2+0x14>
 800062a:	1c08      	adds	r0, r1, #0
 800062c:	f000 f802 	bl	8000634 <__clzsi2>
 8000630:	bd10      	pop	{r4, pc}
 8000632:	46c0      	nop			; (mov r8, r8)

08000634 <__clzsi2>:
 8000634:	211c      	movs	r1, #28
 8000636:	2301      	movs	r3, #1
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	4298      	cmp	r0, r3
 800063c:	d301      	bcc.n	8000642 <__clzsi2+0xe>
 800063e:	0c00      	lsrs	r0, r0, #16
 8000640:	3910      	subs	r1, #16
 8000642:	0a1b      	lsrs	r3, r3, #8
 8000644:	4298      	cmp	r0, r3
 8000646:	d301      	bcc.n	800064c <__clzsi2+0x18>
 8000648:	0a00      	lsrs	r0, r0, #8
 800064a:	3908      	subs	r1, #8
 800064c:	091b      	lsrs	r3, r3, #4
 800064e:	4298      	cmp	r0, r3
 8000650:	d301      	bcc.n	8000656 <__clzsi2+0x22>
 8000652:	0900      	lsrs	r0, r0, #4
 8000654:	3904      	subs	r1, #4
 8000656:	a202      	add	r2, pc, #8	; (adr r2, 8000660 <__clzsi2+0x2c>)
 8000658:	5c10      	ldrb	r0, [r2, r0]
 800065a:	1840      	adds	r0, r0, r1
 800065c:	4770      	bx	lr
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	02020304 	.word	0x02020304
 8000664:	01010101 	.word	0x01010101
	...

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fbeb 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f823 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 f8ff 	bl	8000880 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000682:	f000 f8cd 	bl	8000820 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000686:	f000 f8a1 	bl	80007cc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  MAX_Set_Rtc();
 800068a:	f000 f949 	bl	8000920 <MAX_Set_Rtc>
  while (1)
  {
    // get time and date from rtc
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;
    HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800068e:	1d39      	adds	r1, r7, #4
 8000690:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <main+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	0018      	movs	r0, r3
 8000696:	f001 feff 	bl	8002498 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800069a:	0039      	movs	r1, r7
 800069c:	4b07      	ldr	r3, [pc, #28]	; (80006bc <main+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	0018      	movs	r0, r3
 80006a2:	f002 f803 	bl	80026ac <HAL_RTC_GetDate>
    } else if () {
      // time changed winter to summer
    }
    */

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <main+0x50>)
 80006a8:	2108      	movs	r1, #8
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fea3 	bl	80013f6 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 80006b0:	23fa      	movs	r3, #250	; 0xfa
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fc3b 	bl	8000f30 <HAL_Delay>
  {
 80006ba:	e7e8      	b.n	800068e <main+0x1e>
 80006bc:	20000028 	.word	0x20000028
 80006c0:	50000400 	.word	0x50000400

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b099      	sub	sp, #100	; 0x64
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	242c      	movs	r4, #44	; 0x2c
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	0018      	movs	r0, r3
 80006d0:	2334      	movs	r3, #52	; 0x34
 80006d2:	001a      	movs	r2, r3
 80006d4:	2100      	movs	r1, #0
 80006d6:	f002 fd67 	bl	80031a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006da:	2318      	movs	r3, #24
 80006dc:	18fb      	adds	r3, r7, r3
 80006de:	0018      	movs	r0, r3
 80006e0:	2314      	movs	r3, #20
 80006e2:	001a      	movs	r2, r3
 80006e4:	2100      	movs	r1, #0
 80006e6:	f002 fd5f 	bl	80031a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ea:	003b      	movs	r3, r7
 80006ec:	0018      	movs	r0, r3
 80006ee:	2318      	movs	r3, #24
 80006f0:	001a      	movs	r2, r3
 80006f2:	2100      	movs	r1, #0
 80006f4:	f002 fd58 	bl	80031a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <SystemClock_Config+0xfc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a31      	ldr	r2, [pc, #196]	; (80007c4 <SystemClock_Config+0x100>)
 80006fe:	401a      	ands	r2, r3
 8000700:	4b2f      	ldr	r3, [pc, #188]	; (80007c0 <SystemClock_Config+0xfc>)
 8000702:	2180      	movs	r1, #128	; 0x80
 8000704:	0109      	lsls	r1, r1, #4
 8000706:	430a      	orrs	r2, r1
 8000708:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800070a:	f000 fe8f 	bl	800142c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800070e:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <SystemClock_Config+0x104>)
 8000710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000712:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <SystemClock_Config+0x104>)
 8000714:	492b      	ldr	r1, [pc, #172]	; (80007c4 <SystemClock_Config+0x100>)
 8000716:	400a      	ands	r2, r1
 8000718:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2206      	movs	r2, #6
 800071e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2280      	movs	r2, #128	; 0x80
 8000724:	0052      	lsls	r2, r2, #1
 8000726:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	0021      	movs	r1, r4
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2201      	movs	r2, #1
 800072e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2210      	movs	r2, #16
 8000734:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2202      	movs	r2, #2
 800073a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2200      	movs	r2, #0
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000742:	187b      	adds	r3, r7, r1
 8000744:	2280      	movs	r2, #128	; 0x80
 8000746:	02d2      	lsls	r2, r2, #11
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	03d2      	lsls	r2, r2, #15
 8000750:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000752:	187b      	adds	r3, r7, r1
 8000754:	0018      	movs	r0, r3
 8000756:	f000 fe77 	bl	8001448 <HAL_RCC_OscConfig>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800075e:	f000 fab9 	bl	8000cd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	2118      	movs	r1, #24
 8000764:	187b      	adds	r3, r7, r1
 8000766:	220f      	movs	r2, #15
 8000768:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2203      	movs	r2, #3
 800076e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2101      	movs	r1, #1
 8000786:	0018      	movs	r0, r3
 8000788:	f001 f9da 	bl	8001b40 <HAL_RCC_ClockConfig>
 800078c:	1e03      	subs	r3, r0, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000790:	f000 faa0 	bl	8000cd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8000794:	003b      	movs	r3, r7
 8000796:	2222      	movs	r2, #34	; 0x22
 8000798:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800079a:	003b      	movs	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007a0:	003b      	movs	r3, r7
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	0252      	lsls	r2, r2, #9
 80007a6:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a8:	003b      	movs	r3, r7
 80007aa:	0018      	movs	r0, r3
 80007ac:	f001 fbec 	bl	8001f88 <HAL_RCCEx_PeriphCLKConfig>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80007b4:	f000 fa8e 	bl	8000cd4 <Error_Handler>
  }
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b019      	add	sp, #100	; 0x64
 80007be:	bd90      	pop	{r4, r7, pc}
 80007c0:	40007000 	.word	0x40007000
 80007c4:	ffffe7ff 	.word	0xffffe7ff
 80007c8:	40021000 	.word	0x40021000

080007cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_RTC_Init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <MX_RTC_Init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_RTC_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_RTC_Init+0x4c>)
 80007de:	227f      	movs	r2, #127	; 0x7f
 80007e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_RTC_Init+0x4c>)
 80007e4:	22ff      	movs	r2, #255	; 0xff
 80007e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_RTC_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <MX_RTC_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <MX_RTC_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007fa:	4b07      	ldr	r3, [pc, #28]	; (8000818 <MX_RTC_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <MX_RTC_Init+0x4c>)
 8000802:	0018      	movs	r0, r3
 8000804:	f001 fce6 	bl	80021d4 <HAL_RTC_Init>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800080c:	f000 fa62 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	20000028 	.word	0x20000028
 800081c:	40002800 	.word	0x40002800

08000820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000826:	4a15      	ldr	r2, [pc, #84]	; (800087c <MX_USART2_UART_Init+0x5c>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_USART2_UART_Init+0x58>)
 800082c:	22e1      	movs	r2, #225	; 0xe1
 800082e:	0252      	lsls	r2, r2, #9
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_USART2_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USART2_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USART2_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000864:	0018      	movs	r0, r3
 8000866:	f002 f805 	bl	8002874 <HAL_UART_Init>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800086e:	f000 fa31 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000004c 	.word	0x2000004c
 800087c:	40004400 	.word	0x40004400

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b089      	sub	sp, #36	; 0x24
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	240c      	movs	r4, #12
 8000888:	193b      	adds	r3, r7, r4
 800088a:	0018      	movs	r0, r3
 800088c:	2314      	movs	r3, #20
 800088e:	001a      	movs	r2, r3
 8000890:	2100      	movs	r1, #0
 8000892:	f002 fc89 	bl	80031a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <MX_GPIO_Init+0x98>)
 8000898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800089a:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_GPIO_Init+0x98>)
 800089c:	2104      	movs	r1, #4
 800089e:	430a      	orrs	r2, r1
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008a2:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_GPIO_Init+0x98>)
 80008a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a6:	2204      	movs	r2, #4
 80008a8:	4013      	ands	r3, r2
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_GPIO_Init+0x98>)
 80008b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_GPIO_Init+0x98>)
 80008b4:	2101      	movs	r1, #1
 80008b6:	430a      	orrs	r2, r1
 80008b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_GPIO_Init+0x98>)
 80008bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008be:	2201      	movs	r2, #1
 80008c0:	4013      	ands	r3, r2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_GPIO_Init+0x98>)
 80008c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_GPIO_Init+0x98>)
 80008cc:	2102      	movs	r1, #2
 80008ce:	430a      	orrs	r2, r1
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_GPIO_Init+0x98>)
 80008d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d6:	2202      	movs	r2, #2
 80008d8:	4013      	ands	r3, r2
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_GPIO_Init+0x9c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	2108      	movs	r1, #8
 80008e4:	0018      	movs	r0, r3
 80008e6:	f000 fd69 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80008ea:	0021      	movs	r1, r4
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2208      	movs	r2, #8
 80008f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2201      	movs	r2, #1
 80008f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000904:	187b      	adds	r3, r7, r1
 8000906:	4a05      	ldr	r2, [pc, #20]	; (800091c <MX_GPIO_Init+0x9c>)
 8000908:	0019      	movs	r1, r3
 800090a:	0010      	movs	r0, r2
 800090c:	f000 fbe8 	bl	80010e0 <HAL_GPIO_Init>

}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	b009      	add	sp, #36	; 0x24
 8000916:	bd90      	pop	{r4, r7, pc}
 8000918:	40021000 	.word	0x40021000
 800091c:	50000400 	.word	0x50000400

08000920 <MAX_Set_Rtc>:
  * @brief Set the RTC to build time
  * @param None
  * @retval None
  */
static void MAX_Set_Rtc(void)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b08b      	sub	sp, #44	; 0x2c
 8000924:	af00      	add	r7, sp, #0
  // with the build_defs.h this sets the rtc to build time
  // it will lag the real time just by a few seconds

  RTC_TimeTypeDef time;
  time.Hours = BUILD_HOUR;
 8000926:	2332      	movs	r3, #50	; 0x32
 8000928:	2b3f      	cmp	r3, #63	; 0x3f
 800092a:	d00d      	beq.n	8000948 <MAX_Set_Rtc+0x28>
 800092c:	2332      	movs	r3, #50	; 0x32
 800092e:	3b30      	subs	r3, #48	; 0x30
 8000930:	b2db      	uxtb	r3, r3
 8000932:	1c1a      	adds	r2, r3, #0
 8000934:	0092      	lsls	r2, r2, #2
 8000936:	18d3      	adds	r3, r2, r3
 8000938:	18db      	adds	r3, r3, r3
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2233      	movs	r2, #51	; 0x33
 800093e:	189b      	adds	r3, r3, r2
 8000940:	b2db      	uxtb	r3, r3
 8000942:	3b30      	subs	r3, #48	; 0x30
 8000944:	b2da      	uxtb	r2, r3
 8000946:	e000      	b.n	800094a <MAX_Set_Rtc+0x2a>
 8000948:	2200      	movs	r2, #0
 800094a:	2308      	movs	r3, #8
 800094c:	18fb      	adds	r3, r7, r3
 800094e:	701a      	strb	r2, [r3, #0]
  time.Minutes = BUILD_MIN;
 8000950:	2332      	movs	r3, #50	; 0x32
 8000952:	2b3f      	cmp	r3, #63	; 0x3f
 8000954:	d00d      	beq.n	8000972 <MAX_Set_Rtc+0x52>
 8000956:	2332      	movs	r3, #50	; 0x32
 8000958:	3b30      	subs	r3, #48	; 0x30
 800095a:	b2db      	uxtb	r3, r3
 800095c:	1c1a      	adds	r2, r3, #0
 800095e:	0092      	lsls	r2, r2, #2
 8000960:	18d3      	adds	r3, r2, r3
 8000962:	18db      	adds	r3, r3, r3
 8000964:	b2db      	uxtb	r3, r3
 8000966:	2232      	movs	r2, #50	; 0x32
 8000968:	189b      	adds	r3, r3, r2
 800096a:	b2db      	uxtb	r3, r3
 800096c:	3b30      	subs	r3, #48	; 0x30
 800096e:	b2da      	uxtb	r2, r3
 8000970:	e000      	b.n	8000974 <MAX_Set_Rtc+0x54>
 8000972:	2200      	movs	r2, #0
 8000974:	2308      	movs	r3, #8
 8000976:	18fb      	adds	r3, r7, r3
 8000978:	705a      	strb	r2, [r3, #1]
  time.Seconds = BUILD_SEC;
 800097a:	2332      	movs	r3, #50	; 0x32
 800097c:	2b3f      	cmp	r3, #63	; 0x3f
 800097e:	d00d      	beq.n	800099c <MAX_Set_Rtc+0x7c>
 8000980:	2330      	movs	r3, #48	; 0x30
 8000982:	3b30      	subs	r3, #48	; 0x30
 8000984:	b2db      	uxtb	r3, r3
 8000986:	1c1a      	adds	r2, r3, #0
 8000988:	0092      	lsls	r2, r2, #2
 800098a:	18d3      	adds	r3, r2, r3
 800098c:	18db      	adds	r3, r3, r3
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2234      	movs	r2, #52	; 0x34
 8000992:	189b      	adds	r3, r3, r2
 8000994:	b2db      	uxtb	r3, r3
 8000996:	3b30      	subs	r3, #48	; 0x30
 8000998:	b2da      	uxtb	r2, r3
 800099a:	e000      	b.n	800099e <MAX_Set_Rtc+0x7e>
 800099c:	2200      	movs	r2, #0
 800099e:	2108      	movs	r1, #8
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	709a      	strb	r2, [r3, #2]
  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80009a4:	1879      	adds	r1, r7, r1
 80009a6:	4ba7      	ldr	r3, [pc, #668]	; (8000c44 <MAX_Set_Rtc+0x324>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	0018      	movs	r0, r3
 80009ac:	f001 fcb0 	bl	8002310 <HAL_RTC_SetTime>

  // same with the date
  RTC_DateTypeDef date;
  date.Year = BUILD_YEAR_SHORT;
 80009b0:	234a      	movs	r3, #74	; 0x4a
 80009b2:	2b3f      	cmp	r3, #63	; 0x3f
 80009b4:	d00d      	beq.n	80009d2 <MAX_Set_Rtc+0xb2>
 80009b6:	2332      	movs	r3, #50	; 0x32
 80009b8:	3b30      	subs	r3, #48	; 0x30
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	1c1a      	adds	r2, r3, #0
 80009be:	0092      	lsls	r2, r2, #2
 80009c0:	18d3      	adds	r3, r2, r3
 80009c2:	18db      	adds	r3, r3, r3
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	2232      	movs	r2, #50	; 0x32
 80009c8:	189b      	adds	r3, r3, r2
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	3b30      	subs	r3, #48	; 0x30
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	e000      	b.n	80009d4 <MAX_Set_Rtc+0xb4>
 80009d2:	2200      	movs	r2, #0
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	70da      	strb	r2, [r3, #3]
  date.Month = BUILD_MONTH;
 80009d8:	234a      	movs	r3, #74	; 0x4a
 80009da:	2b3f      	cmp	r3, #63	; 0x3f
 80009dc:	d100      	bne.n	80009e0 <MAX_Set_Rtc+0xc0>
 80009de:	e063      	b.n	8000aa8 <MAX_Set_Rtc+0x188>
 80009e0:	234a      	movs	r3, #74	; 0x4a
 80009e2:	2b4a      	cmp	r3, #74	; 0x4a
 80009e4:	d106      	bne.n	80009f4 <MAX_Set_Rtc+0xd4>
 80009e6:	2361      	movs	r3, #97	; 0x61
 80009e8:	2b61      	cmp	r3, #97	; 0x61
 80009ea:	d103      	bne.n	80009f4 <MAX_Set_Rtc+0xd4>
 80009ec:	236e      	movs	r3, #110	; 0x6e
 80009ee:	2b6e      	cmp	r3, #110	; 0x6e
 80009f0:	d100      	bne.n	80009f4 <MAX_Set_Rtc+0xd4>
 80009f2:	e057      	b.n	8000aa4 <MAX_Set_Rtc+0x184>
 80009f4:	234a      	movs	r3, #74	; 0x4a
 80009f6:	2b46      	cmp	r3, #70	; 0x46
 80009f8:	d100      	bne.n	80009fc <MAX_Set_Rtc+0xdc>
 80009fa:	e051      	b.n	8000aa0 <MAX_Set_Rtc+0x180>
 80009fc:	234a      	movs	r3, #74	; 0x4a
 80009fe:	2b4d      	cmp	r3, #77	; 0x4d
 8000a00:	d105      	bne.n	8000a0e <MAX_Set_Rtc+0xee>
 8000a02:	2361      	movs	r3, #97	; 0x61
 8000a04:	2b61      	cmp	r3, #97	; 0x61
 8000a06:	d102      	bne.n	8000a0e <MAX_Set_Rtc+0xee>
 8000a08:	236e      	movs	r3, #110	; 0x6e
 8000a0a:	2b72      	cmp	r3, #114	; 0x72
 8000a0c:	d046      	beq.n	8000a9c <MAX_Set_Rtc+0x17c>
 8000a0e:	234a      	movs	r3, #74	; 0x4a
 8000a10:	2b41      	cmp	r3, #65	; 0x41
 8000a12:	d102      	bne.n	8000a1a <MAX_Set_Rtc+0xfa>
 8000a14:	2361      	movs	r3, #97	; 0x61
 8000a16:	2b70      	cmp	r3, #112	; 0x70
 8000a18:	d03e      	beq.n	8000a98 <MAX_Set_Rtc+0x178>
 8000a1a:	234a      	movs	r3, #74	; 0x4a
 8000a1c:	2b4d      	cmp	r3, #77	; 0x4d
 8000a1e:	d105      	bne.n	8000a2c <MAX_Set_Rtc+0x10c>
 8000a20:	2361      	movs	r3, #97	; 0x61
 8000a22:	2b61      	cmp	r3, #97	; 0x61
 8000a24:	d102      	bne.n	8000a2c <MAX_Set_Rtc+0x10c>
 8000a26:	236e      	movs	r3, #110	; 0x6e
 8000a28:	2b79      	cmp	r3, #121	; 0x79
 8000a2a:	d033      	beq.n	8000a94 <MAX_Set_Rtc+0x174>
 8000a2c:	234a      	movs	r3, #74	; 0x4a
 8000a2e:	2b4a      	cmp	r3, #74	; 0x4a
 8000a30:	d105      	bne.n	8000a3e <MAX_Set_Rtc+0x11e>
 8000a32:	2361      	movs	r3, #97	; 0x61
 8000a34:	2b75      	cmp	r3, #117	; 0x75
 8000a36:	d102      	bne.n	8000a3e <MAX_Set_Rtc+0x11e>
 8000a38:	236e      	movs	r3, #110	; 0x6e
 8000a3a:	2b6e      	cmp	r3, #110	; 0x6e
 8000a3c:	d028      	beq.n	8000a90 <MAX_Set_Rtc+0x170>
 8000a3e:	234a      	movs	r3, #74	; 0x4a
 8000a40:	2b4a      	cmp	r3, #74	; 0x4a
 8000a42:	d105      	bne.n	8000a50 <MAX_Set_Rtc+0x130>
 8000a44:	2361      	movs	r3, #97	; 0x61
 8000a46:	2b75      	cmp	r3, #117	; 0x75
 8000a48:	d102      	bne.n	8000a50 <MAX_Set_Rtc+0x130>
 8000a4a:	236e      	movs	r3, #110	; 0x6e
 8000a4c:	2b6c      	cmp	r3, #108	; 0x6c
 8000a4e:	d01d      	beq.n	8000a8c <MAX_Set_Rtc+0x16c>
 8000a50:	234a      	movs	r3, #74	; 0x4a
 8000a52:	2b41      	cmp	r3, #65	; 0x41
 8000a54:	d102      	bne.n	8000a5c <MAX_Set_Rtc+0x13c>
 8000a56:	2361      	movs	r3, #97	; 0x61
 8000a58:	2b75      	cmp	r3, #117	; 0x75
 8000a5a:	d015      	beq.n	8000a88 <MAX_Set_Rtc+0x168>
 8000a5c:	234a      	movs	r3, #74	; 0x4a
 8000a5e:	2b53      	cmp	r3, #83	; 0x53
 8000a60:	d010      	beq.n	8000a84 <MAX_Set_Rtc+0x164>
 8000a62:	234a      	movs	r3, #74	; 0x4a
 8000a64:	2b4f      	cmp	r3, #79	; 0x4f
 8000a66:	d00b      	beq.n	8000a80 <MAX_Set_Rtc+0x160>
 8000a68:	234a      	movs	r3, #74	; 0x4a
 8000a6a:	2b4e      	cmp	r3, #78	; 0x4e
 8000a6c:	d006      	beq.n	8000a7c <MAX_Set_Rtc+0x15c>
 8000a6e:	234a      	movs	r3, #74	; 0x4a
 8000a70:	2b44      	cmp	r3, #68	; 0x44
 8000a72:	d101      	bne.n	8000a78 <MAX_Set_Rtc+0x158>
 8000a74:	230c      	movs	r3, #12
 8000a76:	e018      	b.n	8000aaa <MAX_Set_Rtc+0x18a>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	e016      	b.n	8000aaa <MAX_Set_Rtc+0x18a>
 8000a7c:	230b      	movs	r3, #11
 8000a7e:	e014      	b.n	8000aaa <MAX_Set_Rtc+0x18a>
 8000a80:	230a      	movs	r3, #10
 8000a82:	e012      	b.n	8000aaa <MAX_Set_Rtc+0x18a>
 8000a84:	2309      	movs	r3, #9
 8000a86:	e010      	b.n	8000aaa <MAX_Set_Rtc+0x18a>
 8000a88:	2308      	movs	r3, #8
 8000a8a:	e00e      	b.n	8000aaa <MAX_Set_Rtc+0x18a>
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	e00c      	b.n	8000aaa <MAX_Set_Rtc+0x18a>
 8000a90:	2306      	movs	r3, #6
 8000a92:	e00a      	b.n	8000aaa <MAX_Set_Rtc+0x18a>
 8000a94:	2305      	movs	r3, #5
 8000a96:	e008      	b.n	8000aaa <MAX_Set_Rtc+0x18a>
 8000a98:	2304      	movs	r3, #4
 8000a9a:	e006      	b.n	8000aaa <MAX_Set_Rtc+0x18a>
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	e004      	b.n	8000aaa <MAX_Set_Rtc+0x18a>
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	e002      	b.n	8000aaa <MAX_Set_Rtc+0x18a>
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e000      	b.n	8000aaa <MAX_Set_Rtc+0x18a>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	1d3a      	adds	r2, r7, #4
 8000aac:	7053      	strb	r3, [r2, #1]
  date.Date = BUILD_DAY;
 8000aae:	234a      	movs	r3, #74	; 0x4a
 8000ab0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ab2:	d012      	beq.n	8000ada <MAX_Set_Rtc+0x1ba>
 8000ab4:	2320      	movs	r3, #32
 8000ab6:	2b2f      	cmp	r3, #47	; 0x2f
 8000ab8:	d908      	bls.n	8000acc <MAX_Set_Rtc+0x1ac>
 8000aba:	2320      	movs	r3, #32
 8000abc:	3b30      	subs	r3, #48	; 0x30
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	1c1a      	adds	r2, r3, #0
 8000ac2:	0092      	lsls	r2, r2, #2
 8000ac4:	18d3      	adds	r3, r2, r3
 8000ac6:	18db      	adds	r3, r3, r3
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	e000      	b.n	8000ace <MAX_Set_Rtc+0x1ae>
 8000acc:	2300      	movs	r3, #0
 8000ace:	2233      	movs	r2, #51	; 0x33
 8000ad0:	189b      	adds	r3, r3, r2
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	3b30      	subs	r3, #48	; 0x30
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	e000      	b.n	8000adc <MAX_Set_Rtc+0x1bc>
 8000ada:	2200      	movs	r2, #0
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	709a      	strb	r2, [r3, #2]
  // the weekday is calculated (meh)
  int year = BUILD_YEAR;
 8000ae0:	234a      	movs	r3, #74	; 0x4a
 8000ae2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ae4:	d01a      	beq.n	8000b1c <MAX_Set_Rtc+0x1fc>
 8000ae6:	2332      	movs	r3, #50	; 0x32
 8000ae8:	3b30      	subs	r3, #48	; 0x30
 8000aea:	001a      	movs	r2, r3
 8000aec:	0013      	movs	r3, r2
 8000aee:	015b      	lsls	r3, r3, #5
 8000af0:	1a9b      	subs	r3, r3, r2
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	189b      	adds	r3, r3, r2
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	0019      	movs	r1, r3
 8000afa:	2330      	movs	r3, #48	; 0x30
 8000afc:	3b30      	subs	r3, #48	; 0x30
 8000afe:	2264      	movs	r2, #100	; 0x64
 8000b00:	4353      	muls	r3, r2
 8000b02:	18c9      	adds	r1, r1, r3
 8000b04:	2332      	movs	r3, #50	; 0x32
 8000b06:	3b30      	subs	r3, #48	; 0x30
 8000b08:	001a      	movs	r2, r3
 8000b0a:	0013      	movs	r3, r2
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	189b      	adds	r3, r3, r2
 8000b10:	005b      	lsls	r3, r3, #1
 8000b12:	18ca      	adds	r2, r1, r3
 8000b14:	2332      	movs	r3, #50	; 0x32
 8000b16:	3b30      	subs	r3, #48	; 0x30
 8000b18:	18d3      	adds	r3, r2, r3
 8000b1a:	e000      	b.n	8000b1e <MAX_Set_Rtc+0x1fe>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
  int month = BUILD_MONTH;
 8000b20:	234a      	movs	r3, #74	; 0x4a
 8000b22:	2b3f      	cmp	r3, #63	; 0x3f
 8000b24:	d100      	bne.n	8000b28 <MAX_Set_Rtc+0x208>
 8000b26:	e069      	b.n	8000bfc <MAX_Set_Rtc+0x2dc>
 8000b28:	234a      	movs	r3, #74	; 0x4a
 8000b2a:	2b4a      	cmp	r3, #74	; 0x4a
 8000b2c:	d106      	bne.n	8000b3c <MAX_Set_Rtc+0x21c>
 8000b2e:	2361      	movs	r3, #97	; 0x61
 8000b30:	2b61      	cmp	r3, #97	; 0x61
 8000b32:	d103      	bne.n	8000b3c <MAX_Set_Rtc+0x21c>
 8000b34:	236e      	movs	r3, #110	; 0x6e
 8000b36:	2b6e      	cmp	r3, #110	; 0x6e
 8000b38:	d100      	bne.n	8000b3c <MAX_Set_Rtc+0x21c>
 8000b3a:	e05d      	b.n	8000bf8 <MAX_Set_Rtc+0x2d8>
 8000b3c:	234a      	movs	r3, #74	; 0x4a
 8000b3e:	2b46      	cmp	r3, #70	; 0x46
 8000b40:	d100      	bne.n	8000b44 <MAX_Set_Rtc+0x224>
 8000b42:	e056      	b.n	8000bf2 <MAX_Set_Rtc+0x2d2>
 8000b44:	234a      	movs	r3, #74	; 0x4a
 8000b46:	2b4d      	cmp	r3, #77	; 0x4d
 8000b48:	d105      	bne.n	8000b56 <MAX_Set_Rtc+0x236>
 8000b4a:	2361      	movs	r3, #97	; 0x61
 8000b4c:	2b61      	cmp	r3, #97	; 0x61
 8000b4e:	d102      	bne.n	8000b56 <MAX_Set_Rtc+0x236>
 8000b50:	236e      	movs	r3, #110	; 0x6e
 8000b52:	2b72      	cmp	r3, #114	; 0x72
 8000b54:	d04b      	beq.n	8000bee <MAX_Set_Rtc+0x2ce>
 8000b56:	234a      	movs	r3, #74	; 0x4a
 8000b58:	2b41      	cmp	r3, #65	; 0x41
 8000b5a:	d102      	bne.n	8000b62 <MAX_Set_Rtc+0x242>
 8000b5c:	2361      	movs	r3, #97	; 0x61
 8000b5e:	2b70      	cmp	r3, #112	; 0x70
 8000b60:	d042      	beq.n	8000be8 <MAX_Set_Rtc+0x2c8>
 8000b62:	234a      	movs	r3, #74	; 0x4a
 8000b64:	2b4d      	cmp	r3, #77	; 0x4d
 8000b66:	d105      	bne.n	8000b74 <MAX_Set_Rtc+0x254>
 8000b68:	2361      	movs	r3, #97	; 0x61
 8000b6a:	2b61      	cmp	r3, #97	; 0x61
 8000b6c:	d102      	bne.n	8000b74 <MAX_Set_Rtc+0x254>
 8000b6e:	236e      	movs	r3, #110	; 0x6e
 8000b70:	2b79      	cmp	r3, #121	; 0x79
 8000b72:	d036      	beq.n	8000be2 <MAX_Set_Rtc+0x2c2>
 8000b74:	234a      	movs	r3, #74	; 0x4a
 8000b76:	2b4a      	cmp	r3, #74	; 0x4a
 8000b78:	d105      	bne.n	8000b86 <MAX_Set_Rtc+0x266>
 8000b7a:	2361      	movs	r3, #97	; 0x61
 8000b7c:	2b75      	cmp	r3, #117	; 0x75
 8000b7e:	d102      	bne.n	8000b86 <MAX_Set_Rtc+0x266>
 8000b80:	236e      	movs	r3, #110	; 0x6e
 8000b82:	2b6e      	cmp	r3, #110	; 0x6e
 8000b84:	d02a      	beq.n	8000bdc <MAX_Set_Rtc+0x2bc>
 8000b86:	234a      	movs	r3, #74	; 0x4a
 8000b88:	2b4a      	cmp	r3, #74	; 0x4a
 8000b8a:	d105      	bne.n	8000b98 <MAX_Set_Rtc+0x278>
 8000b8c:	2361      	movs	r3, #97	; 0x61
 8000b8e:	2b75      	cmp	r3, #117	; 0x75
 8000b90:	d102      	bne.n	8000b98 <MAX_Set_Rtc+0x278>
 8000b92:	236e      	movs	r3, #110	; 0x6e
 8000b94:	2b6c      	cmp	r3, #108	; 0x6c
 8000b96:	d01e      	beq.n	8000bd6 <MAX_Set_Rtc+0x2b6>
 8000b98:	234a      	movs	r3, #74	; 0x4a
 8000b9a:	2b41      	cmp	r3, #65	; 0x41
 8000b9c:	d102      	bne.n	8000ba4 <MAX_Set_Rtc+0x284>
 8000b9e:	2361      	movs	r3, #97	; 0x61
 8000ba0:	2b75      	cmp	r3, #117	; 0x75
 8000ba2:	d015      	beq.n	8000bd0 <MAX_Set_Rtc+0x2b0>
 8000ba4:	234a      	movs	r3, #74	; 0x4a
 8000ba6:	2b53      	cmp	r3, #83	; 0x53
 8000ba8:	d010      	beq.n	8000bcc <MAX_Set_Rtc+0x2ac>
 8000baa:	234a      	movs	r3, #74	; 0x4a
 8000bac:	2b4f      	cmp	r3, #79	; 0x4f
 8000bae:	d00b      	beq.n	8000bc8 <MAX_Set_Rtc+0x2a8>
 8000bb0:	234a      	movs	r3, #74	; 0x4a
 8000bb2:	2b4e      	cmp	r3, #78	; 0x4e
 8000bb4:	d006      	beq.n	8000bc4 <MAX_Set_Rtc+0x2a4>
 8000bb6:	234a      	movs	r3, #74	; 0x4a
 8000bb8:	2b44      	cmp	r3, #68	; 0x44
 8000bba:	d101      	bne.n	8000bc0 <MAX_Set_Rtc+0x2a0>
 8000bbc:	230c      	movs	r3, #12
 8000bbe:	e009      	b.n	8000bd4 <MAX_Set_Rtc+0x2b4>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	e007      	b.n	8000bd4 <MAX_Set_Rtc+0x2b4>
 8000bc4:	230b      	movs	r3, #11
 8000bc6:	e005      	b.n	8000bd4 <MAX_Set_Rtc+0x2b4>
 8000bc8:	230a      	movs	r3, #10
 8000bca:	e003      	b.n	8000bd4 <MAX_Set_Rtc+0x2b4>
 8000bcc:	2309      	movs	r3, #9
 8000bce:	e001      	b.n	8000bd4 <MAX_Set_Rtc+0x2b4>
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	e002      	b.n	8000bda <MAX_Set_Rtc+0x2ba>
 8000bd4:	e001      	b.n	8000bda <MAX_Set_Rtc+0x2ba>
 8000bd6:	2307      	movs	r3, #7
 8000bd8:	e002      	b.n	8000be0 <MAX_Set_Rtc+0x2c0>
 8000bda:	e001      	b.n	8000be0 <MAX_Set_Rtc+0x2c0>
 8000bdc:	2306      	movs	r3, #6
 8000bde:	e002      	b.n	8000be6 <MAX_Set_Rtc+0x2c6>
 8000be0:	e001      	b.n	8000be6 <MAX_Set_Rtc+0x2c6>
 8000be2:	2305      	movs	r3, #5
 8000be4:	e002      	b.n	8000bec <MAX_Set_Rtc+0x2cc>
 8000be6:	e001      	b.n	8000bec <MAX_Set_Rtc+0x2cc>
 8000be8:	2304      	movs	r3, #4
 8000bea:	e004      	b.n	8000bf6 <MAX_Set_Rtc+0x2d6>
 8000bec:	e003      	b.n	8000bf6 <MAX_Set_Rtc+0x2d6>
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e005      	b.n	8000bfe <MAX_Set_Rtc+0x2de>
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	e003      	b.n	8000bfe <MAX_Set_Rtc+0x2de>
 8000bf6:	e002      	b.n	8000bfe <MAX_Set_Rtc+0x2de>
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e000      	b.n	8000bfe <MAX_Set_Rtc+0x2de>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  int day = BUILD_DAY;
 8000c00:	234a      	movs	r3, #74	; 0x4a
 8000c02:	2b3f      	cmp	r3, #63	; 0x3f
 8000c04:	d010      	beq.n	8000c28 <MAX_Set_Rtc+0x308>
 8000c06:	2320      	movs	r3, #32
 8000c08:	2b2f      	cmp	r3, #47	; 0x2f
 8000c0a:	d908      	bls.n	8000c1e <MAX_Set_Rtc+0x2fe>
 8000c0c:	2320      	movs	r3, #32
 8000c0e:	3b30      	subs	r3, #48	; 0x30
 8000c10:	001a      	movs	r2, r3
 8000c12:	0013      	movs	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	189b      	adds	r3, r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	001a      	movs	r2, r3
 8000c1c:	e000      	b.n	8000c20 <MAX_Set_Rtc+0x300>
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2333      	movs	r3, #51	; 0x33
 8000c22:	3b30      	subs	r3, #48	; 0x30
 8000c24:	18d3      	adds	r3, r2, r3
 8000c26:	e000      	b.n	8000c2a <MAX_Set_Rtc+0x30a>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  if (month < 3) {
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	2b02      	cmp	r3, #2
 8000c30:	dc0a      	bgt.n	8000c48 <MAX_Set_Rtc+0x328>
    day = day + year;
 8000c32:	6a3a      	ldr	r2, [r7, #32]
 8000c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c36:	18d3      	adds	r3, r2, r3
 8000c38:	623b      	str	r3, [r7, #32]
    year--;
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c40:	e007      	b.n	8000c52 <MAX_Set_Rtc+0x332>
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	20000028 	.word	0x20000028
  } else {
    day = day + year - 2;
 8000c48:	6a3a      	ldr	r2, [r7, #32]
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4c:	18d3      	adds	r3, r2, r3
 8000c4e:	3b02      	subs	r3, #2
 8000c50:	623b      	str	r3, [r7, #32]
  }
  date.WeekDay = ((int)(23 * month/9) + day + 4 + (int)(year/4) - (int)(year/100) + (int)(year/400)) % 7;
 8000c52:	69fa      	ldr	r2, [r7, #28]
 8000c54:	0013      	movs	r3, r2
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	189b      	adds	r3, r3, r2
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	1a9b      	subs	r3, r3, r2
 8000c5e:	2109      	movs	r1, #9
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff fadb 	bl	800021c <__divsi3>
 8000c66:	0003      	movs	r3, r0
 8000c68:	001a      	movs	r2, r3
 8000c6a:	6a3b      	ldr	r3, [r7, #32]
 8000c6c:	18d3      	adds	r3, r2, r3
 8000c6e:	1d1a      	adds	r2, r3, #4
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	da00      	bge.n	8000c78 <MAX_Set_Rtc+0x358>
 8000c76:	3303      	adds	r3, #3
 8000c78:	109b      	asrs	r3, r3, #2
 8000c7a:	18d4      	adds	r4, r2, r3
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7e:	2264      	movs	r2, #100	; 0x64
 8000c80:	4251      	negs	r1, r2
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff faca 	bl	800021c <__divsi3>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	18e4      	adds	r4, r4, r3
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	22c8      	movs	r2, #200	; 0xc8
 8000c90:	0051      	lsls	r1, r2, #1
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff fac2 	bl	800021c <__divsi3>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	18e3      	adds	r3, r4, r3
 8000c9c:	2107      	movs	r1, #7
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff fba2 	bl	80003e8 <__aeabi_idivmod>
 8000ca4:	000b      	movs	r3, r1
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	701a      	strb	r2, [r3, #0]
  // correct for sunday
  // 1 = monday, 7 = sunday
  if (date.WeekDay == 0) {
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <MAX_Set_Rtc+0x39a>
    date.WeekDay = 7;
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	701a      	strb	r2, [r3, #0]
  }
  HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000cba:	1d39      	adds	r1, r7, #4
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <MAX_Set_Rtc+0x3b0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f001 fc45 	bl	8002550 <HAL_RTC_SetDate>
}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b00b      	add	sp, #44	; 0x2c
 8000ccc:	bd90      	pop	{r4, r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	20000028 	.word	0x20000028

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <Error_Handler+0x8>
	...

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <HAL_MspInit+0x24>)
 8000ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_MspInit+0x24>)
 8000cea:	2101      	movs	r1, #1
 8000cec:	430a      	orrs	r2, r1
 8000cee:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <HAL_MspInit+0x24>)
 8000cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_MspInit+0x24>)
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	0549      	lsls	r1, r1, #21
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40021000 	.word	0x40021000

08000d08 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a06      	ldr	r2, [pc, #24]	; (8000d30 <HAL_RTC_MspInit+0x28>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d106      	bne.n	8000d28 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_RTC_MspInit+0x2c>)
 8000d1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d1e:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_RTC_MspInit+0x2c>)
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	02c9      	lsls	r1, r1, #11
 8000d24:	430a      	orrs	r2, r1
 8000d26:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b002      	add	sp, #8
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40002800 	.word	0x40002800
 8000d34:	40021000 	.word	0x40021000

08000d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d38:	b590      	push	{r4, r7, lr}
 8000d3a:	b089      	sub	sp, #36	; 0x24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	240c      	movs	r4, #12
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	0018      	movs	r0, r3
 8000d46:	2314      	movs	r3, #20
 8000d48:	001a      	movs	r2, r3
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	f002 fa2c 	bl	80031a8 <memset>
  if(huart->Instance==USART2)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a18      	ldr	r2, [pc, #96]	; (8000db8 <HAL_UART_MspInit+0x80>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d129      	bne.n	8000dae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_UART_MspInit+0x84>)
 8000d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_UART_MspInit+0x84>)
 8000d60:	2180      	movs	r1, #128	; 0x80
 8000d62:	0289      	lsls	r1, r1, #10
 8000d64:	430a      	orrs	r2, r1
 8000d66:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_UART_MspInit+0x84>)
 8000d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_UART_MspInit+0x84>)
 8000d6e:	2101      	movs	r1, #1
 8000d70:	430a      	orrs	r2, r1
 8000d72:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <HAL_UART_MspInit+0x84>)
 8000d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000d80:	0021      	movs	r1, r4
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2202      	movs	r2, #2
 8000d8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2203      	movs	r2, #3
 8000d98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	187a      	adds	r2, r7, r1
 8000da2:	23a0      	movs	r3, #160	; 0xa0
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f000 f999 	bl	80010e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b009      	add	sp, #36	; 0x24
 8000db4:	bd90      	pop	{r4, r7, pc}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	40004400 	.word	0x40004400
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	00008004 	.word	0x00008004

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f000 f886 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	46c0      	nop			; (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000dfc:	480d      	ldr	r0, [pc, #52]	; (8000e34 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000dfe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e02:	490e      	ldr	r1, [pc, #56]	; (8000e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <LoopForever+0xe>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e18:	4c0b      	ldr	r4, [pc, #44]	; (8000e48 <LoopForever+0x16>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e26:	f7ff ffe4 	bl	8000df2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f002 f999 	bl	8003160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2e:	f7ff fc1f 	bl	8000670 <main>

08000e32 <LoopForever>:

LoopForever:
    b LoopForever
 8000e32:	e7fe      	b.n	8000e32 <LoopForever>
   ldr   r0, =_estack
 8000e34:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e40:	0800324c 	.word	0x0800324c
  ldr r2, =_sbss
 8000e44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e48:	200000d4 	.word	0x200000d4

08000e4c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_COMP_IRQHandler>
	...

08000e50 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_Init+0x3c>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_Init+0x3c>)
 8000e62:	2140      	movs	r1, #64	; 0x40
 8000e64:	430a      	orrs	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f000 f811 	bl	8000e90 <HAL_InitTick>
 8000e6e:	1e03      	subs	r3, r0, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	e001      	b.n	8000e7e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e7a:	f7ff ff31 	bl	8000ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	781b      	ldrb	r3, [r3, #0]
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b002      	add	sp, #8
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	40022000 	.word	0x40022000

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b590      	push	{r4, r7, lr}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_InitTick+0x5c>)
 8000e9a:	681c      	ldr	r4, [r3, #0]
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_InitTick+0x60>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	23fa      	movs	r3, #250	; 0xfa
 8000ea4:	0098      	lsls	r0, r3, #2
 8000ea6:	f7ff f92f 	bl	8000108 <__udivsi3>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	0019      	movs	r1, r3
 8000eae:	0020      	movs	r0, r4
 8000eb0:	f7ff f92a 	bl	8000108 <__udivsi3>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f000 f905 	bl	80010c6 <HAL_SYSTICK_Config>
 8000ebc:	1e03      	subs	r3, r0, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e00f      	b.n	8000ee4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d80b      	bhi.n	8000ee2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	425b      	negs	r3, r3
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f000 f8e2 	bl	800109c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_InitTick+0x64>)
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b003      	add	sp, #12
 8000eea:	bd90      	pop	{r4, r7, pc}
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_IncTick+0x1c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	001a      	movs	r2, r3
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_IncTick+0x20>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	18d2      	adds	r2, r2, r3
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_IncTick+0x20>)
 8000f0a:	601a      	str	r2, [r3, #0]
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	20000008 	.word	0x20000008
 8000f18:	200000d0 	.word	0x200000d0

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b02      	ldr	r3, [pc, #8]	; (8000f2c <HAL_GetTick+0x10>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	0018      	movs	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	200000d0 	.word	0x200000d0

08000f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff fff0 	bl	8000f1c <HAL_GetTick>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3301      	adds	r3, #1
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_Delay+0x44>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	001a      	movs	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	189b      	adds	r3, r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	f7ff ffe0 	bl	8000f1c <HAL_GetTick>
 8000f5c:	0002      	movs	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f7      	bhi.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b004      	add	sp, #16
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	20000008 	.word	0x20000008

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	0002      	movs	r2, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f8c:	d828      	bhi.n	8000fe0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f8e:	4a2f      	ldr	r2, [pc, #188]	; (800104c <__NVIC_SetPriority+0xd4>)
 8000f90:	1dfb      	adds	r3, r7, #7
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	b25b      	sxtb	r3, r3
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	33c0      	adds	r3, #192	; 0xc0
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	589b      	ldr	r3, [r3, r2]
 8000f9e:	1dfa      	adds	r2, r7, #7
 8000fa0:	7812      	ldrb	r2, [r2, #0]
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	400a      	ands	r2, r1
 8000fa8:	00d2      	lsls	r2, r2, #3
 8000faa:	21ff      	movs	r1, #255	; 0xff
 8000fac:	4091      	lsls	r1, r2
 8000fae:	000a      	movs	r2, r1
 8000fb0:	43d2      	mvns	r2, r2
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	019b      	lsls	r3, r3, #6
 8000fba:	22ff      	movs	r2, #255	; 0xff
 8000fbc:	401a      	ands	r2, r3
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	4003      	ands	r3, r0
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fcc:	481f      	ldr	r0, [pc, #124]	; (800104c <__NVIC_SetPriority+0xd4>)
 8000fce:	1dfb      	adds	r3, r7, #7
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	33c0      	adds	r3, #192	; 0xc0
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fde:	e031      	b.n	8001044 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <__NVIC_SetPriority+0xd8>)
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	0019      	movs	r1, r3
 8000fe8:	230f      	movs	r3, #15
 8000fea:	400b      	ands	r3, r1
 8000fec:	3b08      	subs	r3, #8
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3306      	adds	r3, #6
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	18d3      	adds	r3, r2, r3
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	1dfa      	adds	r2, r7, #7
 8000ffc:	7812      	ldrb	r2, [r2, #0]
 8000ffe:	0011      	movs	r1, r2
 8001000:	2203      	movs	r2, #3
 8001002:	400a      	ands	r2, r1
 8001004:	00d2      	lsls	r2, r2, #3
 8001006:	21ff      	movs	r1, #255	; 0xff
 8001008:	4091      	lsls	r1, r2
 800100a:	000a      	movs	r2, r1
 800100c:	43d2      	mvns	r2, r2
 800100e:	401a      	ands	r2, r3
 8001010:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	019b      	lsls	r3, r3, #6
 8001016:	22ff      	movs	r2, #255	; 0xff
 8001018:	401a      	ands	r2, r3
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	0018      	movs	r0, r3
 8001020:	2303      	movs	r3, #3
 8001022:	4003      	ands	r3, r0
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001028:	4809      	ldr	r0, [pc, #36]	; (8001050 <__NVIC_SetPriority+0xd8>)
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	001c      	movs	r4, r3
 8001030:	230f      	movs	r3, #15
 8001032:	4023      	ands	r3, r4
 8001034:	3b08      	subs	r3, #8
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	430a      	orrs	r2, r1
 800103a:	3306      	adds	r3, #6
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	18c3      	adds	r3, r0, r3
 8001040:	3304      	adds	r3, #4
 8001042:	601a      	str	r2, [r3, #0]
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b003      	add	sp, #12
 800104a:	bd90      	pop	{r4, r7, pc}
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	1e5a      	subs	r2, r3, #1
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	045b      	lsls	r3, r3, #17
 8001064:	429a      	cmp	r2, r3
 8001066:	d301      	bcc.n	800106c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001068:	2301      	movs	r3, #1
 800106a:	e010      	b.n	800108e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <SysTick_Config+0x44>)
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	3a01      	subs	r2, #1
 8001072:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001074:	2301      	movs	r3, #1
 8001076:	425b      	negs	r3, r3
 8001078:	2103      	movs	r1, #3
 800107a:	0018      	movs	r0, r3
 800107c:	f7ff ff7c 	bl	8000f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <SysTick_Config+0x44>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <SysTick_Config+0x44>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	0018      	movs	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	b002      	add	sp, #8
 8001094:	bd80      	pop	{r7, pc}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	210f      	movs	r1, #15
 80010a8:	187b      	adds	r3, r7, r1
 80010aa:	1c02      	adds	r2, r0, #0
 80010ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	0011      	movs	r1, r2
 80010b8:	0018      	movs	r0, r3
 80010ba:	f7ff ff5d 	bl	8000f78 <__NVIC_SetPriority>
}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b004      	add	sp, #16
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff ffbf 	bl	8001054 <SysTick_Config>
 80010d6:	0003      	movs	r3, r0
}
 80010d8:	0018      	movs	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	b002      	add	sp, #8
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80010f6:	e149      	b.n	800138c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2101      	movs	r1, #1
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	4091      	lsls	r1, r2
 8001102:	000a      	movs	r2, r1
 8001104:	4013      	ands	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d100      	bne.n	8001110 <HAL_GPIO_Init+0x30>
 800110e:	e13a      	b.n	8001386 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2203      	movs	r2, #3
 8001116:	4013      	ands	r3, r2
 8001118:	2b01      	cmp	r3, #1
 800111a:	d005      	beq.n	8001128 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2203      	movs	r2, #3
 8001122:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001124:	2b02      	cmp	r3, #2
 8001126:	d130      	bne.n	800118a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	409a      	lsls	r2, r3
 8001136:	0013      	movs	r3, r2
 8001138:	43da      	mvns	r2, r3
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	409a      	lsls	r2, r3
 800114a:	0013      	movs	r3, r2
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800115e:	2201      	movs	r2, #1
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
 8001164:	0013      	movs	r3, r2
 8001166:	43da      	mvns	r2, r3
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	091b      	lsrs	r3, r3, #4
 8001174:	2201      	movs	r2, #1
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2203      	movs	r2, #3
 8001190:	4013      	ands	r3, r2
 8001192:	2b03      	cmp	r3, #3
 8001194:	d017      	beq.n	80011c6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	2203      	movs	r2, #3
 80011a2:	409a      	lsls	r2, r3
 80011a4:	0013      	movs	r3, r2
 80011a6:	43da      	mvns	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2203      	movs	r2, #3
 80011cc:	4013      	ands	r3, r2
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d123      	bne.n	800121a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	08da      	lsrs	r2, r3, #3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3208      	adds	r2, #8
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	58d3      	ldr	r3, [r2, r3]
 80011de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	2207      	movs	r2, #7
 80011e4:	4013      	ands	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	409a      	lsls	r2, r3
 80011ec:	0013      	movs	r3, r2
 80011ee:	43da      	mvns	r2, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	691a      	ldr	r2, [r3, #16]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	2107      	movs	r1, #7
 80011fe:	400b      	ands	r3, r1
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	409a      	lsls	r2, r3
 8001204:	0013      	movs	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	08da      	lsrs	r2, r3, #3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3208      	adds	r2, #8
 8001214:	0092      	lsls	r2, r2, #2
 8001216:	6939      	ldr	r1, [r7, #16]
 8001218:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	43da      	mvns	r2, r3
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2203      	movs	r2, #3
 8001238:	401a      	ands	r2, r3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	409a      	lsls	r2, r3
 8001240:	0013      	movs	r3, r2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	23c0      	movs	r3, #192	; 0xc0
 8001254:	029b      	lsls	r3, r3, #10
 8001256:	4013      	ands	r3, r2
 8001258:	d100      	bne.n	800125c <HAL_GPIO_Init+0x17c>
 800125a:	e094      	b.n	8001386 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125c:	4b51      	ldr	r3, [pc, #324]	; (80013a4 <HAL_GPIO_Init+0x2c4>)
 800125e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001260:	4b50      	ldr	r3, [pc, #320]	; (80013a4 <HAL_GPIO_Init+0x2c4>)
 8001262:	2101      	movs	r1, #1
 8001264:	430a      	orrs	r2, r1
 8001266:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001268:	4a4f      	ldr	r2, [pc, #316]	; (80013a8 <HAL_GPIO_Init+0x2c8>)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	589b      	ldr	r3, [r3, r2]
 8001274:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2203      	movs	r2, #3
 800127a:	4013      	ands	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	409a      	lsls	r2, r3
 8001282:	0013      	movs	r3, r2
 8001284:	43da      	mvns	r2, r3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	23a0      	movs	r3, #160	; 0xa0
 8001290:	05db      	lsls	r3, r3, #23
 8001292:	429a      	cmp	r2, r3
 8001294:	d013      	beq.n	80012be <HAL_GPIO_Init+0x1de>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a44      	ldr	r2, [pc, #272]	; (80013ac <HAL_GPIO_Init+0x2cc>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d00d      	beq.n	80012ba <HAL_GPIO_Init+0x1da>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a43      	ldr	r2, [pc, #268]	; (80013b0 <HAL_GPIO_Init+0x2d0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d007      	beq.n	80012b6 <HAL_GPIO_Init+0x1d6>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a42      	ldr	r2, [pc, #264]	; (80013b4 <HAL_GPIO_Init+0x2d4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d101      	bne.n	80012b2 <HAL_GPIO_Init+0x1d2>
 80012ae:	2305      	movs	r3, #5
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x1e0>
 80012b2:	2306      	movs	r3, #6
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x1e0>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x1e0>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x1e0>
 80012be:	2300      	movs	r3, #0
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	2103      	movs	r1, #3
 80012c4:	400a      	ands	r2, r1
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4093      	lsls	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012d0:	4935      	ldr	r1, [pc, #212]	; (80013a8 <HAL_GPIO_Init+0x2c8>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012de:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <HAL_GPIO_Init+0x2d8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43da      	mvns	r2, r3
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	025b      	lsls	r3, r3, #9
 80012f6:	4013      	ands	r3, r2
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001302:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <HAL_GPIO_Init+0x2d8>)
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001308:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <HAL_GPIO_Init+0x2d8>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43da      	mvns	r2, r3
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	029b      	lsls	r3, r3, #10
 8001320:	4013      	ands	r3, r2
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <HAL_GPIO_Init+0x2d8>)
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001332:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <HAL_GPIO_Init+0x2d8>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43da      	mvns	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	035b      	lsls	r3, r3, #13
 800134a:	4013      	ands	r3, r2
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_GPIO_Init+0x2d8>)
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_GPIO_Init+0x2d8>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	43da      	mvns	r2, r3
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	039b      	lsls	r3, r3, #14
 8001374:	4013      	ands	r3, r2
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001380:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <HAL_GPIO_Init+0x2d8>)
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	40da      	lsrs	r2, r3
 8001394:	1e13      	subs	r3, r2, #0
 8001396:	d000      	beq.n	800139a <HAL_GPIO_Init+0x2ba>
 8001398:	e6ae      	b.n	80010f8 <HAL_GPIO_Init+0x18>
  }
}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	46c0      	nop			; (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b006      	add	sp, #24
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010000 	.word	0x40010000
 80013ac:	50000400 	.word	0x50000400
 80013b0:	50000800 	.word	0x50000800
 80013b4:	50001c00 	.word	0x50001c00
 80013b8:	40010400 	.word	0x40010400

080013bc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	0008      	movs	r0, r1
 80013c6:	0011      	movs	r1, r2
 80013c8:	1cbb      	adds	r3, r7, #2
 80013ca:	1c02      	adds	r2, r0, #0
 80013cc:	801a      	strh	r2, [r3, #0]
 80013ce:	1c7b      	adds	r3, r7, #1
 80013d0:	1c0a      	adds	r2, r1, #0
 80013d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d4:	1c7b      	adds	r3, r7, #1
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d004      	beq.n	80013e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013dc:	1cbb      	adds	r3, r7, #2
 80013de:	881a      	ldrh	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80013e4:	e003      	b.n	80013ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80013e6:	1cbb      	adds	r3, r7, #2
 80013e8:	881a      	ldrh	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	000a      	movs	r2, r1
 8001400:	1cbb      	adds	r3, r7, #2
 8001402:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800140a:	1cbb      	adds	r3, r7, #2
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	4013      	ands	r3, r2
 8001412:	041a      	lsls	r2, r3, #16
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43db      	mvns	r3, r3
 8001418:	1cb9      	adds	r1, r7, #2
 800141a:	8809      	ldrh	r1, [r1, #0]
 800141c:	400b      	ands	r3, r1
 800141e:	431a      	orrs	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	619a      	str	r2, [r3, #24]
}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	b004      	add	sp, #16
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001436:	2180      	movs	r1, #128	; 0x80
 8001438:	0049      	lsls	r1, r1, #1
 800143a:	430a      	orrs	r2, r1
 800143c:	601a      	str	r2, [r3, #0]
}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40007000 	.word	0x40007000

08001448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b08a      	sub	sp, #40	; 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	f000 fb6c 	bl	8001b34 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800145c:	4bc8      	ldr	r3, [pc, #800]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	220c      	movs	r2, #12
 8001462:	4013      	ands	r3, r2
 8001464:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001466:	4bc6      	ldr	r3, [pc, #792]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	025b      	lsls	r3, r3, #9
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2201      	movs	r2, #1
 8001478:	4013      	ands	r3, r2
 800147a:	d100      	bne.n	800147e <HAL_RCC_OscConfig+0x36>
 800147c:	e07d      	b.n	800157a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	2b08      	cmp	r3, #8
 8001482:	d007      	beq.n	8001494 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	2b0c      	cmp	r3, #12
 8001488:	d112      	bne.n	80014b0 <HAL_RCC_OscConfig+0x68>
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	025b      	lsls	r3, r3, #9
 8001490:	429a      	cmp	r2, r3
 8001492:	d10d      	bne.n	80014b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001494:	4bba      	ldr	r3, [pc, #744]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	2380      	movs	r3, #128	; 0x80
 800149a:	029b      	lsls	r3, r3, #10
 800149c:	4013      	ands	r3, r2
 800149e:	d100      	bne.n	80014a2 <HAL_RCC_OscConfig+0x5a>
 80014a0:	e06a      	b.n	8001578 <HAL_RCC_OscConfig+0x130>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d166      	bne.n	8001578 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	f000 fb42 	bl	8001b34 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	025b      	lsls	r3, r3, #9
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d107      	bne.n	80014cc <HAL_RCC_OscConfig+0x84>
 80014bc:	4bb0      	ldr	r3, [pc, #704]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4baf      	ldr	r3, [pc, #700]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	0249      	lsls	r1, r1, #9
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	e027      	b.n	800151c <HAL_RCC_OscConfig+0xd4>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	23a0      	movs	r3, #160	; 0xa0
 80014d2:	02db      	lsls	r3, r3, #11
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d10e      	bne.n	80014f6 <HAL_RCC_OscConfig+0xae>
 80014d8:	4ba9      	ldr	r3, [pc, #676]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4ba8      	ldr	r3, [pc, #672]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80014de:	2180      	movs	r1, #128	; 0x80
 80014e0:	02c9      	lsls	r1, r1, #11
 80014e2:	430a      	orrs	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	4ba6      	ldr	r3, [pc, #664]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4ba5      	ldr	r3, [pc, #660]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80014ec:	2180      	movs	r1, #128	; 0x80
 80014ee:	0249      	lsls	r1, r1, #9
 80014f0:	430a      	orrs	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	e012      	b.n	800151c <HAL_RCC_OscConfig+0xd4>
 80014f6:	4ba2      	ldr	r3, [pc, #648]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4ba1      	ldr	r3, [pc, #644]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80014fc:	49a1      	ldr	r1, [pc, #644]	; (8001784 <HAL_RCC_OscConfig+0x33c>)
 80014fe:	400a      	ands	r2, r1
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	4b9f      	ldr	r3, [pc, #636]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	025b      	lsls	r3, r3, #9
 800150a:	4013      	ands	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4b9b      	ldr	r3, [pc, #620]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b9a      	ldr	r3, [pc, #616]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 8001516:	499c      	ldr	r1, [pc, #624]	; (8001788 <HAL_RCC_OscConfig+0x340>)
 8001518:	400a      	ands	r2, r1
 800151a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d014      	beq.n	800154e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001524:	f7ff fcfa 	bl	8000f1c <HAL_GetTick>
 8001528:	0003      	movs	r3, r0
 800152a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800152e:	f7ff fcf5 	bl	8000f1c <HAL_GetTick>
 8001532:	0002      	movs	r2, r0
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	; 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e2f9      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001540:	4b8f      	ldr	r3, [pc, #572]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	029b      	lsls	r3, r3, #10
 8001548:	4013      	ands	r3, r2
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0xe6>
 800154c:	e015      	b.n	800157a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154e:	f7ff fce5 	bl	8000f1c <HAL_GetTick>
 8001552:	0003      	movs	r3, r0
 8001554:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fce0 	bl	8000f1c <HAL_GetTick>
 800155c:	0002      	movs	r2, r0
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	; 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e2e4      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800156a:	4b85      	ldr	r3, [pc, #532]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	029b      	lsls	r3, r3, #10
 8001572:	4013      	ands	r3, r2
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x110>
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001578:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2202      	movs	r2, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d100      	bne.n	8001586 <HAL_RCC_OscConfig+0x13e>
 8001584:	e099      	b.n	80016ba <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	2220      	movs	r2, #32
 8001590:	4013      	ands	r3, r2
 8001592:	d009      	beq.n	80015a8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001594:	4b7a      	ldr	r3, [pc, #488]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b79      	ldr	r3, [pc, #484]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 800159a:	2120      	movs	r1, #32
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	2220      	movs	r2, #32
 80015a4:	4393      	bics	r3, r2
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d005      	beq.n	80015ba <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	2b0c      	cmp	r3, #12
 80015b2:	d13e      	bne.n	8001632 <HAL_RCC_OscConfig+0x1ea>
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d13b      	bne.n	8001632 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80015ba:	4b71      	ldr	r3, [pc, #452]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2204      	movs	r2, #4
 80015c0:	4013      	ands	r3, r2
 80015c2:	d004      	beq.n	80015ce <HAL_RCC_OscConfig+0x186>
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e2b2      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ce:	4b6c      	ldr	r3, [pc, #432]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4a6e      	ldr	r2, [pc, #440]	; (800178c <HAL_RCC_OscConfig+0x344>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	0019      	movs	r1, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	021a      	lsls	r2, r3, #8
 80015de:	4b68      	ldr	r3, [pc, #416]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80015e0:	430a      	orrs	r2, r1
 80015e2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015e4:	4b66      	ldr	r3, [pc, #408]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2209      	movs	r2, #9
 80015ea:	4393      	bics	r3, r2
 80015ec:	0019      	movs	r1, r3
 80015ee:	4b64      	ldr	r3, [pc, #400]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80015f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f2:	430a      	orrs	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015f6:	f000 fbeb 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 80015fa:	0001      	movs	r1, r0
 80015fc:	4b60      	ldr	r3, [pc, #384]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	220f      	movs	r2, #15
 8001604:	4013      	ands	r3, r2
 8001606:	4a62      	ldr	r2, [pc, #392]	; (8001790 <HAL_RCC_OscConfig+0x348>)
 8001608:	5cd3      	ldrb	r3, [r2, r3]
 800160a:	000a      	movs	r2, r1
 800160c:	40da      	lsrs	r2, r3
 800160e:	4b61      	ldr	r3, [pc, #388]	; (8001794 <HAL_RCC_OscConfig+0x34c>)
 8001610:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001612:	4b61      	ldr	r3, [pc, #388]	; (8001798 <HAL_RCC_OscConfig+0x350>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2513      	movs	r5, #19
 8001618:	197c      	adds	r4, r7, r5
 800161a:	0018      	movs	r0, r3
 800161c:	f7ff fc38 	bl	8000e90 <HAL_InitTick>
 8001620:	0003      	movs	r3, r0
 8001622:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001624:	197b      	adds	r3, r7, r5
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d046      	beq.n	80016ba <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800162c:	197b      	adds	r3, r7, r5
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	e280      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	2b00      	cmp	r3, #0
 8001636:	d027      	beq.n	8001688 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001638:	4b51      	ldr	r3, [pc, #324]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2209      	movs	r2, #9
 800163e:	4393      	bics	r3, r2
 8001640:	0019      	movs	r1, r3
 8001642:	4b4f      	ldr	r3, [pc, #316]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 8001644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001646:	430a      	orrs	r2, r1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fc67 	bl	8000f1c <HAL_GetTick>
 800164e:	0003      	movs	r3, r0
 8001650:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001654:	f7ff fc62 	bl	8000f1c <HAL_GetTick>
 8001658:	0002      	movs	r2, r0
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e266      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001666:	4b46      	ldr	r3, [pc, #280]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2204      	movs	r2, #4
 800166c:	4013      	ands	r3, r2
 800166e:	d0f1      	beq.n	8001654 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b43      	ldr	r3, [pc, #268]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	4a45      	ldr	r2, [pc, #276]	; (800178c <HAL_RCC_OscConfig+0x344>)
 8001676:	4013      	ands	r3, r2
 8001678:	0019      	movs	r1, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	021a      	lsls	r2, r3, #8
 8001680:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 8001682:	430a      	orrs	r2, r1
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	e018      	b.n	80016ba <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001688:	4b3d      	ldr	r3, [pc, #244]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b3c      	ldr	r3, [pc, #240]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 800168e:	2101      	movs	r1, #1
 8001690:	438a      	bics	r2, r1
 8001692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7ff fc42 	bl	8000f1c <HAL_GetTick>
 8001698:	0003      	movs	r3, r0
 800169a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff fc3d 	bl	8000f1c <HAL_GetTick>
 80016a2:	0002      	movs	r2, r0
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e241      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016b0:	4b33      	ldr	r3, [pc, #204]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2204      	movs	r2, #4
 80016b6:	4013      	ands	r3, r2
 80016b8:	d1f1      	bne.n	800169e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2210      	movs	r2, #16
 80016c0:	4013      	ands	r3, r2
 80016c2:	d100      	bne.n	80016c6 <HAL_RCC_OscConfig+0x27e>
 80016c4:	e0a1      	b.n	800180a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d140      	bne.n	800174e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016cc:	4b2c      	ldr	r3, [pc, #176]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4013      	ands	r3, r2
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_OscConfig+0x29c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e227      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016e4:	4b26      	ldr	r3, [pc, #152]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4a2c      	ldr	r2, [pc, #176]	; (800179c <HAL_RCC_OscConfig+0x354>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	0019      	movs	r1, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a1a      	ldr	r2, [r3, #32]
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80016f4:	430a      	orrs	r2, r1
 80016f6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f8:	4b21      	ldr	r3, [pc, #132]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	021b      	lsls	r3, r3, #8
 80016fe:	0a19      	lsrs	r1, r3, #8
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	061a      	lsls	r2, r3, #24
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 8001708:	430a      	orrs	r2, r1
 800170a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	0b5b      	lsrs	r3, r3, #13
 8001712:	3301      	adds	r3, #1
 8001714:	2280      	movs	r2, #128	; 0x80
 8001716:	0212      	lsls	r2, r2, #8
 8001718:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	091b      	lsrs	r3, r3, #4
 8001720:	210f      	movs	r1, #15
 8001722:	400b      	ands	r3, r1
 8001724:	491a      	ldr	r1, [pc, #104]	; (8001790 <HAL_RCC_OscConfig+0x348>)
 8001726:	5ccb      	ldrb	r3, [r1, r3]
 8001728:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <HAL_RCC_OscConfig+0x34c>)
 800172c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <HAL_RCC_OscConfig+0x350>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2513      	movs	r5, #19
 8001734:	197c      	adds	r4, r7, r5
 8001736:	0018      	movs	r0, r3
 8001738:	f7ff fbaa 	bl	8000e90 <HAL_InitTick>
 800173c:	0003      	movs	r3, r0
 800173e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001740:	197b      	adds	r3, r7, r5
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d060      	beq.n	800180a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001748:	197b      	adds	r3, r7, r5
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	e1f2      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d03f      	beq.n	80017d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_RCC_OscConfig+0x338>)
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	0049      	lsls	r1, r1, #1
 8001760:	430a      	orrs	r2, r1
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fbda 	bl	8000f1c <HAL_GetTick>
 8001768:	0003      	movs	r3, r0
 800176a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800176c:	e018      	b.n	80017a0 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800176e:	f7ff fbd5 	bl	8000f1c <HAL_GetTick>
 8001772:	0002      	movs	r2, r0
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d911      	bls.n	80017a0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e1d9      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
 8001780:	40021000 	.word	0x40021000
 8001784:	fffeffff 	.word	0xfffeffff
 8001788:	fffbffff 	.word	0xfffbffff
 800178c:	ffffe0ff 	.word	0xffffe0ff
 8001790:	080031d0 	.word	0x080031d0
 8001794:	20000000 	.word	0x20000000
 8001798:	20000004 	.word	0x20000004
 800179c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017a0:	4bc9      	ldr	r3, [pc, #804]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	d0e0      	beq.n	800176e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ac:	4bc6      	ldr	r3, [pc, #792]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4ac6      	ldr	r2, [pc, #792]	; (8001acc <HAL_RCC_OscConfig+0x684>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	0019      	movs	r1, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a1a      	ldr	r2, [r3, #32]
 80017ba:	4bc3      	ldr	r3, [pc, #780]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 80017bc:	430a      	orrs	r2, r1
 80017be:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c0:	4bc1      	ldr	r3, [pc, #772]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	0a19      	lsrs	r1, r3, #8
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	061a      	lsls	r2, r3, #24
 80017ce:	4bbe      	ldr	r3, [pc, #760]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 80017d0:	430a      	orrs	r2, r1
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	e019      	b.n	800180a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017d6:	4bbc      	ldr	r3, [pc, #752]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4bbb      	ldr	r3, [pc, #748]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 80017dc:	49bc      	ldr	r1, [pc, #752]	; (8001ad0 <HAL_RCC_OscConfig+0x688>)
 80017de:	400a      	ands	r2, r1
 80017e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e2:	f7ff fb9b 	bl	8000f1c <HAL_GetTick>
 80017e6:	0003      	movs	r3, r0
 80017e8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017ec:	f7ff fb96 	bl	8000f1c <HAL_GetTick>
 80017f0:	0002      	movs	r2, r0
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e19a      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017fe:	4bb2      	ldr	r3, [pc, #712]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4013      	ands	r3, r2
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2208      	movs	r2, #8
 8001810:	4013      	ands	r3, r2
 8001812:	d036      	beq.n	8001882 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d019      	beq.n	8001850 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181c:	4baa      	ldr	r3, [pc, #680]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 800181e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001820:	4ba9      	ldr	r3, [pc, #676]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001822:	2101      	movs	r1, #1
 8001824:	430a      	orrs	r2, r1
 8001826:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001828:	f7ff fb78 	bl	8000f1c <HAL_GetTick>
 800182c:	0003      	movs	r3, r0
 800182e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001832:	f7ff fb73 	bl	8000f1c <HAL_GetTick>
 8001836:	0002      	movs	r2, r0
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e177      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001844:	4ba0      	ldr	r3, [pc, #640]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001848:	2202      	movs	r2, #2
 800184a:	4013      	ands	r3, r2
 800184c:	d0f1      	beq.n	8001832 <HAL_RCC_OscConfig+0x3ea>
 800184e:	e018      	b.n	8001882 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001850:	4b9d      	ldr	r3, [pc, #628]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001852:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001854:	4b9c      	ldr	r3, [pc, #624]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001856:	2101      	movs	r1, #1
 8001858:	438a      	bics	r2, r1
 800185a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185c:	f7ff fb5e 	bl	8000f1c <HAL_GetTick>
 8001860:	0003      	movs	r3, r0
 8001862:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001866:	f7ff fb59 	bl	8000f1c <HAL_GetTick>
 800186a:	0002      	movs	r2, r0
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e15d      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001878:	4b93      	ldr	r3, [pc, #588]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 800187a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800187c:	2202      	movs	r2, #2
 800187e:	4013      	ands	r3, r2
 8001880:	d1f1      	bne.n	8001866 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2204      	movs	r2, #4
 8001888:	4013      	ands	r3, r2
 800188a:	d100      	bne.n	800188e <HAL_RCC_OscConfig+0x446>
 800188c:	e0ae      	b.n	80019ec <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188e:	2023      	movs	r0, #35	; 0x23
 8001890:	183b      	adds	r3, r7, r0
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001896:	4b8c      	ldr	r3, [pc, #560]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	055b      	lsls	r3, r3, #21
 800189e:	4013      	ands	r3, r2
 80018a0:	d109      	bne.n	80018b6 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	4b89      	ldr	r3, [pc, #548]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 80018a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018a6:	4b88      	ldr	r3, [pc, #544]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	0549      	lsls	r1, r1, #21
 80018ac:	430a      	orrs	r2, r1
 80018ae:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80018b0:	183b      	adds	r3, r7, r0
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b6:	4b87      	ldr	r3, [pc, #540]	; (8001ad4 <HAL_RCC_OscConfig+0x68c>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4013      	ands	r3, r2
 80018c0:	d11a      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018c2:	4b84      	ldr	r3, [pc, #528]	; (8001ad4 <HAL_RCC_OscConfig+0x68c>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4b83      	ldr	r3, [pc, #524]	; (8001ad4 <HAL_RCC_OscConfig+0x68c>)
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	0049      	lsls	r1, r1, #1
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d0:	f7ff fb24 	bl	8000f1c <HAL_GetTick>
 80018d4:	0003      	movs	r3, r0
 80018d6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018da:	f7ff fb1f 	bl	8000f1c <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b64      	cmp	r3, #100	; 0x64
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e123      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	4b79      	ldr	r3, [pc, #484]	; (8001ad4 <HAL_RCC_OscConfig+0x68c>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4013      	ands	r3, r2
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	429a      	cmp	r2, r3
 8001902:	d107      	bne.n	8001914 <HAL_RCC_OscConfig+0x4cc>
 8001904:	4b70      	ldr	r3, [pc, #448]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001906:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001908:	4b6f      	ldr	r3, [pc, #444]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 800190a:	2180      	movs	r1, #128	; 0x80
 800190c:	0049      	lsls	r1, r1, #1
 800190e:	430a      	orrs	r2, r1
 8001910:	651a      	str	r2, [r3, #80]	; 0x50
 8001912:	e031      	b.n	8001978 <HAL_RCC_OscConfig+0x530>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10c      	bne.n	8001936 <HAL_RCC_OscConfig+0x4ee>
 800191c:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 800191e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001920:	4b69      	ldr	r3, [pc, #420]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001922:	496b      	ldr	r1, [pc, #428]	; (8001ad0 <HAL_RCC_OscConfig+0x688>)
 8001924:	400a      	ands	r2, r1
 8001926:	651a      	str	r2, [r3, #80]	; 0x50
 8001928:	4b67      	ldr	r3, [pc, #412]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 800192a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800192c:	4b66      	ldr	r3, [pc, #408]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 800192e:	496a      	ldr	r1, [pc, #424]	; (8001ad8 <HAL_RCC_OscConfig+0x690>)
 8001930:	400a      	ands	r2, r1
 8001932:	651a      	str	r2, [r3, #80]	; 0x50
 8001934:	e020      	b.n	8001978 <HAL_RCC_OscConfig+0x530>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	23a0      	movs	r3, #160	; 0xa0
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	429a      	cmp	r2, r3
 8001940:	d10e      	bne.n	8001960 <HAL_RCC_OscConfig+0x518>
 8001942:	4b61      	ldr	r3, [pc, #388]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001944:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001946:	4b60      	ldr	r3, [pc, #384]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	00c9      	lsls	r1, r1, #3
 800194c:	430a      	orrs	r2, r1
 800194e:	651a      	str	r2, [r3, #80]	; 0x50
 8001950:	4b5d      	ldr	r3, [pc, #372]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001952:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001954:	4b5c      	ldr	r3, [pc, #368]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001956:	2180      	movs	r1, #128	; 0x80
 8001958:	0049      	lsls	r1, r1, #1
 800195a:	430a      	orrs	r2, r1
 800195c:	651a      	str	r2, [r3, #80]	; 0x50
 800195e:	e00b      	b.n	8001978 <HAL_RCC_OscConfig+0x530>
 8001960:	4b59      	ldr	r3, [pc, #356]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001962:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001964:	4b58      	ldr	r3, [pc, #352]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001966:	495a      	ldr	r1, [pc, #360]	; (8001ad0 <HAL_RCC_OscConfig+0x688>)
 8001968:	400a      	ands	r2, r1
 800196a:	651a      	str	r2, [r3, #80]	; 0x50
 800196c:	4b56      	ldr	r3, [pc, #344]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 800196e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001970:	4b55      	ldr	r3, [pc, #340]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001972:	4959      	ldr	r1, [pc, #356]	; (8001ad8 <HAL_RCC_OscConfig+0x690>)
 8001974:	400a      	ands	r2, r1
 8001976:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d015      	beq.n	80019ac <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001980:	f7ff facc 	bl	8000f1c <HAL_GetTick>
 8001984:	0003      	movs	r3, r0
 8001986:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001988:	e009      	b.n	800199e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7ff fac7 	bl	8000f1c <HAL_GetTick>
 800198e:	0002      	movs	r2, r0
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	4a51      	ldr	r2, [pc, #324]	; (8001adc <HAL_RCC_OscConfig+0x694>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e0ca      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800199e:	4b4a      	ldr	r3, [pc, #296]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 80019a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019a2:	2380      	movs	r3, #128	; 0x80
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4013      	ands	r3, r2
 80019a8:	d0ef      	beq.n	800198a <HAL_RCC_OscConfig+0x542>
 80019aa:	e014      	b.n	80019d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ac:	f7ff fab6 	bl	8000f1c <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019b4:	e009      	b.n	80019ca <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b6:	f7ff fab1 	bl	8000f1c <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	4a46      	ldr	r2, [pc, #280]	; (8001adc <HAL_RCC_OscConfig+0x694>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e0b4      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019ca:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 80019cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ce:	2380      	movs	r3, #128	; 0x80
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4013      	ands	r3, r2
 80019d4:	d1ef      	bne.n	80019b6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019d6:	2323      	movs	r3, #35	; 0x23
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d105      	bne.n	80019ec <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e0:	4b39      	ldr	r3, [pc, #228]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 80019e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019e4:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 80019e6:	493e      	ldr	r1, [pc, #248]	; (8001ae0 <HAL_RCC_OscConfig+0x698>)
 80019e8:	400a      	ands	r2, r1
 80019ea:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d100      	bne.n	80019f6 <HAL_RCC_OscConfig+0x5ae>
 80019f4:	e09d      	b.n	8001b32 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	2b0c      	cmp	r3, #12
 80019fa:	d100      	bne.n	80019fe <HAL_RCC_OscConfig+0x5b6>
 80019fc:	e076      	b.n	8001aec <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d145      	bne.n	8001a92 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a06:	4b30      	ldr	r3, [pc, #192]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	4b2f      	ldr	r3, [pc, #188]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001a0c:	4935      	ldr	r1, [pc, #212]	; (8001ae4 <HAL_RCC_OscConfig+0x69c>)
 8001a0e:	400a      	ands	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7ff fa83 	bl	8000f1c <HAL_GetTick>
 8001a16:	0003      	movs	r3, r0
 8001a18:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a1c:	f7ff fa7e 	bl	8000f1c <HAL_GetTick>
 8001a20:	0002      	movs	r2, r0
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e082      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	049b      	lsls	r3, r3, #18
 8001a36:	4013      	ands	r3, r2
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a3a:	4b23      	ldr	r3, [pc, #140]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	4a2a      	ldr	r2, [pc, #168]	; (8001ae8 <HAL_RCC_OscConfig+0x6a0>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	431a      	orrs	r2, r3
 8001a54:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001a56:	430a      	orrs	r2, r1
 8001a58:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	0449      	lsls	r1, r1, #17
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fa58 	bl	8000f1c <HAL_GetTick>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a72:	f7ff fa53 	bl	8000f1c <HAL_GetTick>
 8001a76:	0002      	movs	r2, r0
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e057      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	049b      	lsls	r3, r3, #18
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x62a>
 8001a90:	e04f      	b.n	8001b32 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a92:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001a98:	4912      	ldr	r1, [pc, #72]	; (8001ae4 <HAL_RCC_OscConfig+0x69c>)
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fa3d 	bl	8000f1c <HAL_GetTick>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff fa38 	bl	8000f1c <HAL_GetTick>
 8001aac:	0002      	movs	r2, r0
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e03c      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001aba:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <HAL_RCC_OscConfig+0x680>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	049b      	lsls	r3, r3, #18
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x660>
 8001ac6:	e034      	b.n	8001b32 <HAL_RCC_OscConfig+0x6ea>
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	ffff1fff 	.word	0xffff1fff
 8001ad0:	fffffeff 	.word	0xfffffeff
 8001ad4:	40007000 	.word	0x40007000
 8001ad8:	fffffbff 	.word	0xfffffbff
 8001adc:	00001388 	.word	0x00001388
 8001ae0:	efffffff 	.word	0xefffffff
 8001ae4:	feffffff 	.word	0xfeffffff
 8001ae8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e01d      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_RCC_OscConfig+0x6f4>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	025b      	lsls	r3, r3, #9
 8001b04:	401a      	ands	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d10f      	bne.n	8001b2e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	23f0      	movs	r3, #240	; 0xf0
 8001b12:	039b      	lsls	r3, r3, #14
 8001b14:	401a      	ands	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	23c0      	movs	r3, #192	; 0xc0
 8001b22:	041b      	lsls	r3, r3, #16
 8001b24:	401a      	ands	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e000      	b.n	8001b34 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	0018      	movs	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	b00a      	add	sp, #40	; 0x28
 8001b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3c:	40021000 	.word	0x40021000

08001b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e128      	b.n	8001da6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b54:	4b96      	ldr	r3, [pc, #600]	; (8001db0 <HAL_RCC_ClockConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d91e      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b62:	4b93      	ldr	r3, [pc, #588]	; (8001db0 <HAL_RCC_ClockConfig+0x270>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2201      	movs	r2, #1
 8001b68:	4393      	bics	r3, r2
 8001b6a:	0019      	movs	r1, r3
 8001b6c:	4b90      	ldr	r3, [pc, #576]	; (8001db0 <HAL_RCC_ClockConfig+0x270>)
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b74:	f7ff f9d2 	bl	8000f1c <HAL_GetTick>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7c:	e009      	b.n	8001b92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b7e:	f7ff f9cd 	bl	8000f1c <HAL_GetTick>
 8001b82:	0002      	movs	r2, r0
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	4a8a      	ldr	r2, [pc, #552]	; (8001db4 <HAL_RCC_ClockConfig+0x274>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e109      	b.n	8001da6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b92:	4b87      	ldr	r3, [pc, #540]	; (8001db0 <HAL_RCC_ClockConfig+0x270>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2201      	movs	r2, #1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d1ee      	bne.n	8001b7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d009      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001baa:	4b83      	ldr	r3, [pc, #524]	; (8001db8 <HAL_RCC_ClockConfig+0x278>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	22f0      	movs	r2, #240	; 0xf0
 8001bb0:	4393      	bics	r3, r2
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	4b7f      	ldr	r3, [pc, #508]	; (8001db8 <HAL_RCC_ClockConfig+0x278>)
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d100      	bne.n	8001bca <HAL_RCC_ClockConfig+0x8a>
 8001bc8:	e089      	b.n	8001cde <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bd2:	4b79      	ldr	r3, [pc, #484]	; (8001db8 <HAL_RCC_ClockConfig+0x278>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	029b      	lsls	r3, r3, #10
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d120      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e0e1      	b.n	8001da6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bea:	4b73      	ldr	r3, [pc, #460]	; (8001db8 <HAL_RCC_ClockConfig+0x278>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	049b      	lsls	r3, r3, #18
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d114      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0d5      	b.n	8001da6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d106      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c02:	4b6d      	ldr	r3, [pc, #436]	; (8001db8 <HAL_RCC_ClockConfig+0x278>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2204      	movs	r2, #4
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d109      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0ca      	b.n	8001da6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c10:	4b69      	ldr	r3, [pc, #420]	; (8001db8 <HAL_RCC_ClockConfig+0x278>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0c2      	b.n	8001da6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c20:	4b65      	ldr	r3, [pc, #404]	; (8001db8 <HAL_RCC_ClockConfig+0x278>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2203      	movs	r2, #3
 8001c26:	4393      	bics	r3, r2
 8001c28:	0019      	movs	r1, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4b62      	ldr	r3, [pc, #392]	; (8001db8 <HAL_RCC_ClockConfig+0x278>)
 8001c30:	430a      	orrs	r2, r1
 8001c32:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c34:	f7ff f972 	bl	8000f1c <HAL_GetTick>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d111      	bne.n	8001c68 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c44:	e009      	b.n	8001c5a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c46:	f7ff f969 	bl	8000f1c <HAL_GetTick>
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	4a58      	ldr	r2, [pc, #352]	; (8001db4 <HAL_RCC_ClockConfig+0x274>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e0a5      	b.n	8001da6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c5a:	4b57      	ldr	r3, [pc, #348]	; (8001db8 <HAL_RCC_ClockConfig+0x278>)
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	220c      	movs	r2, #12
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d1ef      	bne.n	8001c46 <HAL_RCC_ClockConfig+0x106>
 8001c66:	e03a      	b.n	8001cde <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	d111      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c70:	e009      	b.n	8001c86 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c72:	f7ff f953 	bl	8000f1c <HAL_GetTick>
 8001c76:	0002      	movs	r2, r0
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	4a4d      	ldr	r2, [pc, #308]	; (8001db4 <HAL_RCC_ClockConfig+0x274>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e08f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c86:	4b4c      	ldr	r3, [pc, #304]	; (8001db8 <HAL_RCC_ClockConfig+0x278>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d1ef      	bne.n	8001c72 <HAL_RCC_ClockConfig+0x132>
 8001c92:	e024      	b.n	8001cde <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d11b      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c9c:	e009      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9e:	f7ff f93d 	bl	8000f1c <HAL_GetTick>
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	4a42      	ldr	r2, [pc, #264]	; (8001db4 <HAL_RCC_ClockConfig+0x274>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e079      	b.n	8001da6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cb2:	4b41      	ldr	r3, [pc, #260]	; (8001db8 <HAL_RCC_ClockConfig+0x278>)
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d1ef      	bne.n	8001c9e <HAL_RCC_ClockConfig+0x15e>
 8001cbe:	e00e      	b.n	8001cde <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc0:	f7ff f92c 	bl	8000f1c <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	4a3a      	ldr	r2, [pc, #232]	; (8001db4 <HAL_RCC_ClockConfig+0x274>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e068      	b.n	8001da6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cd4:	4b38      	ldr	r3, [pc, #224]	; (8001db8 <HAL_RCC_ClockConfig+0x278>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	220c      	movs	r2, #12
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cde:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <HAL_RCC_ClockConfig+0x270>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d21e      	bcs.n	8001d2a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cec:	4b30      	ldr	r3, [pc, #192]	; (8001db0 <HAL_RCC_ClockConfig+0x270>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4393      	bics	r3, r2
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <HAL_RCC_ClockConfig+0x270>)
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cfe:	f7ff f90d 	bl	8000f1c <HAL_GetTick>
 8001d02:	0003      	movs	r3, r0
 8001d04:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	e009      	b.n	8001d1c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d08:	f7ff f908 	bl	8000f1c <HAL_GetTick>
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	4a28      	ldr	r2, [pc, #160]	; (8001db4 <HAL_RCC_ClockConfig+0x274>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e044      	b.n	8001da6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1c:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <HAL_RCC_ClockConfig+0x270>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2201      	movs	r2, #1
 8001d22:	4013      	ands	r3, r2
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d1ee      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2204      	movs	r2, #4
 8001d30:	4013      	ands	r3, r2
 8001d32:	d009      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d34:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_RCC_ClockConfig+0x278>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	4a20      	ldr	r2, [pc, #128]	; (8001dbc <HAL_RCC_ClockConfig+0x27c>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	0019      	movs	r1, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_RCC_ClockConfig+0x278>)
 8001d44:	430a      	orrs	r2, r1
 8001d46:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2208      	movs	r2, #8
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d00a      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_RCC_ClockConfig+0x278>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	4a1a      	ldr	r2, [pc, #104]	; (8001dc0 <HAL_RCC_ClockConfig+0x280>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	00da      	lsls	r2, r3, #3
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_RCC_ClockConfig+0x278>)
 8001d64:	430a      	orrs	r2, r1
 8001d66:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d68:	f000 f832 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d6c:	0001      	movs	r1, r0
 8001d6e:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_RCC_ClockConfig+0x278>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	091b      	lsrs	r3, r3, #4
 8001d74:	220f      	movs	r2, #15
 8001d76:	4013      	ands	r3, r2
 8001d78:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <HAL_RCC_ClockConfig+0x284>)
 8001d7a:	5cd3      	ldrb	r3, [r2, r3]
 8001d7c:	000a      	movs	r2, r1
 8001d7e:	40da      	lsrs	r2, r3
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_RCC_ClockConfig+0x288>)
 8001d82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <HAL_RCC_ClockConfig+0x28c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	250b      	movs	r5, #11
 8001d8a:	197c      	adds	r4, r7, r5
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff f87f 	bl	8000e90 <HAL_InitTick>
 8001d92:	0003      	movs	r3, r0
 8001d94:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001d96:	197b      	adds	r3, r7, r5
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001d9e:	197b      	adds	r3, r7, r5
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	0018      	movs	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	b004      	add	sp, #16
 8001dac:	bdb0      	pop	{r4, r5, r7, pc}
 8001dae:	46c0      	nop			; (mov r8, r8)
 8001db0:	40022000 	.word	0x40022000
 8001db4:	00001388 	.word	0x00001388
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	fffff8ff 	.word	0xfffff8ff
 8001dc0:	ffffc7ff 	.word	0xffffc7ff
 8001dc4:	080031d0 	.word	0x080031d0
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000004 	.word	0x20000004

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b5b0      	push	{r4, r5, r7, lr}
 8001dd2:	b08e      	sub	sp, #56	; 0x38
 8001dd4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001dd6:	4b4c      	ldr	r3, [pc, #304]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x138>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dde:	230c      	movs	r3, #12
 8001de0:	4013      	ands	r3, r2
 8001de2:	2b0c      	cmp	r3, #12
 8001de4:	d014      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x40>
 8001de6:	d900      	bls.n	8001dea <HAL_RCC_GetSysClockFreq+0x1a>
 8001de8:	e07b      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x112>
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x24>
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d00b      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001df2:	e076      	b.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001df4:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x138>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2210      	movs	r2, #16
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d002      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001dfe:	4b43      	ldr	r3, [pc, #268]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e00:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001e02:	e07c      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001e04:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x140>)
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e08:	e079      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e0a:	4b42      	ldr	r3, [pc, #264]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x144>)
 8001e0c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e0e:	e076      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e12:	0c9a      	lsrs	r2, r3, #18
 8001e14:	230f      	movs	r3, #15
 8001e16:	401a      	ands	r2, r3
 8001e18:	4b3f      	ldr	r3, [pc, #252]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x148>)
 8001e1a:	5c9b      	ldrb	r3, [r3, r2]
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e20:	0d9a      	lsrs	r2, r3, #22
 8001e22:	2303      	movs	r3, #3
 8001e24:	4013      	ands	r3, r2
 8001e26:	3301      	adds	r3, #1
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e2a:	4b37      	ldr	r3, [pc, #220]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e2c:	68da      	ldr	r2, [r3, #12]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	025b      	lsls	r3, r3, #9
 8001e32:	4013      	ands	r3, r2
 8001e34:	d01a      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
 8001e3e:	4a35      	ldr	r2, [pc, #212]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x144>)
 8001e40:	2300      	movs	r3, #0
 8001e42:	69b8      	ldr	r0, [r7, #24]
 8001e44:	69f9      	ldr	r1, [r7, #28]
 8001e46:	f7fe faf5 	bl	8000434 <__aeabi_lmul>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	000b      	movs	r3, r1
 8001e4e:	0010      	movs	r0, r2
 8001e50:	0019      	movs	r1, r3
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f7fe fac9 	bl	80003f4 <__aeabi_uldivmod>
 8001e62:	0002      	movs	r2, r0
 8001e64:	000b      	movs	r3, r1
 8001e66:	0013      	movs	r3, r2
 8001e68:	637b      	str	r3, [r7, #52]	; 0x34
 8001e6a:	e037      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e6c:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2210      	movs	r2, #16
 8001e72:	4013      	ands	r3, r2
 8001e74:	d01a      	beq.n	8001eac <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4a23      	ldr	r2, [pc, #140]	; (8001f0c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e80:	2300      	movs	r3, #0
 8001e82:	68b8      	ldr	r0, [r7, #8]
 8001e84:	68f9      	ldr	r1, [r7, #12]
 8001e86:	f7fe fad5 	bl	8000434 <__aeabi_lmul>
 8001e8a:	0002      	movs	r2, r0
 8001e8c:	000b      	movs	r3, r1
 8001e8e:	0010      	movs	r0, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	603b      	str	r3, [r7, #0]
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f7fe faa9 	bl	80003f4 <__aeabi_uldivmod>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	000b      	movs	r3, r1
 8001ea6:	0013      	movs	r3, r2
 8001ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8001eaa:	e017      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eae:	0018      	movs	r0, r3
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <HAL_RCC_GetSysClockFreq+0x140>)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f7fe fabc 	bl	8000434 <__aeabi_lmul>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	000b      	movs	r3, r1
 8001ec0:	0010      	movs	r0, r2
 8001ec2:	0019      	movs	r1, r3
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	001c      	movs	r4, r3
 8001ec8:	2300      	movs	r3, #0
 8001eca:	001d      	movs	r5, r3
 8001ecc:	0022      	movs	r2, r4
 8001ece:	002b      	movs	r3, r5
 8001ed0:	f7fe fa90 	bl	80003f4 <__aeabi_uldivmod>
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	000b      	movs	r3, r1
 8001ed8:	0013      	movs	r3, r2
 8001eda:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ede:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ee0:	e00d      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	0b5b      	lsrs	r3, r3, #13
 8001ee8:	2207      	movs	r2, #7
 8001eea:	4013      	ands	r3, r2
 8001eec:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	2280      	movs	r2, #128	; 0x80
 8001ef4:	0212      	lsls	r2, r2, #8
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	0013      	movs	r3, r2
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001efc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b00e      	add	sp, #56	; 0x38
 8001f06:	bdb0      	pop	{r4, r5, r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	003d0900 	.word	0x003d0900
 8001f10:	00f42400 	.word	0x00f42400
 8001f14:	007a1200 	.word	0x007a1200
 8001f18:	080031e8 	.word	0x080031e8

08001f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f20:	4b02      	ldr	r3, [pc, #8]	; (8001f2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f22:	681b      	ldr	r3, [r3, #0]
}
 8001f24:	0018      	movs	r0, r3
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	20000000 	.word	0x20000000

08001f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f34:	f7ff fff2 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f38:	0001      	movs	r1, r0
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	2207      	movs	r2, #7
 8001f42:	4013      	ands	r3, r2
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	40d9      	lsrs	r1, r3
 8001f4a:	000b      	movs	r3, r1
}
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	40021000 	.word	0x40021000
 8001f58:	080031e0 	.word	0x080031e0

08001f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f60:	f7ff ffdc 	bl	8001f1c <HAL_RCC_GetHCLKFreq>
 8001f64:	0001      	movs	r1, r0
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	0adb      	lsrs	r3, r3, #11
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	4013      	ands	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f72:	5cd3      	ldrb	r3, [r2, r3]
 8001f74:	40d9      	lsrs	r1, r3
 8001f76:	000b      	movs	r3, r1
}
 8001f78:	0018      	movs	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	40021000 	.word	0x40021000
 8001f84:	080031e0 	.word	0x080031e0

08001f88 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001f90:	2017      	movs	r0, #23
 8001f92:	183b      	adds	r3, r7, r0
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	d100      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001fa2:	e0c2      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa4:	4b81      	ldr	r3, [pc, #516]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	055b      	lsls	r3, r3, #21
 8001fac:	4013      	ands	r3, r2
 8001fae:	d109      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb0:	4b7e      	ldr	r3, [pc, #504]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fb4:	4b7d      	ldr	r3, [pc, #500]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fb6:	2180      	movs	r1, #128	; 0x80
 8001fb8:	0549      	lsls	r1, r1, #21
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001fbe:	183b      	adds	r3, r7, r0
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	4b7a      	ldr	r3, [pc, #488]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d11a      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fd0:	4b77      	ldr	r3, [pc, #476]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b76      	ldr	r3, [pc, #472]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	0049      	lsls	r1, r1, #1
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fde:	f7fe ff9d 	bl	8000f1c <HAL_GetTick>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe6:	e008      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe8:	f7fe ff98 	bl	8000f1c <HAL_GetTick>
 8001fec:	0002      	movs	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e0d4      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffa:	4b6d      	ldr	r3, [pc, #436]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4013      	ands	r3, r2
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002006:	4b69      	ldr	r3, [pc, #420]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	23c0      	movs	r3, #192	; 0xc0
 800200c:	039b      	lsls	r3, r3, #14
 800200e:	4013      	ands	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	23c0      	movs	r3, #192	; 0xc0
 8002018:	039b      	lsls	r3, r3, #14
 800201a:	4013      	ands	r3, r2
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	429a      	cmp	r2, r3
 8002020:	d013      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	23c0      	movs	r3, #192	; 0xc0
 8002028:	029b      	lsls	r3, r3, #10
 800202a:	401a      	ands	r2, r3
 800202c:	23c0      	movs	r3, #192	; 0xc0
 800202e:	029b      	lsls	r3, r3, #10
 8002030:	429a      	cmp	r2, r3
 8002032:	d10a      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002034:	4b5d      	ldr	r3, [pc, #372]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	029b      	lsls	r3, r3, #10
 800203c:	401a      	ands	r2, r3
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	029b      	lsls	r3, r3, #10
 8002042:	429a      	cmp	r2, r3
 8002044:	d101      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0ac      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800204a:	4b58      	ldr	r3, [pc, #352]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800204c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800204e:	23c0      	movs	r3, #192	; 0xc0
 8002050:	029b      	lsls	r3, r3, #10
 8002052:	4013      	ands	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d03b      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	23c0      	movs	r3, #192	; 0xc0
 8002062:	029b      	lsls	r3, r3, #10
 8002064:	4013      	ands	r3, r2
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	429a      	cmp	r2, r3
 800206a:	d033      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2220      	movs	r2, #32
 8002072:	4013      	ands	r3, r2
 8002074:	d02e      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002076:	4b4d      	ldr	r3, [pc, #308]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800207a:	4a4e      	ldr	r2, [pc, #312]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800207c:	4013      	ands	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002080:	4b4a      	ldr	r3, [pc, #296]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002082:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002084:	4b49      	ldr	r3, [pc, #292]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002086:	2180      	movs	r1, #128	; 0x80
 8002088:	0309      	lsls	r1, r1, #12
 800208a:	430a      	orrs	r2, r1
 800208c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800208e:	4b47      	ldr	r3, [pc, #284]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002090:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002092:	4b46      	ldr	r3, [pc, #280]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002094:	4948      	ldr	r1, [pc, #288]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002096:	400a      	ands	r2, r1
 8002098:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800209a:	4b44      	ldr	r3, [pc, #272]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4013      	ands	r3, r2
 80020a8:	d014      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7fe ff37 	bl	8000f1c <HAL_GetTick>
 80020ae:	0003      	movs	r3, r0
 80020b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020b2:	e009      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b4:	f7fe ff32 	bl	8000f1c <HAL_GetTick>
 80020b8:	0002      	movs	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	4a3f      	ldr	r2, [pc, #252]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e06d      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020c8:	4b38      	ldr	r3, [pc, #224]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4013      	ands	r3, r2
 80020d2:	d0ef      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	23c0      	movs	r3, #192	; 0xc0
 80020da:	029b      	lsls	r3, r3, #10
 80020dc:	401a      	ands	r2, r3
 80020de:	23c0      	movs	r3, #192	; 0xc0
 80020e0:	029b      	lsls	r3, r3, #10
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d10c      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80020e6:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a35      	ldr	r2, [pc, #212]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	0019      	movs	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	23c0      	movs	r3, #192	; 0xc0
 80020f6:	039b      	lsls	r3, r3, #14
 80020f8:	401a      	ands	r2, r3
 80020fa:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	4b2a      	ldr	r3, [pc, #168]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002102:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	23c0      	movs	r3, #192	; 0xc0
 800210a:	029b      	lsls	r3, r3, #10
 800210c:	401a      	ands	r2, r3
 800210e:	4b27      	ldr	r3, [pc, #156]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002110:	430a      	orrs	r2, r1
 8002112:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002114:	2317      	movs	r3, #23
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d105      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800211e:	4b23      	ldr	r3, [pc, #140]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002122:	4b22      	ldr	r3, [pc, #136]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002124:	4927      	ldr	r1, [pc, #156]	; (80021c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002126:	400a      	ands	r2, r1
 8002128:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2202      	movs	r2, #2
 8002130:	4013      	ands	r3, r2
 8002132:	d009      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002134:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002138:	220c      	movs	r2, #12
 800213a:	4393      	bics	r3, r2
 800213c:	0019      	movs	r1, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002144:	430a      	orrs	r2, r1
 8002146:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2204      	movs	r2, #4
 800214e:	4013      	ands	r3, r2
 8002150:	d009      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002152:	4b16      	ldr	r3, [pc, #88]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002158:	4013      	ands	r3, r2
 800215a:	0019      	movs	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002162:	430a      	orrs	r2, r1
 8002164:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2208      	movs	r2, #8
 800216c:	4013      	ands	r3, r2
 800216e:	d009      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002170:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002174:	4a15      	ldr	r2, [pc, #84]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002176:	4013      	ands	r3, r2
 8002178:	0019      	movs	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002180:	430a      	orrs	r2, r1
 8002182:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2280      	movs	r2, #128	; 0x80
 800218a:	4013      	ands	r3, r2
 800218c:	d009      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800218e:	4b07      	ldr	r3, [pc, #28]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002194:	4013      	ands	r3, r2
 8002196:	0019      	movs	r1, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800219e:	430a      	orrs	r2, r1
 80021a0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b006      	add	sp, #24
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40007000 	.word	0x40007000
 80021b4:	fffcffff 	.word	0xfffcffff
 80021b8:	fff7ffff 	.word	0xfff7ffff
 80021bc:	00001388 	.word	0x00001388
 80021c0:	ffcfffff 	.word	0xffcfffff
 80021c4:	efffffff 	.word	0xefffffff
 80021c8:	fffff3ff 	.word	0xfffff3ff
 80021cc:	ffffcfff 	.word	0xffffcfff
 80021d0:	fff3ffff 	.word	0xfff3ffff

080021d4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e08e      	b.n	8002304 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2221      	movs	r2, #33	; 0x21
 80021ea:	5c9b      	ldrb	r3, [r3, r2]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d107      	bne.n	8002202 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2220      	movs	r2, #32
 80021f6:	2100      	movs	r1, #0
 80021f8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7fe fd83 	bl	8000d08 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2221      	movs	r2, #33	; 0x21
 8002206:	2102      	movs	r1, #2
 8002208:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	22ca      	movs	r2, #202	; 0xca
 8002210:	625a      	str	r2, [r3, #36]	; 0x24
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2253      	movs	r2, #83	; 0x53
 8002218:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	0018      	movs	r0, r3
 800221e:	f000 faba 	bl	8002796 <RTC_EnterInitMode>
 8002222:	1e03      	subs	r3, r0, #0
 8002224:	d009      	beq.n	800223a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	22ff      	movs	r2, #255	; 0xff
 800222c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2221      	movs	r2, #33	; 0x21
 8002232:	2104      	movs	r1, #4
 8002234:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e064      	b.n	8002304 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4931      	ldr	r1, [pc, #196]	; (800230c <HAL_RTC_Init+0x138>)
 8002246:	400a      	ands	r2, r1
 8002248:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6899      	ldr	r1, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68d2      	ldr	r2, [r2, #12]
 8002270:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6919      	ldr	r1, [r3, #16]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	041a      	lsls	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2180      	movs	r1, #128	; 0x80
 8002292:	438a      	bics	r2, r1
 8002294:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2103      	movs	r1, #3
 80022a2:	438a      	bics	r2, r1
 80022a4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69da      	ldr	r2, [r3, #28]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2220      	movs	r2, #32
 80022c6:	4013      	ands	r3, r2
 80022c8:	d113      	bne.n	80022f2 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	0018      	movs	r0, r3
 80022ce:	f000 fa3b 	bl	8002748 <HAL_RTC_WaitForSynchro>
 80022d2:	1e03      	subs	r3, r0, #0
 80022d4:	d00d      	beq.n	80022f2 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	22ff      	movs	r2, #255	; 0xff
 80022dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2221      	movs	r2, #33	; 0x21
 80022e2:	2104      	movs	r1, #4
 80022e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2220      	movs	r2, #32
 80022ea:	2100      	movs	r1, #0
 80022ec:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e008      	b.n	8002304 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	22ff      	movs	r2, #255	; 0xff
 80022f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2221      	movs	r2, #33	; 0x21
 80022fe:	2101      	movs	r1, #1
 8002300:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002302:	2300      	movs	r3, #0
  }
}
 8002304:	0018      	movs	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}
 800230c:	ff8fffbf 	.word	0xff8fffbf

08002310 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	5c9b      	ldrb	r3, [r3, r2]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_RTC_SetTime+0x1a>
 8002326:	2302      	movs	r3, #2
 8002328:	e0ad      	b.n	8002486 <HAL_RTC_SetTime+0x176>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2220      	movs	r2, #32
 800232e:	2101      	movs	r1, #1
 8002330:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2221      	movs	r2, #33	; 0x21
 8002336:	2102      	movs	r1, #2
 8002338:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d125      	bne.n	800238c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	2240      	movs	r2, #64	; 0x40
 8002348:	4013      	ands	r3, r2
 800234a:	d102      	bne.n	8002352 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2200      	movs	r2, #0
 8002350:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	0018      	movs	r0, r3
 8002358:	f000 fa47 	bl	80027ea <RTC_ByteToBcd2>
 800235c:	0003      	movs	r3, r0
 800235e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	785b      	ldrb	r3, [r3, #1]
 8002364:	0018      	movs	r0, r3
 8002366:	f000 fa40 	bl	80027ea <RTC_ByteToBcd2>
 800236a:	0003      	movs	r3, r0
 800236c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800236e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	789b      	ldrb	r3, [r3, #2]
 8002374:	0018      	movs	r0, r3
 8002376:	f000 fa38 	bl	80027ea <RTC_ByteToBcd2>
 800237a:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800237c:	0022      	movs	r2, r4
 800237e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	78db      	ldrb	r3, [r3, #3]
 8002384:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002386:	4313      	orrs	r3, r2
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	e017      	b.n	80023bc <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2240      	movs	r2, #64	; 0x40
 8002394:	4013      	ands	r3, r2
 8002396:	d102      	bne.n	800239e <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2200      	movs	r2, #0
 800239c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	785b      	ldrb	r3, [r3, #1]
 80023a8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80023aa:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80023b0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	78db      	ldrb	r3, [r3, #3]
 80023b6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80023b8:	4313      	orrs	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	22ca      	movs	r2, #202	; 0xca
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2253      	movs	r2, #83	; 0x53
 80023ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	0018      	movs	r0, r3
 80023d0:	f000 f9e1 	bl	8002796 <RTC_EnterInitMode>
 80023d4:	1e03      	subs	r3, r0, #0
 80023d6:	d00d      	beq.n	80023f4 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	22ff      	movs	r2, #255	; 0xff
 80023de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2221      	movs	r2, #33	; 0x21
 80023e4:	2104      	movs	r1, #4
 80023e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	2100      	movs	r1, #0
 80023ee:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e048      	b.n	8002486 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	4925      	ldr	r1, [pc, #148]	; (8002490 <HAL_RTC_SetTime+0x180>)
 80023fc:	400a      	ands	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4922      	ldr	r1, [pc, #136]	; (8002494 <HAL_RTC_SetTime+0x184>)
 800240c:	400a      	ands	r2, r1
 800240e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6899      	ldr	r1, [r3, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	431a      	orrs	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2180      	movs	r1, #128	; 0x80
 8002434:	438a      	bics	r2, r1
 8002436:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2220      	movs	r2, #32
 8002440:	4013      	ands	r3, r2
 8002442:	d113      	bne.n	800246c <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	0018      	movs	r0, r3
 8002448:	f000 f97e 	bl	8002748 <HAL_RTC_WaitForSynchro>
 800244c:	1e03      	subs	r3, r0, #0
 800244e:	d00d      	beq.n	800246c <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	22ff      	movs	r2, #255	; 0xff
 8002456:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2221      	movs	r2, #33	; 0x21
 800245c:	2104      	movs	r1, #4
 800245e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	2100      	movs	r1, #0
 8002466:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e00c      	b.n	8002486 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	22ff      	movs	r2, #255	; 0xff
 8002472:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2221      	movs	r2, #33	; 0x21
 8002478:	2101      	movs	r1, #1
 800247a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2220      	movs	r2, #32
 8002480:	2100      	movs	r1, #0
 8002482:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002484:	2300      	movs	r3, #0
  }
}
 8002486:	0018      	movs	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	b007      	add	sp, #28
 800248c:	bd90      	pop	{r4, r7, pc}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	007f7f7f 	.word	0x007f7f7f
 8002494:	fffbffff 	.word	0xfffbffff

08002498 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	045b      	lsls	r3, r3, #17
 80024b6:	0c5a      	lsrs	r2, r3, #17
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a22      	ldr	r2, [pc, #136]	; (800254c <HAL_RTC_GetTime+0xb4>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	0c1b      	lsrs	r3, r3, #16
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	223f      	movs	r2, #63	; 0x3f
 80024d0:	4013      	ands	r3, r2
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	227f      	movs	r2, #127	; 0x7f
 80024e0:	4013      	ands	r3, r2
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	227f      	movs	r2, #127	; 0x7f
 80024ee:	4013      	ands	r3, r2
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	0c1b      	lsrs	r3, r3, #16
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2240      	movs	r2, #64	; 0x40
 80024fe:	4013      	ands	r3, r2
 8002500:	b2da      	uxtb	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d11a      	bne.n	8002542 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	0018      	movs	r0, r3
 8002512:	f000 f992 	bl	800283a <RTC_Bcd2ToByte>
 8002516:	0003      	movs	r3, r0
 8002518:	001a      	movs	r2, r3
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	785b      	ldrb	r3, [r3, #1]
 8002522:	0018      	movs	r0, r3
 8002524:	f000 f989 	bl	800283a <RTC_Bcd2ToByte>
 8002528:	0003      	movs	r3, r0
 800252a:	001a      	movs	r2, r3
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	789b      	ldrb	r3, [r3, #2]
 8002534:	0018      	movs	r0, r3
 8002536:	f000 f980 	bl	800283a <RTC_Bcd2ToByte>
 800253a:	0003      	movs	r3, r0
 800253c:	001a      	movs	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	0018      	movs	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	b006      	add	sp, #24
 800254a:	bd80      	pop	{r7, pc}
 800254c:	007f7f7f 	.word	0x007f7f7f

08002550 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	5c9b      	ldrb	r3, [r3, r2]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_RTC_SetDate+0x1a>
 8002566:	2302      	movs	r3, #2
 8002568:	e099      	b.n	800269e <HAL_RTC_SetDate+0x14e>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2220      	movs	r2, #32
 800256e:	2101      	movs	r1, #1
 8002570:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2221      	movs	r2, #33	; 0x21
 8002576:	2102      	movs	r1, #2
 8002578:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10e      	bne.n	800259e <HAL_RTC_SetDate+0x4e>
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	785b      	ldrb	r3, [r3, #1]
 8002584:	001a      	movs	r2, r3
 8002586:	2310      	movs	r3, #16
 8002588:	4013      	ands	r3, r2
 800258a:	d008      	beq.n	800259e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	785b      	ldrb	r3, [r3, #1]
 8002590:	2210      	movs	r2, #16
 8002592:	4393      	bics	r3, r2
 8002594:	b2db      	uxtb	r3, r3
 8002596:	330a      	adds	r3, #10
 8002598:	b2da      	uxtb	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d11c      	bne.n	80025de <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	78db      	ldrb	r3, [r3, #3]
 80025a8:	0018      	movs	r0, r3
 80025aa:	f000 f91e 	bl	80027ea <RTC_ByteToBcd2>
 80025ae:	0003      	movs	r3, r0
 80025b0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	785b      	ldrb	r3, [r3, #1]
 80025b6:	0018      	movs	r0, r3
 80025b8:	f000 f917 	bl	80027ea <RTC_ByteToBcd2>
 80025bc:	0003      	movs	r3, r0
 80025be:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80025c0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	789b      	ldrb	r3, [r3, #2]
 80025c6:	0018      	movs	r0, r3
 80025c8:	f000 f90f 	bl	80027ea <RTC_ByteToBcd2>
 80025cc:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80025ce:	0022      	movs	r2, r4
 80025d0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80025d8:	4313      	orrs	r3, r2
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	e00e      	b.n	80025fc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	78db      	ldrb	r3, [r3, #3]
 80025e2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	785b      	ldrb	r3, [r3, #1]
 80025e8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80025ea:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80025f0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80025f8:	4313      	orrs	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	22ca      	movs	r2, #202	; 0xca
 8002602:	625a      	str	r2, [r3, #36]	; 0x24
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2253      	movs	r2, #83	; 0x53
 800260a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	0018      	movs	r0, r3
 8002610:	f000 f8c1 	bl	8002796 <RTC_EnterInitMode>
 8002614:	1e03      	subs	r3, r0, #0
 8002616:	d00d      	beq.n	8002634 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	22ff      	movs	r2, #255	; 0xff
 800261e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2221      	movs	r2, #33	; 0x21
 8002624:	2104      	movs	r1, #4
 8002626:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2220      	movs	r2, #32
 800262c:	2100      	movs	r1, #0
 800262e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e034      	b.n	800269e <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	491b      	ldr	r1, [pc, #108]	; (80026a8 <HAL_RTC_SetDate+0x158>)
 800263c:	400a      	ands	r2, r1
 800263e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	438a      	bics	r2, r1
 800264e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2220      	movs	r2, #32
 8002658:	4013      	ands	r3, r2
 800265a:	d113      	bne.n	8002684 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	0018      	movs	r0, r3
 8002660:	f000 f872 	bl	8002748 <HAL_RTC_WaitForSynchro>
 8002664:	1e03      	subs	r3, r0, #0
 8002666:	d00d      	beq.n	8002684 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	22ff      	movs	r2, #255	; 0xff
 800266e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2221      	movs	r2, #33	; 0x21
 8002674:	2104      	movs	r1, #4
 8002676:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2220      	movs	r2, #32
 800267c:	2100      	movs	r1, #0
 800267e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e00c      	b.n	800269e <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	22ff      	movs	r2, #255	; 0xff
 800268a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2221      	movs	r2, #33	; 0x21
 8002690:	2101      	movs	r1, #1
 8002692:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	2100      	movs	r1, #0
 800269a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800269c:	2300      	movs	r3, #0
  }
}
 800269e:	0018      	movs	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	b007      	add	sp, #28
 80026a4:	bd90      	pop	{r4, r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	00ffff3f 	.word	0x00ffff3f

080026ac <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4a21      	ldr	r2, [pc, #132]	; (8002744 <HAL_RTC_GetDate+0x98>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	0c1b      	lsrs	r3, r3, #16
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	221f      	movs	r2, #31
 80026d6:	4013      	ands	r3, r2
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	223f      	movs	r2, #63	; 0x3f
 80026e4:	4013      	ands	r3, r2
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	0b5b      	lsrs	r3, r3, #13
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2207      	movs	r2, #7
 80026f4:	4013      	ands	r3, r2
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d11a      	bne.n	8002738 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	78db      	ldrb	r3, [r3, #3]
 8002706:	0018      	movs	r0, r3
 8002708:	f000 f897 	bl	800283a <RTC_Bcd2ToByte>
 800270c:	0003      	movs	r3, r0
 800270e:	001a      	movs	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	785b      	ldrb	r3, [r3, #1]
 8002718:	0018      	movs	r0, r3
 800271a:	f000 f88e 	bl	800283a <RTC_Bcd2ToByte>
 800271e:	0003      	movs	r3, r0
 8002720:	001a      	movs	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	789b      	ldrb	r3, [r3, #2]
 800272a:	0018      	movs	r0, r3
 800272c:	f000 f885 	bl	800283a <RTC_Bcd2ToByte>
 8002730:	0003      	movs	r3, r0
 8002732:	001a      	movs	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	0018      	movs	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	b006      	add	sp, #24
 8002740:	bd80      	pop	{r7, pc}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	00ffff3f 	.word	0x00ffff3f

08002748 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	21a0      	movs	r1, #160	; 0xa0
 800275c:	438a      	bics	r2, r1
 800275e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002760:	f7fe fbdc 	bl	8000f1c <HAL_GetTick>
 8002764:	0003      	movs	r3, r0
 8002766:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002768:	e00a      	b.n	8002780 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800276a:	f7fe fbd7 	bl	8000f1c <HAL_GetTick>
 800276e:	0002      	movs	r2, r0
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1ad2      	subs	r2, r2, r3
 8002774:	23fa      	movs	r3, #250	; 0xfa
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	429a      	cmp	r2, r3
 800277a:	d901      	bls.n	8002780 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e006      	b.n	800278e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2220      	movs	r2, #32
 8002788:	4013      	ands	r3, r2
 800278a:	d0ee      	beq.n	800276a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b004      	add	sp, #16
 8002794:	bd80      	pop	{r7, pc}

08002796 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b084      	sub	sp, #16
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	2240      	movs	r2, #64	; 0x40
 80027a6:	4013      	ands	r3, r2
 80027a8:	d11a      	bne.n	80027e0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2201      	movs	r2, #1
 80027b0:	4252      	negs	r2, r2
 80027b2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80027b4:	f7fe fbb2 	bl	8000f1c <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80027bc:	e00a      	b.n	80027d4 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80027be:	f7fe fbad 	bl	8000f1c <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	1ad2      	subs	r2, r2, r3
 80027c8:	23fa      	movs	r3, #250	; 0xfa
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d901      	bls.n	80027d4 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e006      	b.n	80027e2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2240      	movs	r2, #64	; 0x40
 80027dc:	4013      	ands	r3, r2
 80027de:	d0ee      	beq.n	80027be <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	0018      	movs	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b004      	add	sp, #16
 80027e8:	bd80      	pop	{r7, pc}

080027ea <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	0002      	movs	r2, r0
 80027f2:	1dfb      	adds	r3, r7, #7
 80027f4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80027fa:	230b      	movs	r3, #11
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	1dfa      	adds	r2, r7, #7
 8002800:	7812      	ldrb	r2, [r2, #0]
 8002802:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002804:	e008      	b.n	8002818 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3301      	adds	r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800280c:	220b      	movs	r2, #11
 800280e:	18bb      	adds	r3, r7, r2
 8002810:	18ba      	adds	r2, r7, r2
 8002812:	7812      	ldrb	r2, [r2, #0]
 8002814:	3a0a      	subs	r2, #10
 8002816:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002818:	210b      	movs	r1, #11
 800281a:	187b      	adds	r3, r7, r1
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b09      	cmp	r3, #9
 8002820:	d8f1      	bhi.n	8002806 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	b2da      	uxtb	r2, r3
 800282a:	187b      	adds	r3, r7, r1
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	4313      	orrs	r3, r2
 8002830:	b2db      	uxtb	r3, r3
}
 8002832:	0018      	movs	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	b004      	add	sp, #16
 8002838:	bd80      	pop	{r7, pc}

0800283a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	0002      	movs	r2, r0
 8002842:	1dfb      	adds	r3, r7, #7
 8002844:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002846:	1dfb      	adds	r3, r7, #7
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	b2db      	uxtb	r3, r3
 800284e:	001a      	movs	r2, r3
 8002850:	0013      	movs	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	189b      	adds	r3, r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	1dfb      	adds	r3, r7, #7
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	210f      	movs	r1, #15
 8002864:	400b      	ands	r3, r1
 8002866:	b2db      	uxtb	r3, r3
 8002868:	18d3      	adds	r3, r2, r3
 800286a:	b2db      	uxtb	r3, r3
}
 800286c:	0018      	movs	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	b004      	add	sp, #16
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e044      	b.n	8002910 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800288a:	2b00      	cmp	r3, #0
 800288c:	d107      	bne.n	800289e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2274      	movs	r2, #116	; 0x74
 8002892:	2100      	movs	r1, #0
 8002894:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0018      	movs	r0, r3
 800289a:	f7fe fa4d 	bl	8000d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2224      	movs	r2, #36	; 0x24
 80028a2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2101      	movs	r1, #1
 80028b0:	438a      	bics	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	0018      	movs	r0, r3
 80028b8:	f000 f830 	bl	800291c <UART_SetConfig>
 80028bc:	0003      	movs	r3, r0
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d101      	bne.n	80028c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e024      	b.n	8002910 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 fa85 	bl	8002de0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	490d      	ldr	r1, [pc, #52]	; (8002918 <HAL_UART_Init+0xa4>)
 80028e2:	400a      	ands	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	212a      	movs	r1, #42	; 0x2a
 80028f2:	438a      	bics	r2, r1
 80028f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2101      	movs	r1, #1
 8002902:	430a      	orrs	r2, r1
 8002904:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	0018      	movs	r0, r3
 800290a:	f000 fb1d 	bl	8002f48 <UART_CheckIdleState>
 800290e:	0003      	movs	r3, r0
}
 8002910:	0018      	movs	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	b002      	add	sp, #8
 8002916:	bd80      	pop	{r7, pc}
 8002918:	ffffb7ff 	.word	0xffffb7ff

0800291c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800291c:	b5b0      	push	{r4, r5, r7, lr}
 800291e:	b08e      	sub	sp, #56	; 0x38
 8002920:	af00      	add	r7, sp, #0
 8002922:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002924:	231a      	movs	r3, #26
 8002926:	2218      	movs	r2, #24
 8002928:	4694      	mov	ip, r2
 800292a:	44bc      	add	ip, r7
 800292c:	4463      	add	r3, ip
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	431a      	orrs	r2, r3
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	431a      	orrs	r2, r3
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	4313      	orrs	r3, r2
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4abc      	ldr	r2, [pc, #752]	; (8002c44 <UART_SetConfig+0x328>)
 8002952:	4013      	ands	r3, r2
 8002954:	0019      	movs	r1, r3
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	4ab8      	ldr	r2, [pc, #736]	; (8002c48 <UART_SetConfig+0x32c>)
 8002968:	4013      	ands	r3, r2
 800296a:	0019      	movs	r1, r3
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4ab2      	ldr	r2, [pc, #712]	; (8002c4c <UART_SetConfig+0x330>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d004      	beq.n	8002992 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800298e:	4313      	orrs	r3, r2
 8002990:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4aad      	ldr	r2, [pc, #692]	; (8002c50 <UART_SetConfig+0x334>)
 800299a:	4013      	ands	r3, r2
 800299c:	0019      	movs	r1, r3
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029a4:	430a      	orrs	r2, r1
 80029a6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4aa9      	ldr	r2, [pc, #676]	; (8002c54 <UART_SetConfig+0x338>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d136      	bne.n	8002a20 <UART_SetConfig+0x104>
 80029b2:	4ba9      	ldr	r3, [pc, #676]	; (8002c58 <UART_SetConfig+0x33c>)
 80029b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b6:	220c      	movs	r2, #12
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d020      	beq.n	8002a00 <UART_SetConfig+0xe4>
 80029be:	d827      	bhi.n	8002a10 <UART_SetConfig+0xf4>
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d00d      	beq.n	80029e0 <UART_SetConfig+0xc4>
 80029c4:	d824      	bhi.n	8002a10 <UART_SetConfig+0xf4>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <UART_SetConfig+0xb4>
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d010      	beq.n	80029f0 <UART_SetConfig+0xd4>
 80029ce:	e01f      	b.n	8002a10 <UART_SetConfig+0xf4>
 80029d0:	231b      	movs	r3, #27
 80029d2:	2218      	movs	r2, #24
 80029d4:	4694      	mov	ip, r2
 80029d6:	44bc      	add	ip, r7
 80029d8:	4463      	add	r3, ip
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	e06f      	b.n	8002ac0 <UART_SetConfig+0x1a4>
 80029e0:	231b      	movs	r3, #27
 80029e2:	2218      	movs	r2, #24
 80029e4:	4694      	mov	ip, r2
 80029e6:	44bc      	add	ip, r7
 80029e8:	4463      	add	r3, ip
 80029ea:	2202      	movs	r2, #2
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	e067      	b.n	8002ac0 <UART_SetConfig+0x1a4>
 80029f0:	231b      	movs	r3, #27
 80029f2:	2218      	movs	r2, #24
 80029f4:	4694      	mov	ip, r2
 80029f6:	44bc      	add	ip, r7
 80029f8:	4463      	add	r3, ip
 80029fa:	2204      	movs	r2, #4
 80029fc:	701a      	strb	r2, [r3, #0]
 80029fe:	e05f      	b.n	8002ac0 <UART_SetConfig+0x1a4>
 8002a00:	231b      	movs	r3, #27
 8002a02:	2218      	movs	r2, #24
 8002a04:	4694      	mov	ip, r2
 8002a06:	44bc      	add	ip, r7
 8002a08:	4463      	add	r3, ip
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	701a      	strb	r2, [r3, #0]
 8002a0e:	e057      	b.n	8002ac0 <UART_SetConfig+0x1a4>
 8002a10:	231b      	movs	r3, #27
 8002a12:	2218      	movs	r2, #24
 8002a14:	4694      	mov	ip, r2
 8002a16:	44bc      	add	ip, r7
 8002a18:	4463      	add	r3, ip
 8002a1a:	2210      	movs	r2, #16
 8002a1c:	701a      	strb	r2, [r3, #0]
 8002a1e:	e04f      	b.n	8002ac0 <UART_SetConfig+0x1a4>
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a89      	ldr	r2, [pc, #548]	; (8002c4c <UART_SetConfig+0x330>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d143      	bne.n	8002ab2 <UART_SetConfig+0x196>
 8002a2a:	4b8b      	ldr	r3, [pc, #556]	; (8002c58 <UART_SetConfig+0x33c>)
 8002a2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a2e:	23c0      	movs	r3, #192	; 0xc0
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	4013      	ands	r3, r2
 8002a34:	22c0      	movs	r2, #192	; 0xc0
 8002a36:	0112      	lsls	r2, r2, #4
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d02a      	beq.n	8002a92 <UART_SetConfig+0x176>
 8002a3c:	22c0      	movs	r2, #192	; 0xc0
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d82e      	bhi.n	8002aa2 <UART_SetConfig+0x186>
 8002a44:	2280      	movs	r2, #128	; 0x80
 8002a46:	0112      	lsls	r2, r2, #4
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d012      	beq.n	8002a72 <UART_SetConfig+0x156>
 8002a4c:	2280      	movs	r2, #128	; 0x80
 8002a4e:	0112      	lsls	r2, r2, #4
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d826      	bhi.n	8002aa2 <UART_SetConfig+0x186>
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d004      	beq.n	8002a62 <UART_SetConfig+0x146>
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	00d2      	lsls	r2, r2, #3
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d010      	beq.n	8002a82 <UART_SetConfig+0x166>
 8002a60:	e01f      	b.n	8002aa2 <UART_SetConfig+0x186>
 8002a62:	231b      	movs	r3, #27
 8002a64:	2218      	movs	r2, #24
 8002a66:	4694      	mov	ip, r2
 8002a68:	44bc      	add	ip, r7
 8002a6a:	4463      	add	r3, ip
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e026      	b.n	8002ac0 <UART_SetConfig+0x1a4>
 8002a72:	231b      	movs	r3, #27
 8002a74:	2218      	movs	r2, #24
 8002a76:	4694      	mov	ip, r2
 8002a78:	44bc      	add	ip, r7
 8002a7a:	4463      	add	r3, ip
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	701a      	strb	r2, [r3, #0]
 8002a80:	e01e      	b.n	8002ac0 <UART_SetConfig+0x1a4>
 8002a82:	231b      	movs	r3, #27
 8002a84:	2218      	movs	r2, #24
 8002a86:	4694      	mov	ip, r2
 8002a88:	44bc      	add	ip, r7
 8002a8a:	4463      	add	r3, ip
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e016      	b.n	8002ac0 <UART_SetConfig+0x1a4>
 8002a92:	231b      	movs	r3, #27
 8002a94:	2218      	movs	r2, #24
 8002a96:	4694      	mov	ip, r2
 8002a98:	44bc      	add	ip, r7
 8002a9a:	4463      	add	r3, ip
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	701a      	strb	r2, [r3, #0]
 8002aa0:	e00e      	b.n	8002ac0 <UART_SetConfig+0x1a4>
 8002aa2:	231b      	movs	r3, #27
 8002aa4:	2218      	movs	r2, #24
 8002aa6:	4694      	mov	ip, r2
 8002aa8:	44bc      	add	ip, r7
 8002aaa:	4463      	add	r3, ip
 8002aac:	2210      	movs	r2, #16
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	e006      	b.n	8002ac0 <UART_SetConfig+0x1a4>
 8002ab2:	231b      	movs	r3, #27
 8002ab4:	2218      	movs	r2, #24
 8002ab6:	4694      	mov	ip, r2
 8002ab8:	44bc      	add	ip, r7
 8002aba:	4463      	add	r3, ip
 8002abc:	2210      	movs	r2, #16
 8002abe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a61      	ldr	r2, [pc, #388]	; (8002c4c <UART_SetConfig+0x330>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d000      	beq.n	8002acc <UART_SetConfig+0x1b0>
 8002aca:	e088      	b.n	8002bde <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002acc:	231b      	movs	r3, #27
 8002ace:	2218      	movs	r2, #24
 8002ad0:	4694      	mov	ip, r2
 8002ad2:	44bc      	add	ip, r7
 8002ad4:	4463      	add	r3, ip
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d01d      	beq.n	8002b18 <UART_SetConfig+0x1fc>
 8002adc:	dc20      	bgt.n	8002b20 <UART_SetConfig+0x204>
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d015      	beq.n	8002b0e <UART_SetConfig+0x1f2>
 8002ae2:	dc1d      	bgt.n	8002b20 <UART_SetConfig+0x204>
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <UART_SetConfig+0x1d2>
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d005      	beq.n	8002af8 <UART_SetConfig+0x1dc>
 8002aec:	e018      	b.n	8002b20 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002aee:	f7ff fa1f 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8002af2:	0003      	movs	r3, r0
 8002af4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002af6:	e01d      	b.n	8002b34 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002af8:	4b57      	ldr	r3, [pc, #348]	; (8002c58 <UART_SetConfig+0x33c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2210      	movs	r2, #16
 8002afe:	4013      	ands	r3, r2
 8002b00:	d002      	beq.n	8002b08 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b02:	4b56      	ldr	r3, [pc, #344]	; (8002c5c <UART_SetConfig+0x340>)
 8002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b06:	e015      	b.n	8002b34 <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 8002b08:	4b55      	ldr	r3, [pc, #340]	; (8002c60 <UART_SetConfig+0x344>)
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b0c:	e012      	b.n	8002b34 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b0e:	f7ff f95f 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8002b12:	0003      	movs	r3, r0
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b16:	e00d      	b.n	8002b34 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b1e:	e009      	b.n	8002b34 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b24:	231a      	movs	r3, #26
 8002b26:	2218      	movs	r2, #24
 8002b28:	4694      	mov	ip, r2
 8002b2a:	44bc      	add	ip, r7
 8002b2c:	4463      	add	r3, ip
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]
        break;
 8002b32:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d100      	bne.n	8002b3c <UART_SetConfig+0x220>
 8002b3a:	e139      	b.n	8002db0 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	0013      	movs	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	189b      	adds	r3, r3, r2
 8002b46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d305      	bcc.n	8002b58 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d907      	bls.n	8002b68 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8002b58:	231a      	movs	r3, #26
 8002b5a:	2218      	movs	r2, #24
 8002b5c:	4694      	mov	ip, r2
 8002b5e:	44bc      	add	ip, r7
 8002b60:	4463      	add	r3, ip
 8002b62:	2201      	movs	r2, #1
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	e123      	b.n	8002db0 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	6939      	ldr	r1, [r7, #16]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	000b      	movs	r3, r1
 8002b76:	0e1b      	lsrs	r3, r3, #24
 8002b78:	0010      	movs	r0, r2
 8002b7a:	0205      	lsls	r5, r0, #8
 8002b7c:	431d      	orrs	r5, r3
 8002b7e:	000b      	movs	r3, r1
 8002b80:	021c      	lsls	r4, r3, #8
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68b8      	ldr	r0, [r7, #8]
 8002b90:	68f9      	ldr	r1, [r7, #12]
 8002b92:	1900      	adds	r0, r0, r4
 8002b94:	4169      	adcs	r1, r5
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f7fd fc26 	bl	80003f4 <__aeabi_uldivmod>
 8002ba8:	0002      	movs	r2, r0
 8002baa:	000b      	movs	r3, r1
 8002bac:	0013      	movs	r3, r2
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bb2:	23c0      	movs	r3, #192	; 0xc0
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d309      	bcc.n	8002bce <UART_SetConfig+0x2b2>
 8002bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	035b      	lsls	r3, r3, #13
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d204      	bcs.n	8002bce <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bca:	60da      	str	r2, [r3, #12]
 8002bcc:	e0f0      	b.n	8002db0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002bce:	231a      	movs	r3, #26
 8002bd0:	2218      	movs	r2, #24
 8002bd2:	4694      	mov	ip, r2
 8002bd4:	44bc      	add	ip, r7
 8002bd6:	4463      	add	r3, ip
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
 8002bdc:	e0e8      	b.n	8002db0 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	69da      	ldr	r2, [r3, #28]
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d000      	beq.n	8002bec <UART_SetConfig+0x2d0>
 8002bea:	e087      	b.n	8002cfc <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8002bec:	231b      	movs	r3, #27
 8002bee:	2218      	movs	r2, #24
 8002bf0:	4694      	mov	ip, r2
 8002bf2:	44bc      	add	ip, r7
 8002bf4:	4463      	add	r3, ip
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d835      	bhi.n	8002c68 <UART_SetConfig+0x34c>
 8002bfc:	009a      	lsls	r2, r3, #2
 8002bfe:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <UART_SetConfig+0x348>)
 8002c00:	18d3      	adds	r3, r2, r3
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c06:	f7ff f993 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c0e:	e035      	b.n	8002c7c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c10:	f7ff f9a4 	bl	8001f5c <HAL_RCC_GetPCLK2Freq>
 8002c14:	0003      	movs	r3, r0
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c18:	e030      	b.n	8002c7c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <UART_SetConfig+0x33c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2210      	movs	r2, #16
 8002c20:	4013      	ands	r3, r2
 8002c22:	d002      	beq.n	8002c2a <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c24:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <UART_SetConfig+0x340>)
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c28:	e028      	b.n	8002c7c <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <UART_SetConfig+0x344>)
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c2e:	e025      	b.n	8002c7c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c30:	f7ff f8ce 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8002c34:	0003      	movs	r3, r0
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c38:	e020      	b.n	8002c7c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	021b      	lsls	r3, r3, #8
 8002c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c40:	e01c      	b.n	8002c7c <UART_SetConfig+0x360>
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	efff69f3 	.word	0xefff69f3
 8002c48:	ffffcfff 	.word	0xffffcfff
 8002c4c:	40004800 	.word	0x40004800
 8002c50:	fffff4ff 	.word	0xfffff4ff
 8002c54:	40004400 	.word	0x40004400
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	003d0900 	.word	0x003d0900
 8002c60:	00f42400 	.word	0x00f42400
 8002c64:	080031f4 	.word	0x080031f4
      default:
        pclk = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c6c:	231a      	movs	r3, #26
 8002c6e:	2218      	movs	r2, #24
 8002c70:	4694      	mov	ip, r2
 8002c72:	44bc      	add	ip, r7
 8002c74:	4463      	add	r3, ip
 8002c76:	2201      	movs	r2, #1
 8002c78:	701a      	strb	r2, [r3, #0]
        break;
 8002c7a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d100      	bne.n	8002c84 <UART_SetConfig+0x368>
 8002c82:	e095      	b.n	8002db0 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	005a      	lsls	r2, r3, #1
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	18d2      	adds	r2, r2, r3
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	0019      	movs	r1, r3
 8002c96:	0010      	movs	r0, r2
 8002c98:	f7fd fa36 	bl	8000108 <__udivsi3>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	2b0f      	cmp	r3, #15
 8002ca6:	d921      	bls.n	8002cec <UART_SetConfig+0x3d0>
 8002ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002caa:	2380      	movs	r3, #128	; 0x80
 8002cac:	025b      	lsls	r3, r3, #9
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d21c      	bcs.n	8002cec <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	200e      	movs	r0, #14
 8002cb8:	2418      	movs	r4, #24
 8002cba:	193b      	adds	r3, r7, r4
 8002cbc:	181b      	adds	r3, r3, r0
 8002cbe:	210f      	movs	r1, #15
 8002cc0:	438a      	bics	r2, r1
 8002cc2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	085b      	lsrs	r3, r3, #1
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2207      	movs	r2, #7
 8002ccc:	4013      	ands	r3, r2
 8002cce:	b299      	uxth	r1, r3
 8002cd0:	193b      	adds	r3, r7, r4
 8002cd2:	181b      	adds	r3, r3, r0
 8002cd4:	193a      	adds	r2, r7, r4
 8002cd6:	1812      	adds	r2, r2, r0
 8002cd8:	8812      	ldrh	r2, [r2, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	193a      	adds	r2, r7, r4
 8002ce4:	1812      	adds	r2, r2, r0
 8002ce6:	8812      	ldrh	r2, [r2, #0]
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	e061      	b.n	8002db0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002cec:	231a      	movs	r3, #26
 8002cee:	2218      	movs	r2, #24
 8002cf0:	4694      	mov	ip, r2
 8002cf2:	44bc      	add	ip, r7
 8002cf4:	4463      	add	r3, ip
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	701a      	strb	r2, [r3, #0]
 8002cfa:	e059      	b.n	8002db0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cfc:	231b      	movs	r3, #27
 8002cfe:	2218      	movs	r2, #24
 8002d00:	4694      	mov	ip, r2
 8002d02:	44bc      	add	ip, r7
 8002d04:	4463      	add	r3, ip
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d822      	bhi.n	8002d52 <UART_SetConfig+0x436>
 8002d0c:	009a      	lsls	r2, r3, #2
 8002d0e:	4b30      	ldr	r3, [pc, #192]	; (8002dd0 <UART_SetConfig+0x4b4>)
 8002d10:	18d3      	adds	r3, r2, r3
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d16:	f7ff f90b 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d1e:	e022      	b.n	8002d66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d20:	f7ff f91c 	bl	8001f5c <HAL_RCC_GetPCLK2Freq>
 8002d24:	0003      	movs	r3, r0
 8002d26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d28:	e01d      	b.n	8002d66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d2a:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <UART_SetConfig+0x4b8>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2210      	movs	r2, #16
 8002d30:	4013      	ands	r3, r2
 8002d32:	d002      	beq.n	8002d3a <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d34:	4b28      	ldr	r3, [pc, #160]	; (8002dd8 <UART_SetConfig+0x4bc>)
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d38:	e015      	b.n	8002d66 <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 8002d3a:	4b28      	ldr	r3, [pc, #160]	; (8002ddc <UART_SetConfig+0x4c0>)
 8002d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d3e:	e012      	b.n	8002d66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d40:	f7ff f846 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8002d44:	0003      	movs	r3, r0
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d48:	e00d      	b.n	8002d66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d50:	e009      	b.n	8002d66 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d56:	231a      	movs	r3, #26
 8002d58:	2218      	movs	r2, #24
 8002d5a:	4694      	mov	ip, r2
 8002d5c:	44bc      	add	ip, r7
 8002d5e:	4463      	add	r3, ip
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
        break;
 8002d64:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d021      	beq.n	8002db0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	085a      	lsrs	r2, r3, #1
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	18d2      	adds	r2, r2, r3
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	0010      	movs	r0, r2
 8002d7e:	f7fd f9c3 	bl	8000108 <__udivsi3>
 8002d82:	0003      	movs	r3, r0
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	2b0f      	cmp	r3, #15
 8002d8c:	d909      	bls.n	8002da2 <UART_SetConfig+0x486>
 8002d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	025b      	lsls	r3, r3, #9
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d204      	bcs.n	8002da2 <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d9e:	60da      	str	r2, [r3, #12]
 8002da0:	e006      	b.n	8002db0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002da2:	231a      	movs	r3, #26
 8002da4:	2218      	movs	r2, #24
 8002da6:	4694      	mov	ip, r2
 8002da8:	44bc      	add	ip, r7
 8002daa:	4463      	add	r3, ip
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2200      	movs	r2, #0
 8002db4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	2200      	movs	r2, #0
 8002dba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002dbc:	231a      	movs	r3, #26
 8002dbe:	2218      	movs	r2, #24
 8002dc0:	4694      	mov	ip, r2
 8002dc2:	44bc      	add	ip, r7
 8002dc4:	4463      	add	r3, ip
 8002dc6:	781b      	ldrb	r3, [r3, #0]
}
 8002dc8:	0018      	movs	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b00e      	add	sp, #56	; 0x38
 8002dce:	bdb0      	pop	{r4, r5, r7, pc}
 8002dd0:	08003218 	.word	0x08003218
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	003d0900 	.word	0x003d0900
 8002ddc:	00f42400 	.word	0x00f42400

08002de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	2201      	movs	r2, #1
 8002dee:	4013      	ands	r3, r2
 8002df0:	d00b      	beq.n	8002e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4a4a      	ldr	r2, [pc, #296]	; (8002f24 <UART_AdvFeatureConfig+0x144>)
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	2202      	movs	r2, #2
 8002e10:	4013      	ands	r3, r2
 8002e12:	d00b      	beq.n	8002e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4a43      	ldr	r2, [pc, #268]	; (8002f28 <UART_AdvFeatureConfig+0x148>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	0019      	movs	r1, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	2204      	movs	r2, #4
 8002e32:	4013      	ands	r3, r2
 8002e34:	d00b      	beq.n	8002e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4a3b      	ldr	r2, [pc, #236]	; (8002f2c <UART_AdvFeatureConfig+0x14c>)
 8002e3e:	4013      	ands	r3, r2
 8002e40:	0019      	movs	r1, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	2208      	movs	r2, #8
 8002e54:	4013      	ands	r3, r2
 8002e56:	d00b      	beq.n	8002e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4a34      	ldr	r2, [pc, #208]	; (8002f30 <UART_AdvFeatureConfig+0x150>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	0019      	movs	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2210      	movs	r2, #16
 8002e76:	4013      	ands	r3, r2
 8002e78:	d00b      	beq.n	8002e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	4a2c      	ldr	r2, [pc, #176]	; (8002f34 <UART_AdvFeatureConfig+0x154>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	0019      	movs	r1, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	2220      	movs	r2, #32
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d00b      	beq.n	8002eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	4a25      	ldr	r2, [pc, #148]	; (8002f38 <UART_AdvFeatureConfig+0x158>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	2240      	movs	r2, #64	; 0x40
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d01d      	beq.n	8002efa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	4a1d      	ldr	r2, [pc, #116]	; (8002f3c <UART_AdvFeatureConfig+0x15c>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	0019      	movs	r1, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	035b      	lsls	r3, r3, #13
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d10b      	bne.n	8002efa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <UART_AdvFeatureConfig+0x160>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	0019      	movs	r1, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	2280      	movs	r2, #128	; 0x80
 8002f00:	4013      	ands	r3, r2
 8002f02:	d00b      	beq.n	8002f1c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4a0e      	ldr	r2, [pc, #56]	; (8002f44 <UART_AdvFeatureConfig+0x164>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	0019      	movs	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	605a      	str	r2, [r3, #4]
  }
}
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	fffdffff 	.word	0xfffdffff
 8002f28:	fffeffff 	.word	0xfffeffff
 8002f2c:	fffbffff 	.word	0xfffbffff
 8002f30:	ffff7fff 	.word	0xffff7fff
 8002f34:	ffffefff 	.word	0xffffefff
 8002f38:	ffffdfff 	.word	0xffffdfff
 8002f3c:	ffefffff 	.word	0xffefffff
 8002f40:	ff9fffff 	.word	0xff9fffff
 8002f44:	fff7ffff 	.word	0xfff7ffff

08002f48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af02      	add	r7, sp, #8
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2280      	movs	r2, #128	; 0x80
 8002f54:	2100      	movs	r1, #0
 8002f56:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f58:	f7fd ffe0 	bl	8000f1c <HAL_GetTick>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2208      	movs	r2, #8
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d10c      	bne.n	8002f88 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2280      	movs	r2, #128	; 0x80
 8002f72:	0391      	lsls	r1, r2, #14
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4a17      	ldr	r2, [pc, #92]	; (8002fd4 <UART_CheckIdleState+0x8c>)
 8002f78:	9200      	str	r2, [sp, #0]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f000 f82c 	bl	8002fd8 <UART_WaitOnFlagUntilTimeout>
 8002f80:	1e03      	subs	r3, r0, #0
 8002f82:	d001      	beq.n	8002f88 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e021      	b.n	8002fcc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2204      	movs	r2, #4
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d10c      	bne.n	8002fb0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2280      	movs	r2, #128	; 0x80
 8002f9a:	03d1      	lsls	r1, r2, #15
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	4a0d      	ldr	r2, [pc, #52]	; (8002fd4 <UART_CheckIdleState+0x8c>)
 8002fa0:	9200      	str	r2, [sp, #0]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f000 f818 	bl	8002fd8 <UART_WaitOnFlagUntilTimeout>
 8002fa8:	1e03      	subs	r3, r0, #0
 8002faa:	d001      	beq.n	8002fb0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e00d      	b.n	8002fcc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2274      	movs	r2, #116	; 0x74
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b004      	add	sp, #16
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	01ffffff 	.word	0x01ffffff

08002fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b094      	sub	sp, #80	; 0x50
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	1dfb      	adds	r3, r7, #7
 8002fe6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fe8:	e0a3      	b.n	8003132 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fec:	3301      	adds	r3, #1
 8002fee:	d100      	bne.n	8002ff2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002ff0:	e09f      	b.n	8003132 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff2:	f7fd ff93 	bl	8000f1c <HAL_GetTick>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d302      	bcc.n	8003008 <UART_WaitOnFlagUntilTimeout+0x30>
 8003002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003004:	2b00      	cmp	r3, #0
 8003006:	d13d      	bne.n	8003084 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003008:	f3ef 8310 	mrs	r3, PRIMASK
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800300e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003010:	647b      	str	r3, [r7, #68]	; 0x44
 8003012:	2301      	movs	r3, #1
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003018:	f383 8810 	msr	PRIMASK, r3
}
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	494c      	ldr	r1, [pc, #304]	; (800315c <UART_WaitOnFlagUntilTimeout+0x184>)
 800302a:	400a      	ands	r2, r1
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003030:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	f383 8810 	msr	PRIMASK, r3
}
 8003038:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800303a:	f3ef 8310 	mrs	r3, PRIMASK
 800303e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003042:	643b      	str	r3, [r7, #64]	; 0x40
 8003044:	2301      	movs	r3, #1
 8003046:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	f383 8810 	msr	PRIMASK, r3
}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2101      	movs	r1, #1
 800305c:	438a      	bics	r2, r1
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003062:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003066:	f383 8810 	msr	PRIMASK, r3
}
 800306a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2274      	movs	r2, #116	; 0x74
 800307c:	2100      	movs	r1, #0
 800307e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e067      	b.n	8003154 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2204      	movs	r2, #4
 800308c:	4013      	ands	r3, r2
 800308e:	d050      	beq.n	8003132 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	401a      	ands	r2, r3
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d146      	bne.n	8003132 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2280      	movs	r2, #128	; 0x80
 80030aa:	0112      	lsls	r2, r2, #4
 80030ac:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ae:	f3ef 8310 	mrs	r3, PRIMASK
 80030b2:	613b      	str	r3, [r7, #16]
  return(result);
 80030b4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b8:	2301      	movs	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	f383 8810 	msr	PRIMASK, r3
}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4923      	ldr	r1, [pc, #140]	; (800315c <UART_WaitOnFlagUntilTimeout+0x184>)
 80030d0:	400a      	ands	r2, r1
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f383 8810 	msr	PRIMASK, r3
}
 80030de:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e0:	f3ef 8310 	mrs	r3, PRIMASK
 80030e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80030e6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80030ea:	2301      	movs	r3, #1
 80030ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	f383 8810 	msr	PRIMASK, r3
}
 80030f4:	46c0      	nop			; (mov r8, r8)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	438a      	bics	r2, r1
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	f383 8810 	msr	PRIMASK, r3
}
 8003110:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2220      	movs	r2, #32
 8003116:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2280      	movs	r2, #128	; 0x80
 8003122:	2120      	movs	r1, #32
 8003124:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2274      	movs	r2, #116	; 0x74
 800312a:	2100      	movs	r1, #0
 800312c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e010      	b.n	8003154 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	68ba      	ldr	r2, [r7, #8]
 800313a:	4013      	ands	r3, r2
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	425a      	negs	r2, r3
 8003142:	4153      	adcs	r3, r2
 8003144:	b2db      	uxtb	r3, r3
 8003146:	001a      	movs	r2, r3
 8003148:	1dfb      	adds	r3, r7, #7
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d100      	bne.n	8003152 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003150:	e74b      	b.n	8002fea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	0018      	movs	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	b014      	add	sp, #80	; 0x50
 800315a:	bd80      	pop	{r7, pc}
 800315c:	fffffe5f 	.word	0xfffffe5f

08003160 <__libc_init_array>:
 8003160:	b570      	push	{r4, r5, r6, lr}
 8003162:	2600      	movs	r6, #0
 8003164:	4d0c      	ldr	r5, [pc, #48]	; (8003198 <__libc_init_array+0x38>)
 8003166:	4c0d      	ldr	r4, [pc, #52]	; (800319c <__libc_init_array+0x3c>)
 8003168:	1b64      	subs	r4, r4, r5
 800316a:	10a4      	asrs	r4, r4, #2
 800316c:	42a6      	cmp	r6, r4
 800316e:	d109      	bne.n	8003184 <__libc_init_array+0x24>
 8003170:	2600      	movs	r6, #0
 8003172:	f000 f821 	bl	80031b8 <_init>
 8003176:	4d0a      	ldr	r5, [pc, #40]	; (80031a0 <__libc_init_array+0x40>)
 8003178:	4c0a      	ldr	r4, [pc, #40]	; (80031a4 <__libc_init_array+0x44>)
 800317a:	1b64      	subs	r4, r4, r5
 800317c:	10a4      	asrs	r4, r4, #2
 800317e:	42a6      	cmp	r6, r4
 8003180:	d105      	bne.n	800318e <__libc_init_array+0x2e>
 8003182:	bd70      	pop	{r4, r5, r6, pc}
 8003184:	00b3      	lsls	r3, r6, #2
 8003186:	58eb      	ldr	r3, [r5, r3]
 8003188:	4798      	blx	r3
 800318a:	3601      	adds	r6, #1
 800318c:	e7ee      	b.n	800316c <__libc_init_array+0xc>
 800318e:	00b3      	lsls	r3, r6, #2
 8003190:	58eb      	ldr	r3, [r5, r3]
 8003192:	4798      	blx	r3
 8003194:	3601      	adds	r6, #1
 8003196:	e7f2      	b.n	800317e <__libc_init_array+0x1e>
 8003198:	08003244 	.word	0x08003244
 800319c:	08003244 	.word	0x08003244
 80031a0:	08003244 	.word	0x08003244
 80031a4:	08003248 	.word	0x08003248

080031a8 <memset>:
 80031a8:	0003      	movs	r3, r0
 80031aa:	1882      	adds	r2, r0, r2
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d100      	bne.n	80031b2 <memset+0xa>
 80031b0:	4770      	bx	lr
 80031b2:	7019      	strb	r1, [r3, #0]
 80031b4:	3301      	adds	r3, #1
 80031b6:	e7f9      	b.n	80031ac <memset+0x4>

080031b8 <_init>:
 80031b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031be:	bc08      	pop	{r3}
 80031c0:	469e      	mov	lr, r3
 80031c2:	4770      	bx	lr

080031c4 <_fini>:
 80031c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ca:	bc08      	pop	{r3}
 80031cc:	469e      	mov	lr, r3
 80031ce:	4770      	bx	lr
